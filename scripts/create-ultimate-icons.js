const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–µ PNG –∏–∫–æ–Ω–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
const createUltimatePNG = (size) => {
  const width = size;
  const height = size;
  const data = [];
  
  const centerX = width / 2;
  const centerY = height / 2;
  const outerRadius = Math.min(width, height) / 2 - 8;
  const innerRadius = outerRadius - 20;
  const letterRadius = innerRadius * 0.7;
  
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const dx = x - centerX;
      const dy = y - centerY;
      const distance = Math.sqrt(dx * dx + dy * dy);
      const angle = Math.atan2(dy, dx);
      
      let r, g, b, a = 255;
      
      if (distance <= outerRadius) {
        if (distance <= innerRadius) {
          // –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
          const gradient = (distance / innerRadius);
          const angleFactor = Math.cos(angle * 2) * 0.1 + 0.9;
          
          // –ë–∞–∑–æ–≤—ã–π –∑–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç
          r = Math.floor(255 - gradient * 40 * angleFactor);
          g = Math.floor(179 - gradient * 25 * angleFactor);
          b = Math.floor(71 - gradient * 15 * angleFactor);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –±–ª–∏–∫
          const highlightX = centerX - innerRadius * 0.4;
          const highlightY = centerY - innerRadius * 0.4;
          const highlightDist = Math.sqrt((x - highlightX) ** 2 + (y - highlightY) ** 2);
          
          if (highlightDist < innerRadius * 0.5) {
            const highlight = Math.pow(1 - (highlightDist / (innerRadius * 0.5)), 2);
            r = Math.min(255, r + highlight * 60);
            g = Math.min(255, g + highlight * 60);
            b = Math.min(255, b + highlight * 40);
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –æ—Ç –∫—Ä–∞—è
          if (distance > innerRadius * 0.8) {
            const shadow = (distance - innerRadius * 0.8) / (innerRadius * 0.2);
            r = Math.floor(r * (1 - shadow * 0.3));
            g = Math.floor(g * (1 - shadow * 0.3));
            b = Math.floor(b * (1 - shadow * 0.3));
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É M —Å —Ç–µ–Ω—å—é
          if (isInsideLetterM(x, y, centerX, centerY, letterRadius)) {
            // –¢–µ–Ω—å –±—É–∫–≤—ã
            const shadowX = x + 2;
            const shadowY = y + 2;
            if (isInsideLetterM(shadowX, shadowY, centerX, centerY, letterRadius)) {
              r = Math.floor(r * 0.2);
              g = Math.floor(g * 0.15);
              b = Math.floor(b * 0.1);
            } else {
              // –°–∞–º–∞ –±—É–∫–≤–∞
              r = Math.floor(r * 0.4);
              g = Math.floor(g * 0.3);
              b = Math.floor(b * 0.2);
            }
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
          const noise = Math.sin(x * 0.1) * Math.cos(y * 0.1) * 5;
          r = Math.max(0, Math.min(255, r + noise));
          g = Math.max(0, Math.min(255, g + noise));
          b = Math.max(0, Math.min(255, b + noise));
          
        } else {
          // –û–±–æ–¥–æ–∫ –º–æ–Ω–µ—Ç—ã —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
          const rimGradient = (distance - innerRadius) / (outerRadius - innerRadius);
          r = Math.floor(255 - rimGradient * 20);
          g = Math.floor(107 + rimGradient * 20);
          b = Math.floor(53 + rimGradient * 10);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∫ –Ω–∞ –æ–±–æ–¥–∫–µ
          if (Math.abs(angle) < Math.PI / 4 || Math.abs(angle - Math.PI) < Math.PI / 4) {
            r = Math.min(255, r + 30);
            g = Math.min(255, g + 30);
            b = Math.min(255, b + 20);
          }
        }
      } else {
        // –§–æ–Ω - –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        r = g = b = 0; a = 0;
      }
      
      data.push(r, g, b, a);
    }
  }
  
  return createPNGFromRGBA(data, width, height);
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—É–∫–≤—ã M
function isInsideLetterM(x, y, centerX, centerY, radius) {
  const dx = x - centerX;
  const dy = y - centerY;
  
  const letterWidth = radius * 0.9;
  const letterHeight = radius * 1.4;
  
  if (Math.abs(dx) > letterWidth / 2 || Math.abs(dy) > letterHeight / 2) {
    return false;
  }
  
  // –õ–µ–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
  if (dx < -letterWidth * 0.35 && dx > -letterWidth * 0.45) {
    return true;
  }
  
  // –ü—Ä–∞–≤–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
  if (dx > letterWidth * 0.35 && dx < letterWidth * 0.45) {
    return true;
  }
  
  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å
  if (dx > -letterWidth * 0.1 && dx < letterWidth * 0.1) {
    return dy > -letterHeight * 0.3 && dy < letterHeight * 0.3;
  }
  
  // –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
  const leftSlope = (dx + letterWidth * 0.45) / (letterWidth * 0.55);
  const rightSlope = (dx - letterWidth * 0.45) / (letterWidth * 0.55);
  
  if (dy > -letterHeight * 0.4 && dy < letterHeight * 0.4) {
    if (Math.abs(dy) < letterHeight * 0.4 * (1 - Math.abs(leftSlope))) {
      return true;
    }
    if (Math.abs(dy) < letterHeight * 0.4 * (1 - Math.abs(rightSlope))) {
      return true;
    }
  }
  
  return false;
}

// –°–æ–∑–¥–∞–µ–º PNG –∏–∑ RGBA –¥–∞–Ω–Ω—ã—Ö
function createPNGFromRGBA(data, width, height) {
  const pngSignature = Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);
  
  // IHDR chunk
  const ihdrData = Buffer.alloc(13);
  ihdrData.writeUInt32BE(width, 0);
  ihdrData.writeUInt32BE(height, 4);
  ihdrData.writeUInt8(8, 8);  // bit depth
  ihdrData.writeUInt8(6, 9);  // color type (RGBA)
  ihdrData.writeUInt8(0, 10); // compression
  ihdrData.writeUInt8(0, 11); // filter
  ihdrData.writeUInt8(0, 12); // interlace
  
  const ihdrCrc = crc32(Buffer.concat([Buffer.from('IHDR'), ihdrData]));
  const ihdrChunk = Buffer.concat([
    Buffer.from([0, 0, 0, 13]),
    Buffer.from('IHDR'),
    ihdrData,
    Buffer.from([ihdrCrc >> 24, (ihdrCrc >> 16) & 0xFF, (ihdrCrc >> 8) & 0xFF, ihdrCrc & 0xFF])
  ]);
  
  // IDAT chunk
  const imageData = Buffer.from(data);
  const compressedData = simpleDeflate(imageData);
  
  const idatCrc = crc32(Buffer.concat([Buffer.from('IDAT'), compressedData]));
  const idatChunk = Buffer.concat([
    Buffer.from([compressedData.length >> 24, (compressedData.length >> 16) & 0xFF, (compressedData.length >> 8) & 0xFF, compressedData.length & 0xFF]),
    Buffer.from('IDAT'),
    compressedData,
    Buffer.from([idatCrc >> 24, (idatCrc >> 16) & 0xFF, (idatCrc >> 8) & 0xFF, idatCrc & 0xFF])
  ]);
  
  // IEND chunk
  const iendCrc = crc32(Buffer.from('IEND'));
  const iendChunk = Buffer.concat([
    Buffer.from([0, 0, 0, 0]),
    Buffer.from('IEND'),
    Buffer.from([iendCrc >> 24, (iendCrc >> 16) & 0xFF, (iendCrc >> 8) & 0xFF, iendCrc & 0xFF])
  ]);
  
  return Buffer.concat([pngSignature, ihdrChunk, idatChunk, iendChunk]);
}

// CRC32 —Ñ—É–Ω–∫—Ü–∏—è
function crc32(data) {
  const table = [];
  for (let i = 0; i < 256; i++) {
    let c = i;
    for (let j = 0; j < 8; j++) {
      c = (c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1);
    }
    table[i] = c;
  }
  
  let crc = 0xFFFFFFFF;
  for (let i = 0; i < data.length; i++) {
    crc = table[(crc ^ data[i]) & 0xFF] ^ (crc >>> 8);
  }
  return (crc ^ 0xFFFFFFFF) >>> 0;
}

// –ü—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ
function simpleDeflate(data) {
  return data;
}

// –°–æ–∑–¥–∞–µ–º —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–µ PNG –∏–∫–æ–Ω–∫–∏
const sizes = [192, 512];

console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã—Ö PNG –∏–∫–æ–Ω–æ–∫...\n');

sizes.forEach(size => {
  try {
    const pngData = createUltimatePNG(size);
    const filename = `icon-${size}x${size}.png`;
    const filepath = path.join(__dirname, '..', 'public', filename);
    
    fs.writeFileSync(filepath, pngData);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ ${filename} (${size}x${size})`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è icon-${size}x${size}.png:`, error.message);
  }
});

// –°–æ–∑–¥–∞–µ–º favicon
try {
  const faviconData = createUltimatePNG(32);
  fs.writeFileSync(path.join(__dirname, '..', 'public', 'favicon.ico'), faviconData);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω favicon.ico (32x32)`);
} catch (error) {
  console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è favicon.ico:`, error.message);
}

console.log('\nüéâ –£–ª—å—Ç–∏–º–∞—Ç–∏–≤–Ω—ã–µ PNG –∏–∫–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!');
console.log('\nüíé –ò–∫–æ–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç:');
console.log('   ‚ú® –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∑–æ–ª–æ—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç');
console.log('   üî§ –£–ª—É—á—à–µ–Ω–Ω—É—é –±—É–∫–≤—É M —Å —Ç–µ–Ω—å—é');
console.log('   üí´ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –±–ª–∏–∫–∏ –∏ —Ç–µ–Ω–∏');
console.log('   üéØ –¢–µ–∫—Å—Ç—É—Ä—É –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é');
console.log('   üåü –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω');
console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–ª—è PWA!');
