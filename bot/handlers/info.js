const { inlineKeyboard } = require('../keyboards/inline');
const { isAdmin } = require('../utils/admin');
const { activateKey, getUserKeyHistory, createKey } = require('../utils/keys');

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
const userStates = new Map();

module.exports = (bot) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info
  bot.command('info', async (ctx) => {
    const adminStatus = isAdmin(ctx.from.id);
    await ctx.reply(
      '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n' +
      'Magnum Star Bot - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Stars –∏ Magnum Coins.\n\n' +
      'üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n' +
      '‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
      '‚Ä¢ üîë –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–µ–π (–ø—Ä–æ–º–æ–∫–æ–¥—ã)\n' +
      (adminStatus ? '‚Ä¢ üåê WebApp (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n' : '') +
      (adminStatus ? '‚Ä¢ üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n' : '') +
      '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
      inlineKeyboard(adminStatus)
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
  bot.command('menu', async (ctx) => {
    const adminStatus = isAdmin(ctx.from.id);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', inlineKeyboard(adminStatus));
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('text', async (ctx) => {
    const text = ctx.message.text;
    const userId = ctx.from.id;
    const adminStatus = isAdmin(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = userStates.get(userId);
    
    if (userState && userState.state === 'waiting_for_key') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∫–ª—é—á
      if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
        userStates.delete(userId);
        await ctx.reply('‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', inlineKeyboard(adminStatus));
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
      if (text.length !== 12 || !/^[A-Z0-9]{12}$/i.test(text)) {
        await ctx.reply(
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞!\n\n' +
          'üìù –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)\n' +
          'üí° –ü—Ä–∏–º–µ—Ä: ABC123DEF456\n\n' +
          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.',
          inlineKeyboard(adminStatus)
        );
        return;
      }
      
      try {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á
        const result = activateKey(text, userId);
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.delete(userId);
        
        await ctx.reply(
          `‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
          `üîë –ö–ª—é—á: ${result.key}\n` +
          `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${result.description}\n\n` +
          `üéÅ –ü–æ–ª—É—á–µ–Ω–æ:\n` +
          (result.reward.stars > 0 ? `‚îú ‚≠ê Stars: +${result.reward.stars}\n` : '') +
          (result.reward.coins > 0 ? `‚îî ü™ô Magnum Coins: +${result.reward.coins}\n` : '') +
          `\nüí∞ –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${result.remainingUses}`,
          inlineKeyboard(adminStatus)
        );
      } catch (error) {
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.delete(userId);
        
        await ctx.reply(
          `‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞!\n\n` +
          `üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}\n\n` +
          `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.`,
          inlineKeyboard(adminStatus)
        );
      }
      return;
    }
    
    if (userState && userState.state === 'creating_key') {
      // –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç –∫–ª—é—á
      if (text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
        userStates.delete(userId);
        await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', inlineKeyboard(adminStatus));
        return;
      }
      
      const step = userState.step;
      
      switch (step) {
        case 'stars':
          // –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Stars
          const stars = parseInt(text);
          if (isNaN(stars) || stars < 0) {
            await ctx.reply(
              '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars!\n\n' +
              'üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 0\n' +
              '–ü—Ä–∏–º–µ—Ä: 50\n\n' +
              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
            );
            return;
          }
          
          userState.data.stars = stars;
          userState.step = 'coins';
          
          await ctx.reply(
            'üîë –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:\n\n' +
            `‚úÖ Stars: ${stars}\n\n` +
            '–®–∞–≥ 2/4: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Magnum Coins –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã\n\n' +
            'üí° –ü—Ä–∏–º–µ—Ä: 100\n' +
            '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'
          );
          break;
          
        case 'coins':
          // –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Coins
          const coins = parseInt(text);
          if (isNaN(coins) || coins < 0) {
            await ctx.reply(
              '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Coins!\n\n' +
              'üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ 0\n' +
              '–ü—Ä–∏–º–µ—Ä: 100\n\n' +
              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
            );
            return;
          }
          
          userState.data.coins = coins;
          userState.step = 'max_uses';
          
          await ctx.reply(
            'üîë –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:\n\n' +
            `‚úÖ Stars: ${userState.data.stars}\n` +
            `‚úÖ Coins: ${coins}\n\n` +
            '–®–∞–≥ 3/4: –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n' +
            'üí° –ü—Ä–∏–º–µ—Ä: 5\n' +
            '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'
          );
          break;
          
        case 'max_uses':
          // –í–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
          const maxUses = parseInt(text);
          if (isNaN(maxUses) || maxUses < 1) {
            await ctx.reply(
              '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π!\n\n' +
              'üí° –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0\n' +
              '–ü—Ä–∏–º–µ—Ä: 5\n\n' +
              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
            );
            return;
          }
          
          userState.data.maxUses = maxUses;
          userState.step = 'description';
          
          await ctx.reply(
            'üîë –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:\n\n' +
            `‚úÖ Stars: ${userState.data.stars}\n` +
            `‚úÖ Coins: ${userState.data.coins}\n` +
            `‚úÖ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxUses}\n\n` +
            '–®–∞–≥ 4/4: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞\n\n' +
            'üí° –ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
            '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"'
          );
          break;
          
        case 'description':
          // –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
          const description = text.trim();
          if (description.length === 0) {
            await ctx.reply(
              '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n' +
              'üí° –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞\n' +
              '–ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n' +
              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
            );
            return;
          }
          
          userState.data.description = description;
          
          // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á
          try {
            const newKey = createKey(
              { stars: userState.data.stars, coins: userState.data.coins },
              userState.data.maxUses,
              userState.data.description
            );
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.delete(userId);
            
            await ctx.reply(
              `‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
              `üîë –ö–ª—é—á: ${newKey}\n` +
              `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${userState.data.description}\n\n` +
              `üéÅ –ù–∞–≥—Ä–∞–¥–∞:\n` +
              `‚îú ‚≠ê Stars: ${userState.data.stars}\n` +
              `‚îî ü™ô Magnum Coins: ${userState.data.coins}\n\n` +
              `üí∞ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${userState.data.maxUses}`,
              inlineKeyboard(adminStatus)
            );
          } catch (error) {
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.delete(userId);
            
            await ctx.reply(
              `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞!\n\n` +
              `üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
              inlineKeyboard(adminStatus)
            );
          }
          break;
      }
      return;
    }
    
    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    const textLower = text.toLowerCase();
    
    switch (textLower) {
      case '–º–µ–Ω—é':
      case 'menu':
      case '–∫–Ω–æ–ø–∫–∏':
      case 'buttons':
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', inlineKeyboard(adminStatus));
        break;
        
      case '–ø—Ä–æ—Ñ–∏–ª—å':
      case 'profile':
        const user = ctx.from;
        const userName = user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª—é—Ç—ã
        const { getUserBalance, getUserStats } = require('../utils/currency');
        const balance = getUserBalance(userId);
        const currencyStats = getUserStats(userId);
        const keyHistory = getUserKeyHistory(userId);
        
        const profileMessage = `üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚îú ID: ${userId}
‚îú –ò–º—è: ${userName}
‚îú Username: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚îî –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date().toLocaleDateString('ru-RU')}

üíé –ë–∞–ª–∞–Ω—Å
‚îú ‚≠ê Stars: ${balance.stars}
‚îî ü™ô Magnum Coins: ${balance.coins}

üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã: 0
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 Stars
‚îî –£—Ä–æ–≤–µ–Ω—å: –ù–æ–≤–∏—á–æ–∫

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚îú –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${currencyStats.totalTransactions}
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ Stars: ${currencyStats.totalEarned.stars}
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ Coins: ${currencyStats.totalEarned.coins}
‚îú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: ${keyHistory.length}
‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: –°–µ–≥–æ–¥–Ω—è`;
        
        await ctx.reply(profileMessage, inlineKeyboard(adminStatus));
        break;
        
      case '–∫–ª—é—á':
      case 'key':
      case '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å':
      case 'activate':
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        userStates.set(userId, { state: 'waiting_for_key', timestamp: Date.now() });
        
        await ctx.reply(
          'üîë –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞:\n\n' +
          '–í–≤–µ–¥–∏—Ç–µ 12-–∑–Ω–∞—á–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n' +
          'üìù –§–æ—Ä–º–∞—Ç: XXXXXXXXXXXX\n' +
          'üí° –ü—Ä–∏–º–µ—Ä: ABC123DEF456\n\n' +
          '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
          inlineKeyboard(adminStatus)
        );
        break;
        
      case '–≤–µ–±':
      case 'webapp':
      case 'web':
        if (!adminStatus) {
          await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
          return;
        }
        
        await ctx.reply(
          'üåê WebApp - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n\n' +
          'üì± –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n' +
          'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
          'üéÆ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n' +
          'üí¨ –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n' +
          '–û—Ç–∫—Ä—ã–≤–∞–µ–º WebApp...',
          inlineKeyboard(adminStatus)
        );
        break;
        
      case '–∞–¥–º–∏–Ω':
      case 'admin':
      case '–ø–∞–Ω–µ–ª—å':
      case 'panel':
        if (!adminStatus) {
          await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.');
          return;
        }
        
        const { getAdminStats, getBotStats } = require('../utils/admin');
        const adminStats = getAdminStats();
        const botStats = getBotStats();
        
        const adminMessage = `üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:

üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
‚îú –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: ${adminStats.totalAdmins}
‚îú ID –∞–¥–º–∏–Ω–æ–≤: ${adminStats.adminIds.join(', ') || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}
‚îî –í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚îú –í–µ—Ä—Å–∏—è: ${adminStats.botInfo.version}
‚îú –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(adminStats.botInfo.uptime / 60)} –º–∏–Ω
‚îú –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${adminStats.botInfo.platform}
‚îî –ü–∞–º—è—Ç—å: ${Math.round(adminStats.botInfo.memory.heapUsed / 1024 / 1024)} MB

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.totalUsers}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.activeUsers}
‚îú –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${botStats.totalTransactions}
‚îî –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date(botStats.serverTime).toLocaleString('ru-RU')}`;
        
        await ctx.reply(adminMessage, inlineKeyboard(adminStatus));
        break;
        
      default:
        await ctx.reply(
          '–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ù–∞–ø–∏—à–∏—Ç–µ "–º–µ–Ω—é" –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /info',
          inlineKeyboard(adminStatus)
        );
    }
  });
};