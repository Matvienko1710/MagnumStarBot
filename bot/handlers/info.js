const { Markup } = require('telegraf');
const logger = require('../utils/logger');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π
const userStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function infoHandler(ctx) {
    try {
        const userId = ctx.from.id;
        const text = ctx.message.text;
        
        logger.info('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', { userId, text: text.substring(0, 50) });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userState = userStates.get(userId);
        
        if (userState && userState.state === 'waiting_for_key') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
            await handleKeyActivation(ctx, text);
            return;
        }
        
        if (userState && userState.state === 'creating_key') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            await handleKeyCreation(ctx, text);
            return;
        }
        
        if (userState && userState.state === 'creating_title_key') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
            await handleTitleKeyCreation(ctx, text);
            return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–º–æ—â–∏
        await ctx.reply(
            'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n\n' +
            'üîë –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞ –Ω–∞–∂–º–∏—Ç–µ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"\n' +
            'üí∞ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–ú–∞–π–Ω–µ—Ä—ã"\n' +
            'üë§ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ—Ñ–∏–ª—å"',
            Markup.inlineKeyboard([
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]).reply_markup
        );
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π', error, { userId: ctx?.from?.id });
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
async function handleKeyActivation(ctx, text) {
    const userId = ctx.from.id;
    const key = text.trim();
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞', { userId, key: key.substring(0, 10) });
    
    if (key.length === 0) {
        await ctx.reply(
            '‚ùå –ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n' +
            'üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'
        );
        return;
    }
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    
    logger.info('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', { userId, key: key.substring(0, 10) });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(userId);
    
    await ctx.reply(
        `‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
        `üéÅ –ü–æ–ª—É—á–µ–Ω–æ:\n` +
        `‚îú ‚≠ê Stars: +50\n` +
        `‚îî ü™ô Magnum Coins: +25\n\n` +
        `üîë –ö–ª—é—á: ${key.substring(0, 10)}...`,
        Markup.inlineKeyboard([
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]).reply_markup
    );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
async function handleKeyCreation(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞', { userId, step: userStates.get(userId)?.currentStep });
    
    const userState = userStates.get(userId);
    if (!userState) return;
    
    switch (userState.currentStep) {
        case 'description':
            // –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª—é—á–∞
            const description = text.trim();
            if (description.length === 0) {
                await ctx.reply(
                    '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n' +
                    'üí° –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞\n' +
                    '–ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n' +
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
                );
                return;
            }
            
            userState.data.description = description;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á
            try {
                logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –∫–ª—é—á–∞', { userId, data: userState.data });
                
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
                const newKey = 'TEST_' + Math.random().toString(36).substring(2, 8).toUpperCase();
                
                logger.info('–û–±—ã—á–Ω—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', { userId, key: newKey });
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                userStates.delete(userId);
                
                await ctx.reply(
                    `‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
                    `üîë –ö–ª—é—á: ${newKey}\n` +
                    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${userState.data.description}\n\n` +
                    `üéÅ –ù–∞–≥—Ä–∞–¥–∞:\n` +
                    `‚îú ‚≠ê Stars: ${userState.data.stars}\n` +
                    `‚îî ü™ô Magnum Coins: ${userState.data.coins}\n\n` +
                    `üí∞ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${userState.data.maxUses}`,
                    Markup.inlineKeyboard([
                        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
                    ]).reply_markup
                );
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∫–ª—é—á–∞', error, { userId, data: userState.data });
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                userStates.delete(userId);
                
                await ctx.reply(
                    `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞!\n\n` +
                    `üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
                    Markup.inlineKeyboard([
                        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
                    ]).reply_markup
                );
            }
            break;
            
        default:
            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞');
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
async function handleTitleKeyCreation(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', { userId, step: userStates.get(userId)?.currentStep });
    
    const userState = userStates.get(userId);
    if (!userState) return;
    
    switch (userState.currentStep) {
        case 'description':
            // –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª—é—á–∞
            const description = text.trim();
            if (description.length === 0) {
                await ctx.reply(
                    '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n' +
                    'üí° –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞\n' +
                    '–ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n' +
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
                );
                return;
            }
            
            logger.info('–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤–≤–µ–¥–µ–Ω–æ', { userId, description });
            userState.data.description = description;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Ç–∏—Ç—É–ª–∞
            try {
                logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', { userId, data: userState.data });
                
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
                const newKey = 'TITLE_' + Math.random().toString(36).substring(2, 8).toUpperCase();
                
                logger.info('–ö–ª—é—á —Ç–∏—Ç—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', { userId, key: newKey, data: userState.data });
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                userStates.delete(userId);
                
                await ctx.reply(
                    `‚úÖ –ö–ª—é—á —Ç–∏—Ç—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
                    `üîë –ö–ª—é—á: ${newKey}\n` +
                    `üëë –¢–∏—Ç—É–ª: ${userState.data.titleId}\n` +
                    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${userState.data.description}\n\n` +
                    `üéÅ –ù–∞–≥—Ä–∞–¥–∞:\n` +
                    `‚îú ‚≠ê Stars: ${userState.data.stars}\n` +
                    `‚îú ü™ô Magnum Coins: ${userState.data.coins}\n` +
                    `‚îî üëë –¢–∏—Ç—É–ª: ${userState.data.titleId}\n\n` +
                    `üí∞ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${userState.data.maxUses}`,
                    Markup.inlineKeyboard([
                        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
                    ]).reply_markup
                );
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', error, { userId, data: userState.data });
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                userStates.delete(userId);
                
                await ctx.reply(
                    `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞!\n\n` +
                    `üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
                    Markup.inlineKeyboard([
                        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
                    ]).reply_markup
                );
            }
            break;
            
        default:
            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞');
            break;
    }
}

module.exports = infoHandler;