const { Markup } = require('telegraf');
const logger = require('../utils/logger');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π
const userStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function infoHandler(ctx) {
    try {
        const userId = ctx.from.id;
        const text = ctx.message.text;
        
        logger.info('–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', { userId, text: text.substring(0, 50) });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userState = userStates.get(userId);
        
        if (userState && userState.state === 'waiting_for_key') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
            await handleKeyActivation(ctx, text);
            return;
        }
        
        if (userState && userState.state === 'creating_key') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
            await handleKeyCreation(ctx, text);
            return;
        }
        
        if (userState && userState.state === 'creating_title_key') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
            await handleTitleKeyCreation(ctx, text);
            return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–º–æ—â–∏
        await ctx.reply(
            'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.\n\n' +
            'üîë –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞ –Ω–∞–∂–º–∏—Ç–µ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"\n' +
            'üí∞ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ "–ú–∞–π–Ω–µ—Ä—ã"\n' +
            'üë§ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ—Ñ–∏–ª—å"',
            Markup.inlineKeyboard([
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]).reply_markup
        );
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π', error, { userId: ctx?.from?.id });
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
async function handleKeyActivation(ctx, text) {
    const userId = ctx.from.id;
    const key = text.trim();
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞', { userId, key: key.substring(0, 10) });
    
    if (key.length === 0) {
        await ctx.reply(
            '‚ùå –ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n' +
            'üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'
        );
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ (12 —Ü–∏—Ñ—Ä)
    const { validateKeyFormat, activateKey } = require('../utils/keys');
    
    if (!validateKeyFormat(key)) {
        await ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞!\n\n' +
            'üîë –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"'
        );
        return;
    }
    
    try {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª—é—á
        const result = activateKey(key, userId);
        
        if (result.success) {
            logger.info('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', { userId, key: key.substring(0, 10) });
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.delete(userId);
            
            const rewardText = [];
            if (result.reward.stars > 0) {
                rewardText.push(`‚≠ê Stars: +${result.reward.stars}`);
            }
            if (result.reward.coins > 0) {
                rewardText.push(`ü™ô Magnum Coins: +${result.reward.coins}`);
            }
            
            await ctx.reply(
                `‚úÖ **–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
                `üéÅ –ü–æ–ª—É—á–µ–Ω–æ:\n` +
                `${rewardText.join('\n')}\n\n` +
                `üîë –ö–ª—é—á: ${key.substring(0, 6)}...`,
                Markup.inlineKeyboard([
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
                ]).reply_markup
            );
        } else {
            await ctx.reply(
                `‚ùå **–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞**\n\n` +
                `üö´ ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n` +
                `üîë –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–ª—é—á –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`,
                Markup.inlineKeyboard([
                    [Markup.button.callback('üîë –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', 'activate_key')],
                    [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
                ]).reply_markup
            );
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞', error, { userId, key: key.substring(0, 10) });
        
        await ctx.reply(
            `‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞**\n\n` +
            `üö´ ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n` +
            `üîë –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`,
            Markup.inlineKeyboard([
                [Markup.button.callback('üîë –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑', 'activate_key')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]).reply_markup
        );
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
async function handleKeyCreation(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞', { userId, step: userStates.get(userId)?.currentStep });
    
    const userState = userStates.get(userId);
    if (!userState) return;
    
    switch (userState.currentStep) {
        case 'reward_amount':
            // –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–≥—Ä–∞–¥—ã
            await handleKeyRewardAmount(ctx, text);
            break;
            
        case 'max_uses':
            // –í–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
            await handleKeyMaxUses(ctx, text);
            break;
            
        default:
            await ctx.reply(
                '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞\n\n' +
                'üîô –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
                Markup.inlineKeyboard([
                    [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
                ]).reply_markup
            );
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞
async function handleKeyRewardAmount(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞', { userId, amount: text });
    
    const userState = userStates.get(userId);
    if (!userState) return;
    
    const numAmount = parseInt(text);
    if (isNaN(numAmount) || numAmount <= 0) {
        await ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!\n\n' +
            'üí∞ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
        );
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥—ã
    if (userState.data.rewardType === 'stars') {
        userState.data.stars = numAmount;
    } else {
        userState.data.coins = numAmount;
    }
    
    userState.currentStep = 'max_uses';
    
    const rewardTypeText = userState.data.rewardType === 'stars' ? '‚≠ê Stars' : 'ü™ô Magnum Coins';
    
    const message = `üîë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞**\n\n` +
        `üéØ –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: ${rewardTypeText}\n` +
        `üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${numAmount}\n\n` +
        `üîÑ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –∫–ª—é—á–∞:\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: 1, 5, 10`;
    
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'create_key')],
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –∫–ª—é—á–∞
async function handleKeyMaxUses(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–í–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è –∫–ª—é—á–∞', { userId, maxUses: text });
    
    const userState = userStates.get(userId);
    if (!userState) return;
    
    const numMaxUses = parseInt(text);
    if (isNaN(numMaxUses) || numMaxUses <= 0) {
        await ctx.reply(
            '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π!\n\n' +
            'üîÑ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑'
        );
        return;
    }
    
    userState.data.maxUses = numMaxUses;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á
    const { createKey } = require('../utils/keys');
    
    let reward;
    if (userState.data.rewardType === 'stars') {
        reward = { stars: userState.data.stars, coins: 0 };
    } else {
        reward = { stars: 0, coins: userState.data.coins };
    }
    
    const keyData = createKey(userState.data.rewardType, reward, numMaxUses);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(userId);
    
    const rewardTypeText = userState.data.rewardType === 'stars' ? '‚≠ê Stars' : 'ü™ô Magnum Coins';
    const rewardAmount = userState.data.rewardType === 'stars' ? userState.data.stars : userState.data.coins;
    
    const successMessage = `‚úÖ **–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n` +
        `üîë –ö–ª—é—á: \`${keyData.key}\`\n` +
        `üéØ –¢–∏–ø: ${rewardTypeText}\n` +
        `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${rewardAmount} ${rewardTypeText}\n` +
        `üîÑ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${numMaxUses}\n\n` +
        `üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`;
    
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–ª—é—á', 'create_key')],
        [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]);
    
    await ctx.reply(successMessage, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
async function handleTitleKeyCreation(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', { userId, step: userStates.get(userId)?.currentStep });
    
    const userState = userStates.get(userId);
    if (!userState) return;
    
    switch (userState.currentStep) {
        case 'description':
            // –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∫–ª—é—á–∞
            const description = text.trim();
            if (description.length === 0) {
                await ctx.reply(
                    '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n\n' +
                    'üí° –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞\n' +
                    '–ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n' +
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã.'
                );
                return;
            }
            
            logger.info('–û–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞ –≤–≤–µ–¥–µ–Ω–æ', { userId, description });
            userState.data.description = description;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Ç–∏—Ç—É–ª–∞
            try {
                logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', { userId, data: userState.data });
                
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
                const newKey = 'TITLE_' + Math.random().toString(36).substring(2, 8).toUpperCase();
                
                logger.info('–ö–ª—é—á —Ç–∏—Ç—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω', { userId, key: newKey, data: userState.data });
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                userStates.delete(userId);
                
                await ctx.reply(
                    `‚úÖ –ö–ª—é—á —Ç–∏—Ç—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
                    `üîë –ö–ª—é—á: ${newKey}\n` +
                    `üëë –¢–∏—Ç—É–ª: ${userState.data.titleId}\n` +
                    `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${userState.data.description}\n\n` +
                    `üéÅ –ù–∞–≥—Ä–∞–¥–∞:\n` +
                    `‚îú ‚≠ê Stars: ${userState.data.stars}\n` +
                    `‚îú ü™ô Magnum Coins: ${userState.data.coins}\n` +
                    `‚îî üëë –¢–∏—Ç—É–ª: ${userState.data.titleId}\n\n` +
                    `üí∞ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${userState.data.maxUses}`,
                    Markup.inlineKeyboard([
                        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
                    ]).reply_markup
                );
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', error, { userId, data: userState.data });
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                userStates.delete(userId);
                
                await ctx.reply(
                    `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞!\n\n` +
                    `üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
                    Markup.inlineKeyboard([
                        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
                    ]).reply_markup
                );
            }
            break;
            
        default:
            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞');
            break;
    }
}

module.exports = infoHandler;