const { Markup } = require('telegraf');
const logger = require('../utils/logger');

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function startHandler(ctx) {
    try {
        const userId = ctx.from.id;
        const username = ctx.from.username;
        
        logger.info('–ö–æ–º–∞–Ω–¥–∞ /start', { userId, username });
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userProfile = {
            userId: userId,
            username: username || 'Unknown',
            firstName: ctx.from.first_name || 'Unknown',
            lastName: ctx.from.last_name || '',
            joinDate: new Date(),
            stars: 0,
            coins: 0,
            level: 1,
            experience: 0
        };
        
        logger.debug('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω', { userId, profile: userProfile });
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Magnum Star Bot**!\n\n` +
            `üëã –ü—Ä–∏–≤–µ—Ç, ${userProfile.firstName}!\n\n` +
            `‚≠ê **Stars** –∏ ü™ô **Magnum Coins** –∂–¥—É—Ç —Ç–µ–±—è!\n\n` +
            `üöÄ –ù–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
        
        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        const mainMenu = Markup.inlineKeyboard([
            [Markup.button.callback('üí∞ –ú–∞–π–Ω–µ—Ä—ã', 'miners')],
            [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
            [Markup.button.callback('‚≠ê –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'withdraw')],
            [Markup.button.callback('üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á', 'activate_key')],
            [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')]
        ]);
        
        await ctx.reply(welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: mainMenu.reply_markup
        });
        
        logger.info('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', { userId });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start', error, { userId: ctx?.from?.id });
        throw error;
    }
}

module.exports = startHandler;