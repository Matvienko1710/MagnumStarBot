const { Markup } = require('telegraf');
const logger = require('../utils/logger');
const cacheManager = require('../utils/cache');
const { getUserBalance } = require('../utils/currency');
const { getReferralStats } = require('../utils/referral');
const { isAdmin } = require('../utils/admin');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π
const userStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function callbackHandler(ctx) {
    try {
        const userId = ctx.from.id;
        const callbackData = ctx.callbackQuery.data;
        
        logger.info('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å', { userId, callbackData });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback'–∏
        switch (callbackData) {
            case 'profile':
                await handleProfile(ctx);
                break;
                
            case 'miners':
                await handleMiners(ctx);
                break;
                
            case 'withdraw':
                await handleWithdraw(ctx);
                break;
                
            case 'activate_key':
                await handleActivateKey(ctx);
                break;
                
            case 'referrals':
                await handleReferrals(ctx);
                break;
                
            case 'main_menu':
                await handleMainMenu(ctx);
                break;
                
            case 'admin_panel':
                await handleAdminPanel(ctx);
                break;
                
            case 'create_key':
                await handleCreateKey(ctx);
                break;
                
            case 'create_title_key':
                await handleCreateTitleKey(ctx);
                break;
                
            case 'clear_cache':
                await handleClearCache(ctx);
                break;
                
            case 'cache_stats':
                await handleCacheStats(ctx);
                break;
                
            case 'titles':
                await handleTitles(ctx);
                break;
                
            case 'my_titles':
                await handleMyTitles(ctx);
                break;
                
            default:
                await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
                break;
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await ctx.answerCbQuery();
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback', error, { userId: ctx?.from?.id });
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function handleProfile(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', { userId });
    
    const profileMessage = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n` +
        `üÜî ID: \`${userId}\`\n` +
        `üë§ –ò–º—è: ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `‚≠ê Stars: 0\n` +
        `ü™ô Magnum Coins: 0\n` +
        `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date().toLocaleDateString('ru-RU')}\n\n` +
        `üéØ –£—Ä–æ–≤–µ–Ω—å: 1\n` +
        `üìä –û–ø—ã—Ç: 0/100`;
    
    const profileKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëë –¢–∏—Ç—É–ª—ã', 'titles')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.reply(profileMessage, {
        parse_mode: 'Markdown',
        reply_markup: profileKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤
async function handleMiners(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤', { userId });
    
    const minersMessage = `‚õèÔ∏è **–ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
        `üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–π–Ω–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n` +
        `üÜï **–ù–æ–≤–∏—á–æ–∫**\n` +
        `‚îú üí∞ –¶–µ–Ω–∞: 100 ü™ô Magnum Coins\n` +
        `‚îú ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: 0.25 ü™ô/–º–∏–Ω\n` +
        `‚îú üéØ –†–µ–¥–∫–æ—Å—Ç—å: –û–±—ã—á–Ω—ã–π\n` +
        `‚îî üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: 100 —à—Ç\n\n` +
        `‚≠ê **–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º**\n` +
        `‚îú üí∞ –¶–µ–Ω–∞: 100 ‚≠ê Stars\n` +
        `‚îú ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: 0.01 ‚≠ê/–º–∏–Ω\n` +
        `‚îú üéØ –†–µ–¥–∫–æ—Å—Ç—å: –†–µ–¥–∫–∏–π\n` +
        `‚îî üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: 100 —à—Ç`;
    
    const minersKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üÜï –ö—É–ø–∏—Ç—å –ù–æ–≤–∏—á–æ–∫', 'buy_miner_novice')],
        [Markup.button.callback('‚≠ê –ö—É–ø–∏—Ç—å –ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º', 'buy_miner_star_path')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.reply(minersMessage, {
        parse_mode: 'Markdown',
        reply_markup: minersKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥
async function handleWithdraw(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥', { userId });
    
    const withdrawMessage = `‚≠ê **–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥**\n\n` +
        `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 0 ‚≠ê Stars\n\n` +
        `üí≥ –î–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n` +
        `üìß Email: admin@magnumstar.com\n` +
        `üí¨ Telegram: @admin`;
    
    const withdrawKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.reply(withdrawMessage, {
        parse_mode: 'Markdown',
        reply_markup: withdrawKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
async function handleActivateKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    userStates.set(userId, {
        state: 'waiting_for_key',
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'waiting_for_key' });
    
    const activateMessage = `üîë **–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞**\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n` +
        `üí° –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n` +
        `‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ`;
    
    const activateKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'main_menu')]
    ]);
    
    await ctx.reply(activateMessage, {
        parse_mode: 'Markdown',
        reply_markup: activateKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function handleReferrals(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', { userId });
    
    const referralsMessage = `üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n` +
        `üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n` +
        `\`https://t.me/MagnumStarBot?start=${userId}\`\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `‚îú üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 0\n` +
        `‚îú ‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0\n` +
        `‚îî üéØ –£—Ä–æ–≤–µ–Ω—å: 1\n\n` +
        `üí∞ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n` +
        `‚îú ü•á 1 —É—Ä–æ–≤–µ–Ω—å: +5 ‚≠ê Stars\n` +
        `‚îú ü•à 2 —É—Ä–æ–≤–µ–Ω—å: +3 ‚≠ê Stars\n` +
        `‚îî ü•â 3 —É—Ä–æ–≤–µ–Ω—å: +1 ‚≠ê Stars`;
    
    const referralsKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')],
        [Markup.button.callback('üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'top_referrers')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.reply(referralsMessage, {
        parse_mode: 'Markdown',
        reply_markup: referralsKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function handleMainMenu(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é', { userId });
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userBalance = getUserBalance(userId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const referralStats = getReferralStats(userId);
    
    const mainMenuMessage = `üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!**\n` +
        `üíé –¢–≤–æ–π –ø—É—Ç—å –∫ –Ω–∞–≥—Ä–∞–¥–∞–º —É–∂–µ –Ω–∞—á–∞–ª—Å—è!\n\n` +
        `üéÆ –ò–≥—Ä–∞–π –≤ Magnum Stars, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π Magnum Coins, –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ ‚≠ê –∏ –≤—ã–≤–æ–¥–∏ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ!\n\n` +
        `üë§ **–ü—Ä–æ—Ñ–∏–ª—å**\n` +
        `‚îú ID: \`${userId}\`\n` +
        `‚îî –ò–º—è: ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
        `üíé **–ë–∞–ª–∞–Ω—Å**\n` +
        `‚îú ‚≠ê Stars: ${userBalance.stars}\n` +
        `‚îî ü™ô Magnum Coins: ${userBalance.coins}\n\n` +
        `üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n` +
        `‚îú –î—Ä—É–∑–µ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralStats.totalReferrals}\n` +
        `‚îî –î–æ—Ö–æ–¥: ${referralStats.totalEarned.stars} ‚≠ê\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –¥–∞–ª—å—à–µ üöÄ`;
    
    const mainMenuKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üí∞ –ú–∞–π–Ω–µ—Ä—ã', 'miners')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('‚≠ê –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'withdraw')],
        [Markup.button.callback('üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á', 'activate_key')],
        [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')],
        [Markup.button.webApp('üåê WebApp', 'https://magnumstarbot.onrender.com')],
        [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]);
    
    await ctx.reply(mainMenuMessage, {
        parse_mode: 'Markdown',
        reply_markup: mainMenuKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async function handleAdminPanel(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        return;
    }
    
    const adminMessage = `‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n` +
        `üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:\n\n` +
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 0 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: 0 ‚≠ê Stars, 0 ü™ô Coins\n` +
        `üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: 0\n\n` +
        `üßπ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º:**\n` +
        `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∞\n` +
        `üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞`;
    
    const adminKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á', 'create_key')],
        [Markup.button.callback('üëë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á —Ç–∏—Ç—É–ª–∞', 'create_title_key')],
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞', 'cache_stats')],
        [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', 'clear_cache')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.reply(adminMessage, {
        parse_mode: 'Markdown',
        reply_markup: adminKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
async function handleCreateKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    userStates.set(userId, {
        state: 'creating_key',
        currentStep: 'description',
        data: {
            stars: 50,
            coins: 25,
            maxUses: 1
        },
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'creating_key' });
    
    const createKeyMessage = `üîë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞**\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞:\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ`;
    
    const createKeyKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.reply(createKeyMessage, {
        parse_mode: 'Markdown',
        reply_markup: createKeyKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
async function handleCreateTitleKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
    userStates.set(userId, {
        state: 'creating_title_key',
        currentStep: 'description',
        data: {
            titleId: 'novice',
            stars: 50,
            coins: 25,
            maxUses: 1
        },
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'creating_title_key' });
    
    const createTitleKeyMessage = `üëë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞**\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞:\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: –ö–ª—é—á —Ç–∏—Ç—É–ª–∞ "–ù–æ–≤–∏—á–æ–∫" –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ`;
    
    const createTitleKeyKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.reply(createTitleKeyMessage, {
        parse_mode: 'Markdown',
        reply_markup: createTitleKeyKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
async function handleClearCache(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
        return;
    }
    
    const beforeStats = cacheManager.getStats();
    cacheManager.clear();
    const afterStats = cacheManager.getStats();
    
    const clearMessage = `üóëÔ∏è **–ö—ç—à –æ—á–∏—â–µ–Ω**\n\n` +
        `üìä **–î–æ –æ—á–∏—Å—Ç–∫–∏:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä: ${beforeStats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${beforeStats.hits}\n` +
        `‚îî ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${beforeStats.misses}\n\n` +
        `üìä **–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä: ${afterStats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${afterStats.hits}\n` +
        `‚îî ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${afterStats.misses}\n\n` +
        `üßπ **–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏:** ${beforeStats.totalSize - afterStats.totalSize} –ú–ë`;
    
    const clearKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞', 'cache_stats')],
        [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]);
    
    await ctx.reply(clearMessage, {
        parse_mode: 'Markdown',
        reply_markup: clearKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
async function handleCacheStats(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
        return;
    }
    
    const stats = cacheManager.getStats();
    const memUsage = process.memoryUsage();
    
    const statsMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞**\n\n` +
        `üíæ **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${stats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${stats.hits}\n` +
        `‚îú ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${stats.misses}\n` +
        `‚îî üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏—è: ${stats.evictions}\n\n` +
        `üß† **–ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞:**\n` +
        `‚îú üíæ Heap Used: ${Math.round(memUsage.heapUsed / 1024 / 1024 * 100) / 100} –ú–ë\n` +
        `‚îú üìä Heap Total: ${Math.round(memUsage.heapTotal / 1024 / 1024 * 100) / 100} –ú–ë\n` +
        `‚îî üîÑ RSS: ${Math.round(memUsage.rss / 1024 / 1024 * 100) / 100} –ú–ë\n\n` +
        `üìã **–î–µ—Ç–∞–ª–∏ –ø–æ –∫—ç—à–∞–º:**\n` +
        Object.entries(stats.caches).map(([name, cache]) => 
            `‚îú ${name}: ${cache.size}/${cache.maxSize} (TTL: ${Math.round(cache.ttl / 1000)}—Å)`
        ).join('\n');
    
    const statsKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', 'clear_cache')],
        [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]);
    
    await ctx.reply(statsMessage, {
        parse_mode: 'Markdown',
        reply_markup: statsKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏—Ç—É–ª–æ–≤
async function handleTitles(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏—Ç—É–ª–æ–≤', { userId });
    
    const titlesMessage = `üëë **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã**\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n` +
        `üÜï **–ù–æ–≤–∏—á–æ–∫**\n` +
        `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 1\n` +
        `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
        `üëë **–í–ª–∞–¥–µ–ª–µ—Ü**\n` +
        `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–∏—Ç—É–ª –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞\n` +
        `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 10\n` +
        `‚îî üîí –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`;
    
    const titlesKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –ú–æ–∏ —Ç–∏—Ç—É–ª—ã', 'my_titles')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.reply(titlesMessage, {
        parse_mode: 'Markdown',
        reply_markup: titlesKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∏—Ö —Ç–∏—Ç—É–ª–æ–≤
async function handleMyTitles(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∏—Ö —Ç–∏—Ç—É–ª–æ–≤', { userId });
    
    const myTitlesMessage = `üëë **–ú–æ–∏ —Ç–∏—Ç—É–ª—ã**\n\n` +
        `üéØ –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª:\n\n` +
        `üÜï **–ù–æ–≤–∏—á–æ–∫**\n` +
        `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 1\n` +
        `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n` +
        `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤:**\n` +
        `‚îú üéØ –í—Å–µ–≥–æ —Ç–∏—Ç—É–ª–æ–≤: 1\n` +
        `‚îú ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 1\n` +
        `‚îî üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 1`;
    
    const myTitlesKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëë –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã', 'titles')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.reply(myTitlesMessage, {
        parse_mode: 'Markdown',
        reply_markup: myTitlesKeyboard.reply_markup
    });
}

module.exports = callbackHandler;