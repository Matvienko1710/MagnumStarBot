const { Markup } = require('telegraf');
const { inlineKeyboard, inlineKeyboardWithBack, adminPanelKeyboard, createKeyKeyboard, createTitleKeyKeyboard, minersKeyboard, buyMinerKeyboard, titlesKeyboard, changeTitleKeyboard, profileKeyboard, withdrawKeyboard, referralsKeyboard } = require('../keyboards/inline');
const { generateUserProfile } = require('../utils/profile');
const { getUserBalance, getUserStats, getTransactionHistory, addStars, addCoins } = require('../utils/currency');
const { isAdmin, getAdminStats, getBotStats } = require('../utils/admin');
const { activateKey, getUserKeyHistory, createKey, getKeysStats } = require('../utils/keys');
const { getUserMiners, getAvailableRewards, buyMiner, collectRewards, getMinersStats, getMinerTypes, getMinerType } = require('../utils/miners');
const { getUserCurrentTitle, getUserUnlockedTitles, setUserTitle, getUserTitlesStats, getAllTitles, getFormattedTitle, getTitleById } = require('../utils/titles');
const { getReferralStats, getLevelInfo, getNextLevel, getUserReferralCode, getUserReferrals, getTopReferrers } = require('../utils/referral');
const logger = require('../utils/logger');

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
const userStates = new Map();

module.exports = (bot, safeAsync) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', safeAsync(async (ctx) => {
    const callbackData = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    const adminStatus = isAdmin(userId);
    
    logger.info('Callback query –ø–æ–ª—É—á–µ–Ω', { 
      userId, 
      callbackData, 
      adminStatus,
      username: ctx.from.username,
      firstName: ctx.from.first_name
    });
    
    switch (callbackData) {
      case 'profile':
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: profile', { userId });
        await ctx.answerCbQuery();
        const user = ctx.from;
        const userName = user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤–∞–ª—é—Ç—ã
        const balance = getUserBalance(userId);
        const currencyStats = getUserStats(userId);
                 const keyHistory = getUserKeyHistory(userId);
         
         const userCurrentTitle = getUserCurrentTitle(userId);
         const referralStats = getReferralStats(userId);
         const levelInfo = getLevelInfo(referralStats.level);
         const nextLevel = getNextLevel(referralStats.level);
         
         const profileMessage = `üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
 
       üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
       ‚îú ID: ${userId}
       ‚îú –ò–º—è: ${userName}
       ‚îú Username: ${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}
       ‚îú –¢–∏—Ç—É–ª: ${getFormattedTitle(userCurrentTitle)}
       ‚îî –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date().toLocaleDateString('ru-RU')}
 
       üíé –ë–∞–ª–∞–Ω—Å
       ‚îú ‚≠ê Stars: ${balance.stars}
       ‚îî ü™ô Magnum Coins: ${balance.coins}
 
       üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
       ‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralStats.referralCode}
       ‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã: ${referralStats.totalReferrals}
       ‚îú –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ${referralStats.activeReferrals}
               ‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referralStats.totalEarned.stars} ‚≠ê
       ‚îú –£—Ä–æ–≤–µ–Ω—å: ${levelInfo.name} (${referralStats.level})
       ‚îî ${nextLevel ? `–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${nextLevel.requirement - referralStats.totalEarned.stars} ‚≠ê` : '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!'}
       
       üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
       ‚îú –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${currencyStats.totalTransactions}
       ‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ Stars: ${currencyStats.totalEarned.stars}
       ‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ Coins: ${currencyStats.totalEarned.coins}
       ‚îú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–ª—é—á–µ–π: ${keyHistory.length}
       ‚îî –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: –°–µ–≥–æ–¥–Ω—è`;
        
        await ctx.editMessageText(profileMessage, profileKeyboard(adminStatus));
        break;
      
      case 'titles':
        await ctx.answerCbQuery();
        const titlesStats = getUserTitlesStats(userId);
        
        const titlesMessage = `üëë –¢–∏—Ç—É–ª—ã:

üìä –í–∞—à–∏ —Ç–∏—Ç—É–ª—ã
‚îú –¢–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª: ${getFormattedTitle(titlesStats.currentTitle)}
‚îú –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${titlesStats.totalUnlocked}/${titlesStats.totalAvailable}
‚îî –í—Å–µ–≥–æ —Ç–∏—Ç—É–ª–æ–≤: ${titlesStats.unlockedTitles.length}

${titlesStats.unlockedTitles.length > 0 ? 
  `üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:
${titlesStats.unlockedTitles.map(title => 
  `‚îú ${getFormattedTitle(title)}
  ‚îÇ  ‚îî ${title.description}`
).join('\n')}` : 
  '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏—Ç—É–ª–æ–≤!'}`;
        
        await ctx.editMessageText(titlesMessage, titlesKeyboard());
        break;
      
      case 'change_title':
        await ctx.answerCbQuery();
        const unlockedTitles = getUserUnlockedTitles(userId);
        const currentTitle = getUserCurrentTitle(userId);
        
        if (unlockedTitles.length === 0) {
          await ctx.editMessageText(
            '‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤!\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏—Ç—É–ª–æ–≤.',
            titlesKeyboard()
          );
          return;
        }
        
        const changeTitleMessage = `üëë –°–º–µ–Ω–∞ —Ç–∏—Ç—É–ª–∞:

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:

${unlockedTitles.map(title => 
  `üî∏ ${getFormattedTitle(title)}
  ‚îî ${title.description}`
).join('\n\n')}`;
        
        await ctx.editMessageText(changeTitleMessage, changeTitleKeyboard(unlockedTitles, currentTitle.id));
        break;
      
      case 'my_titles':
        await ctx.answerCbQuery();
        const myTitlesStats = getUserTitlesStats(userId);
        
        const myTitlesMessage = `üìä –ú–æ–∏ —Ç–∏—Ç—É–ª—ã:

${myTitlesStats.unlockedTitles.length > 0 ? 
  myTitlesStats.unlockedTitles.map(title => 
    `üëë ${getFormattedTitle(title)}
‚îú –û–ø–∏—Å–∞–Ω–∏–µ: ${title.description}
‚îú –†–µ–¥–∫–æ—Å—Ç—å: ${title.rarity === 'common' ? '–û–±—ã—á–Ω—ã–π' : '–†–µ–¥–∫–∏–π'}
‚îî ${title.id === myTitlesStats.currentTitle.id ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`
  ).join('\n\n') : 
  '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏—Ç—É–ª–æ–≤!'}`;
        
        await ctx.editMessageText(myTitlesMessage, titlesKeyboard());
        break;
      
      case 'activate_key':
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: activate_key', { userId });
        await ctx.answerCbQuery();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–ª—é—á–∞
        const keyState = { state: 'waiting_for_key', timestamp: Date.now() };
        userStates.set(userId, keyState);
        logger.userState(userId, 'waiting_for_key', keyState);
        
        await ctx.editMessageText(
          'üîë –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞:\n\n' +
          '–í–≤–µ–¥–∏—Ç–µ 12-–∑–Ω–∞—á–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n' +
          'üìù –§–æ—Ä–º–∞—Ç: XXXXXXXXXXXX\n' +
          'üí° –ü—Ä–∏–º–µ—Ä: ABC123DEF456\n\n' +
          '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back')]
          ])
        );
        break;
      
      case 'admin_panel':
        if (!adminStatus) {
          await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          return;
        }
        
        await ctx.answerCbQuery();
        const adminStats = getAdminStats();
        const botStats = getBotStats();
        
        const adminMessage = `üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:

üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
‚îú –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤: ${adminStats.totalAdmins}
‚îú ID –∞–¥–º–∏–Ω–æ–≤: ${adminStats.adminIds.join(', ') || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}
‚îî –í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
‚îú –í–µ—Ä—Å–∏—è: ${adminStats.botInfo.version}
‚îú –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(adminStats.botInfo.uptime / 60)} –º–∏–Ω
‚îú –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${adminStats.botInfo.platform}
‚îî –ü–∞–º—è—Ç—å: ${Math.round(adminStats.botInfo.memory.heapUsed / 1024 / 1024)} MB

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.totalUsers}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.activeUsers}
‚îú –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${botStats.totalTransactions}
‚îî –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date(botStats.serverTime).toLocaleString('ru-RU')}`;
        
        await ctx.editMessageText(adminMessage, adminPanelKeyboard());
        break;
      
      case 'create_key':
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: create_key', { userId, adminStatus });
        if (!adminStatus) {
          logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ create_key –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', { userId });
          await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          return;
        }
        
        await ctx.answerCbQuery();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
        const createKeyState = { 
          state: 'creating_key', 
          step: 'stars',
          data: {},
          timestamp: Date.now() 
        };
        userStates.set(userId, createKeyState);
        logger.userState(userId, 'creating_key', createKeyState);
        
        await ctx.editMessageText(
          'üîë –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:\n\n' +
          '–®–∞–≥ 1/4: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Stars –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã\n\n' +
          'üí° –ü—Ä–∏–º–µ—Ä: 50\n' +
          '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'admin_panel')]
          ])
        );
        break;
      
      case 'keys_stats':
        if (!adminStatus) {
          await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          return;
        }
        
        await ctx.answerCbQuery();
        const keysStats = getKeysStats();
        
        const keysStatsMessage = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π:

üîë –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚îú –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${keysStats.totalKeys}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: ${keysStats.activeKeys}
‚îî –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${keysStats.totalUses}

üìã –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:
${keysStats.keys.map(key => 
  `‚îú ${key.key} (${key.isActive ? '‚úÖ' : '‚ùå'})
  ‚îÇ  ‚îú –ù–∞–≥—Ä–∞–¥–∞: ${key.reward.stars}‚≠ê ${key.reward.coins}ü™ô
  ‚îÇ  ‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: ${key.currentUses}/${key.maxUses}
  ‚îÇ  ‚îî –û–ø–∏—Å–∞–Ω–∏–µ: ${key.description}`
).join('\n')}`;
        
        await ctx.editMessageText(keysStatsMessage, adminPanelKeyboard());
        break;
      
      case 'create_title_key':
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: create_title_key', { userId, adminStatus });
        if (!adminStatus) {
          logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ create_title_key –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', { userId });
          await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
          return;
        }
        
        await ctx.answerCbQuery();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
        const createTitleKeyState = { 
          state: 'creating_title_key', 
          step: 'title',
          data: {},
          timestamp: Date.now() 
        };
        userStates.set(userId, createTitleKeyState);
        logger.userState(userId, 'creating_title_key', createTitleKeyState);
        
        const allTitles = getAllTitles();
        const titleOptions = allTitles.map(title => 
          `${title.color} ${title.name} (${title.id})`
        ).join('\n');
        
        await ctx.editMessageText(
          'üëë –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞:\n\n' +
          '–®–∞–≥ 1/4: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã\n\n' +
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã:\n' +
          titleOptions + '\n\n' +
          'üí° –í–≤–µ–¥–∏—Ç–µ ID —Ç–∏—Ç—É–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: owner)\n' +
          '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
          createTitleKeyKeyboard()
        );
        break;
      
      // WebApp –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
      // case 'webapp':
      //   if (!adminStatus) {
      //     await ctx.answerCbQuery('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      //     return;
      //   }
      //   
      //   await ctx.answerCbQuery();
      //   await ctx.editMessageText(
      //     'üåê WebApp - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n\n' +
      //     'üì± –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n' +
      //     'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
      //     'üéÆ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n' +
      //     'üí¨ –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n' +
      //     '–û—Ç–∫—Ä—ã–≤–∞–µ–º WebApp...',
      //     inlineKeyboardWithBack(adminStatus)
      //   );
      //   break;
      
      case 'back':
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: back', { userId });
        await ctx.answerCbQuery();
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const previousState = userStates.get(userId);
        userStates.delete(userId);
        logger.userState(userId, 'deleted', previousState);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∫ –≥–ª–∞–≤–Ω–æ–º—É)
        const welcomeMessage = generateUserProfile(ctx.from);
        await ctx.editMessageText(welcomeMessage, inlineKeyboard(adminStatus));
        logger.info('–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { userId });
        break;
      
      case 'miners':
        await ctx.answerCbQuery();
        const minersStats = getMinersStats(userId);
        const availableRewards = getAvailableRewards(userId);
        
        const minersMessage = `‚õèÔ∏è –ú–∞–π–Ω–µ—Ä—ã:

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚îú –í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤: ${minersStats.totalMiners}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤: ${minersStats.activeMiners}
‚îú –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–≥—Ä–∞–¥: ${availableRewards.stars > 0 ? `${availableRewards.stars} ‚≠ê` : ''} ${availableRewards.coins > 0 ? `${availableRewards.coins} ü™ô` : ''}
‚îî –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${minersStats.totalEarned.stars} ‚≠ê ${minersStats.totalEarned.coins} ü™ô

${minersStats.miners.length > 0 ? 
  `üìã –í–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã:
${minersStats.miners.map(miner => {
  const { getRarityInfo } = require('../utils/miners');
  const rarityInfo = getRarityInfo(miner.rarity);
  const rewardSymbol = miner.rewardType === 'stars' ? '‚≠ê' : 'ü™ô';
  return `‚îú ${rarityInfo.color} ${miner.name} (${rarityInfo.name})
  ‚îÇ  ‚îú –î–æ—Ö–æ–¥/–º–∏–Ω: ${miner.rewardPerMinute} ${rewardSymbol}
  ‚îÇ  ‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${miner.totalEarned}/${miner.maxReward} ${rewardSymbol}
  ‚îÇ  ‚îî –û—Å—Ç–∞–ª–æ—Å—å: ${miner.remainingReward} ${rewardSymbol}`;
}).join('\n')}` : 
  '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤\nüí° –ö—É–ø–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞–π–Ω–µ—Ä!'}`;
        
        await ctx.editMessageText(minersMessage, minersKeyboard());
        break;
      
      case 'buy_miner':
        await ctx.answerCbQuery();
        const { getMinerByPage } = require('../utils/miners');
        const firstMiner = getMinerByPage(1);
        
        const buyMinerMessage = `‚õèÔ∏è –ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–µ—Ä–∞:

${firstMiner.rarityInfo.color} **${firstMiner.name}** (${firstMiner.rarityInfo.name})

üí∞ **–¶–µ–Ω–∞:** ${firstMiner.price} ${firstMiner.priceSymbol}
‚ö° **–î–æ—Ö–æ–¥/–º–∏–Ω:** ${firstMiner.rewardPerMinute} ${firstMiner.rewardSymbol}
üìà **–ú–∞–∫—Å–∏–º—É–º:** ${firstMiner.maxReward} ${firstMiner.rewardSymbol}
üéØ **–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** ${firstMiner.availableOnServer} —à—Ç
üìù **${firstMiner.description}**

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–∞–π–Ω–µ—Ä–æ–≤!`;
        
        await ctx.editMessageText(buyMinerMessage, buyMinerKeyboard(1));
        break;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–∞–π–Ω–µ—Ä–æ–≤
      case (() => {
        const match = callbackData.match(/^miner_page_(\d+)$/);
        return match ? match[1] : null;
      })():
        if (callbackData.startsWith('miner_page_')) {
          await ctx.answerCbQuery();
          const page = parseInt(callbackData.replace('miner_page_', ''));
          const { getMinerByPage } = require('../utils/miners');
          const miner = getMinerByPage(page);
          
          if (!miner) {
            await ctx.editMessageText(
              '‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!',
              buyMinerKeyboard(1)
            );
            return;
          }
          
          const minerMessage = `‚õèÔ∏è –ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–µ—Ä–∞:

${miner.rarityInfo.color} **${miner.name}** (${miner.rarityInfo.name})

üí∞ **–¶–µ–Ω–∞:** ${miner.price} ${miner.priceSymbol}
‚ö° **–î–æ—Ö–æ–¥/–º–∏–Ω:** ${miner.rewardPerMinute} ${miner.rewardSymbol}
üìà **–ú–∞–∫—Å–∏–º—É–º:** ${miner.maxReward} ${miner.rewardSymbol}
üéØ **–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** ${miner.availableOnServer} —à—Ç
üìù **${miner.description}**

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–∞–π–Ω–µ—Ä–æ–≤!`;
          
          await ctx.editMessageText(minerMessage, buyMinerKeyboard(page));
        }
        break;
      
      case 'miner_info':
        await ctx.answerCbQuery();
        const { getMinerTypes } = require('../utils/miners');
        const allMinerTypes = getMinerTypes();
        
        const infoMessage = `üìã **–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã:**

${allMinerTypes.map((type, index) => {
  const { getRarityInfo } = require('../utils/miners');
  const rarityInfo = getRarityInfo(type.rarity);
  const priceSymbol = type.priceType === 'stars' ? '‚≠ê' : 'ü™ô';
  const rewardSymbol = type.rewardType === 'stars' ? '‚≠ê' : 'ü™ô';
  return `${index + 1}. ${rarityInfo.color} **${type.name}** (${rarityInfo.name})
   ‚îú üí∞ –¶–µ–Ω–∞: ${type.price} ${priceSymbol}
   ‚îú ‚ö° –î–æ—Ö–æ–¥/–º–∏–Ω: ${type.rewardPerMinute} ${rewardSymbol}
   ‚îú üìà –ú–∞–∫—Å–∏–º—É–º: ${type.maxReward} ${rewardSymbol}
   ‚îú üéØ –î–æ—Å—Ç—É–ø–Ω–æ: ${type.availableOnServer} —à—Ç
   ‚îî üìù ${type.description}`;
}).join('\n\n')}

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ!`;
        
        await ctx.editMessageText(infoMessage, buyMinerKeyboard(1));
        break;
      
      case 'buy_novice_miner':
        await ctx.answerCbQuery();
        try {
          const result = buyMiner(userId, 'NOVICE');
          const { getRarityInfo } = require('../utils/miners');
          const rarityInfo = getRarityInfo(result.miner.rarity);
          const priceSymbol = result.priceType === 'stars' ? '‚≠ê' : 'ü™ô';
          
          await ctx.editMessageText(
            `‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!

‚õèÔ∏è ${rarityInfo.color} ${result.miner.name} (${rarityInfo.name})
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result.price} ${priceSymbol}
üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${new Date(result.miner.purchaseDate).toLocaleString('ru-RU')}

üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance.stars} ‚≠ê ${result.newBalance.coins} ü™ô`,
            minersKeyboard()
          );
        } catch (error) {
          await ctx.editMessageText(
            `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞!

üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
            minersKeyboard()
          );
        }
        break;
      
      case 'buy_star_path_miner':
        await ctx.answerCbQuery();
        try {
          const result = buyMiner(userId, 'STAR_PATH');
          const { getRarityInfo } = require('../utils/miners');
          const rarityInfo = getRarityInfo(result.miner.rarity);
          const priceSymbol = result.priceType === 'stars' ? '‚≠ê' : 'ü™ô';
          
          await ctx.editMessageText(
            `‚úÖ –ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!

‚õèÔ∏è ${rarityInfo.color} ${result.miner.name} (${rarityInfo.name})
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result.price} ${priceSymbol}
üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${new Date(result.miner.purchaseDate).toLocaleString('ru-RU')}

üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance.stars} ‚≠ê ${result.newBalance.coins} ü™ô`,
            minersKeyboard()
          );
        } catch (error) {
          await ctx.editMessageText(
            `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞!

üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
            minersKeyboard()
          );
        }
        break;
      
            case 'my_miners':
        await ctx.answerCbQuery();
        const myMinersStats = getMinersStats(userId);
        
        const myMinersMessage = `üìä –ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã:

${myMinersStats.miners.length > 0 ? 
  myMinersStats.miners.map(miner => {
    const { getRarityInfo } = require('../utils/miners');
    const rarityInfo = getRarityInfo(miner.rarity);
    const rewardSymbol = miner.rewardType === 'stars' ? '‚≠ê' : 'ü™ô';
    return `‚õèÔ∏è ${rarityInfo.color} ${miner.name} (${rarityInfo.name})
 ‚îú üÜî ID: ${miner.id}
 ‚îú üìÖ –ö—É–ø–ª–µ–Ω: ${new Date(miner.purchaseDate).toLocaleDateString('ru-RU')}
 ‚îú ‚ö° –î–æ—Ö–æ–¥/–º–∏–Ω: ${miner.rewardPerMinute} ${rewardSymbol}
 ‚îú üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${miner.totalEarned}/${miner.maxReward} ${rewardSymbol}
 ‚îú üìà –û—Å—Ç–∞–ª–æ—Å—å: ${miner.remainingReward} ${rewardSymbol}
 ‚îî ${miner.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`;
  }).join('\n\n') : 
  '‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤\nüí° –ö—É–ø–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞–π–Ω–µ—Ä!'}`;
        
        await ctx.editMessageText(myMinersMessage, minersKeyboard());
        break;
      
      case 'collect_rewards':
        await ctx.answerCbQuery();
        try {
          const result = collectRewards(userId);
          let collectedText = '';
          if (result.collected.stars > 0) {
            collectedText += `‚≠ê Stars: ${result.collected.stars}\n`;
          }
          if (result.collected.coins > 0) {
            collectedText += `ü™ô Magnum Coins: ${result.collected.coins}\n`;
          }
          
          await ctx.editMessageText(
            `üí∞ –ù–∞–≥—Ä–∞–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã!

üéÅ –°–æ–±—Ä–∞–Ω–æ:
${collectedText}
üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result.newBalance.stars} ‚≠ê ${result.newBalance.coins} ü™ô

‚è∞ –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É`,
            minersKeyboard()
          );
        } catch (error) {
          await ctx.editMessageText(
            `‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –Ω–∞–≥—Ä–∞–¥!

üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
            minersKeyboard()
          );
        }
        break;
      
      case 'set_title_novice':
      case 'set_title_owner':
        await ctx.answerCbQuery();
        const titleId = callbackData.replace('set_title_', '');
        
        try {
          const result = setUserTitle(userId, titleId);
          await ctx.editMessageText(
            `‚úÖ –¢–∏—Ç—É–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!

üëë ${getFormattedTitle(result.oldTitle)} ‚Üí ${getFormattedTitle(result.newTitle)}

–¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å –Ω–æ–≤—ã–º —Ç–∏—Ç—É–ª–æ–º!`,
            titlesKeyboard()
          );
        } catch (error) {
          await ctx.editMessageText(
            `‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ç–∏—Ç—É–ª–∞!

üîç –ü—Ä–∏—á–∏–Ω–∞: ${error.message}`,
            titlesKeyboard()
          );
        }
        break;
      
      case 'withdraw_stars':
        await ctx.answerCbQuery();
        const userBalance = getUserBalance(userId);
        
        const withdrawMessage = `üí∞ –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥:

üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance.stars} ‚≠ê

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞:

üí≥ –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É - –≤—ã–≤–µ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
üí∞ –í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ - –≤—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
üìä –ò—Å—Ç–æ—Ä–∏—è - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤

‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 10 ‚≠ê`;
        
        await ctx.editMessageText(withdrawMessage, withdrawKeyboard());
        break;
      
      case 'withdraw_all_stars':
        await ctx.answerCbQuery();
        const allBalance = getUserBalance(userId);
        
        if (allBalance.stars < 10) {
          await ctx.editMessageText(
            '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞!\n\n' +
            '‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 10 ‚≠ê\n' +
            `üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${allBalance.stars} ‚≠ê`,
            withdrawKeyboard()
          );
          return;
        }
        
        await ctx.editMessageText(
          `üí∞ –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–≤–µ–∑–¥:

üíé –°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: ${allBalance.stars} ‚≠ê
üí≥ –°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è

‚ö†Ô∏è –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"`,
          withdrawKeyboard()
        );
        break;
      
      case 'withdraw_custom_amount':
        await ctx.answerCbQuery();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        userStates.set(userId, { state: 'waiting_for_withdraw_amount', timestamp: Date.now() });
        
        await ctx.editMessageText(
          'üí∞ –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥:\n\n' +
          '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:\n\n' +
          'üí° –ü—Ä–∏–º–µ—Ä: 100\n' +
          '‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 ‚≠ê\n' +
          '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω–∞"',
          Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'withdraw_stars')]
          ])
        );
        break;
      
      case 'withdraw_history':
        await ctx.answerCbQuery();
        
        const historyMessage = `üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–≤–æ–¥–æ–≤:

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–≤–æ–¥–æ–≤.

üí° –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö.`;
        
        await ctx.editMessageText(historyMessage, withdrawKeyboard());
        break;
      
      case 'referrals':
        await ctx.answerCbQuery();
        const userReferralStats = getReferralStats(userId);
        const userLevelInfo = getLevelInfo(userReferralStats.level);
        
                 const referralsMessage = `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${userReferralStats.referralCode}
‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${userReferralStats.totalReferrals}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${userReferralStats.activeReferrals}
        ‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${userReferralStats.totalEarned.stars} ‚≠ê
        ‚îî –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${userLevelInfo.name} (${userReferralStats.level})

üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!`;
        
        await ctx.editMessageText(referralsMessage, referralsKeyboard());
        break;
      
      case 'my_referral_code':
        await ctx.answerCbQuery();
        const userReferralCode = getUserReferralCode(userId);
        
                 const referralCodeMessage = `üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:

üìù –ö–æ–¥: \`${userReferralCode}\`

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–∑—å—è–º
‚Ä¢ –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å "—Ä–µ—Ñ–µ—Ä–∞–ª ${userReferralCode}"
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

üí∞ –ù–∞–≥—Ä–∞–¥—ã (—Ç–æ–ª—å–∫–æ Stars):
‚Ä¢ –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: 50 ‚≠ê
‚Ä¢ –ó–∞ –ø–æ–∫—É–ø–∫—É –º–∞–π–Ω–µ—Ä–∞: 10 ‚≠ê
‚Ä¢ –ó–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–ª—é—á–∞: 5 ‚≠ê
‚Ä¢ –ó–∞ —Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥: 3 ‚≠ê

üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º: \`${userReferralCode}\``;
        
        await ctx.editMessageText(referralCodeMessage, referralsKeyboard());
        break;
      
      case 'my_referrals':
        await ctx.answerCbQuery();
        const userReferrals = getUserReferrals(userId);
        
        if (userReferrals.length === 0) {
          await ctx.editMessageText(
            'üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n\n' +
            'üí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥, ' +
            '–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ.',
            referralsKeyboard()
          );
          return;
        }
        
                                   const myReferralsMessage = `üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:

        üìä –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${userReferrals.length}

        ${userReferrals.map((ref, index) => 
          `${index + 1}. ID: ${ref.userId}
           ‚îú –£—Ä–æ–≤–µ–Ω—å: ${ref.level}
           ‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${ref.totalEarned.stars} ‚≠ê
           ‚îî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${ref.joinedAt.toLocaleDateString('ru-RU')}`
        ).join('\n\n')}

        üí∞ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: ${getReferralStats(userId).totalEarned.stars} ‚≠ê`;
        
        await ctx.editMessageText(myReferralsMessage, referralsKeyboard());
        break;
      
      case 'top_referrers':
        await ctx.answerCbQuery();
        const topReferrers = getTopReferrers(10);
        
        if (topReferrers.length === 0) {
          await ctx.editMessageText(
            'üèÜ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö!\n\n' +
            'üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!',
            referralsKeyboard()
          );
          return;
        }
        
                 const topReferrersMessage = `üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:

${topReferrers.map((ref, index) => {
  const refLevelInfo = getLevelInfo(ref.level);
  return `${index + 1}. ID: ${ref.userId}
   ‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${ref.totalReferrals}
   ‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${ref.totalEarned.stars} ‚≠ê
   ‚îî –£—Ä–æ–≤–µ–Ω—å: ${refLevelInfo.name} (${ref.level})`;
}).join('\n\n')}`;
        
        await ctx.editMessageText(topReferrersMessage, referralsKeyboard());
        break;
      
      case 'referral_levels':
        await ctx.answerCbQuery();
        const currentLevel = getReferralStats(userId).level;
        const nextLevelInfo = getNextLevel(currentLevel);
        const currentReferralStats = getReferralStats(userId);
        
        let levelsMessage = `üìà –£—Ä–æ–≤–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:

${Array.from({length: 10}, (_, i) => i + 1).map(level => {
  const levelData = getLevelInfo(level);
  const isCurrent = level === currentLevel;
  const isCompleted = currentReferralStats.totalEarned.stars >= levelData.requirement;
  
  let status = '';
  if (isCurrent) status = ' ‚úÖ –¢–µ–∫—É—â–∏–π';
  else if (isCompleted) status = ' ‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç';
  else status = ` ‚ùå –ù—É–∂–Ω–æ: ${levelData.requirement - currentReferralStats.totalEarned.stars} ‚≠ê`;
  
     return `${level}. ${levelData.name}
    ‚îú –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: ${levelData.requirement} ‚≠ê
    ‚îú –ë–æ–Ω—É—Å: ${levelData.bonus.stars} ‚≠ê
    ‚îî ${status}`;
}).join('\n\n')}`;
        
        if (nextLevelInfo) {
          levelsMessage += `\n\nüéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${nextLevelInfo.requirement - referralStats.totalEarned.stars} ‚≠ê`;
        }
        
        await ctx.editMessageText(levelsMessage, referralsKeyboard());
        break;
      
      case 'main_menu':
        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback: main_menu', { userId });
        await ctx.answerCbQuery();
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const mainMenuState = userStates.get(userId);
        userStates.delete(userId);
        logger.userState(userId, 'deleted', mainMenuState);
        const mainMenuMessage = generateUserProfile(ctx.from);
        await ctx.editMessageText(mainMenuMessage, inlineKeyboard(adminStatus));
        logger.info('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { userId });
        break;
      
      default:
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
    }
  }));
};