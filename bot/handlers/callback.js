const { Markup } = require('telegraf');
const logger = require('../utils/logger');
const cacheManager = require('../utils/cache');
const { getUserBalance } = require('../utils/currency');
const { getReferralStats } = require('../utils/referral');
const { isAdmin } = require('../utils/admin');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π
const userStates = new Map();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function callbackHandler(ctx) {
    try {
        const userId = ctx.from.id;
        const callbackData = ctx.callbackQuery.data;
        
        logger.info('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å', { userId, callbackData });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback'–∏
        switch (callbackData) {
            case 'profile':
                await handleProfile(ctx);
                break;
                
            case 'miners':
                await handleMiners(ctx);
                break;
                
            case 'miners_shop':
                await handleMinersShop(ctx);
                break;
                
            case 'my_miners':
                await handleMyMiners(ctx);
                break;
                
            case 'collect_mining_income':
                await handleCollectMiningIncome(ctx);
                break;
                
            case 'buy_miner':
                await handleBuyMiner(ctx);
                break;
                
            case 'next_miner':
                await handleNextMiner(ctx);
                break;
                
            case 'buy_miner_novice':
                await handleBuyMiner(ctx, 'novice');
                break;
                
            case 'buy_miner_star_path':
                await handleBuyMiner(ctx, 'star_path');
                break;
                
            case 'withdraw':
                await handleWithdraw(ctx);
                break;
                
            case 'activate_key':
                await handleActivateKey(ctx);
                break;
                
            case 'referrals':
                await handleReferrals(ctx);
                break;
                
            case 'main_menu':
                await handleMainMenu(ctx);
                break;
                
            case 'admin_panel':
                await handleAdminPanel(ctx);
                break;
                
            case 'create_key':
                await handleCreateKey(ctx);
                break;
                
            case 'create_title_key':
                await handleCreateTitleKey(ctx);
                break;
                
            case 'clear_cache':
                await handleClearCache(ctx);
                break;
                
            case 'cache_stats':
                await handleCacheStats(ctx);
                break;
                
            case 'titles':
                await handleTitles(ctx);
                break;
                
            case 'my_titles':
                await handleMyTitles(ctx);
                break;
                
            case 'key_reward_stars':
                await handleKeyRewardType(ctx, 'stars');
                break;
                
            case 'key_reward_coins':
                await handleKeyRewardType(ctx, 'coins');
                break;
                
            default:
                await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
                break;
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await ctx.answerCbQuery();
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback', error, { userId: ctx?.from?.id });
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function handleProfile(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const referralStats = await getReferralStats(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { getUserCurrentTitle } = require('../utils/titles');
        const currentTitle = await getUserCurrentTitle(userId);
        
        const profileMessage = `üéÆ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Magnum Stars**\n\n` +
            `‚ú® –ù–∏–∫: ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `üÜî ID: \`${userId}\`\n` +
            `üèÖ –¢–∏—Ç—É–ª: ${currentTitle.name}\n\n` +
            `üíé **–ë–∞–ª–∞–Ω—Å:**\n` +
            `‚≠ê Stars ‚Üí ${userBalance.stars}\n` +
            `ü™ô Magnum Coins ‚Üí ${userBalance.coins}\n\n` +
            `üë• –î—Ä—É–∑—å—è: ${referralStats.totalReferrals}\n` +
            `üí∞ –†–µ—Ñ. –¥–æ—Ö–æ–¥: ${referralStats.totalEarned.stars} ‚≠ê`;
        
        const profileKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üëë –¢–∏—Ç—É–ª—ã', 'titles')],
            [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(profileMessage, {
            parse_mode: 'Markdown',
            reply_markup: profileKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'profile')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function handleMiners(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        const userMiners = await getUserMiners(userId);
        const totalIncome = calculateTotalMiningIncome(userMiners);
        
        const minersMessage = `‚õèÔ∏è **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
            `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:**\n` +
            `‚îú ü™ô Magnum Coins: ${userBalance.coins}\n` +
            `‚îî ‚≠ê Stars: ${userBalance.stars}\n\n` +
            `‚õèÔ∏è **–í–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã:**\n` +
            `‚îú üìä –í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤: ${userMiners.length}\n` +
            `‚îú ‚ö° –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalIncome.coins} ü™ô/–º–∏–Ω\n` +
            `‚îî üíé –î–æ—Ö–æ–¥ –≤ Stars: ${totalIncome.stars} ‚≠ê/–º–∏–Ω\n\n` +
            `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;
        
        const minersKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miners_shop')],
            [Markup.button.callback('üìä –ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã', 'my_miners')],
            [Markup.button.callback('üí∞ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥', 'collect_mining_income')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(minersMessage, {
            parse_mode: 'Markdown',
            reply_markup: minersKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–æ–≤', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'miners')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞–π–Ω–µ—Ä–æ–≤ (–∑–∞–≥–ª—É—à–∫–∏)
async function getUserMiners(userId) {
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    return [];
}

function calculateTotalMiningIncome(miners) {
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É, –ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    return { coins: 0, stars: 0 };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤
async function handleMinersShop(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
        const availableMiners = getAvailableMiners();
        
        const shopMessage = `üõí **–ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
            `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:**\n` +
            `‚îú ü™ô Magnum Coins: ${userBalance.coins}\n` +
            `‚îî ‚≠ê Stars: ${userBalance.stars}\n\n` +
            `‚õèÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã:**\n\n` +
            `üÜï **–ù–æ–≤–∏—á–æ–∫**\n` +
            `‚îú üí∞ –¶–µ–Ω–∞: 100 ü™ô Magnum Coins\n` +
            `‚îú ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: 0.25 ü™ô/–º–∏–Ω\n` +
            `‚îú üéØ –†–µ–¥–∫–æ—Å—Ç—å: –û–±—ã—á–Ω—ã–π\n` +
            `‚îî üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: 100 —à—Ç\n\n` +
            `‚≠ê **–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º**\n` +
            `‚îú üí∞ –¶–µ–Ω–∞: 100 ‚≠ê Stars\n` +
            `‚îú ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: 0.01 ‚≠ê/–º–∏–Ω\n` +
            `‚îú üéØ –†–µ–¥–∫–æ—Å—Ç—å: –†–µ–¥–∫–∏–π\n` +
            `‚îî üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: 100 —à—Ç\n\n` +
            `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–π–Ω–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:**`;
        
        const shopKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üÜï –ö—É–ø–∏—Ç—å –ù–æ–≤–∏—á–æ–∫ (100 ü™ô)', 'buy_miner_novice')],
            [Markup.button.callback('‚≠ê –ö—É–ø–∏—Ç—å –ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º (100 ‚≠ê)', 'buy_miner_star_path')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(shopMessage, {
            parse_mode: 'Markdown',
            reply_markup: shopKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
function getAvailableMiners() {
    return [
        {
            id: 'novice',
            name: '–ù–æ–≤–∏—á–æ–∫',
            price: { coins: 100, stars: 0 },
            speed: { coins: 0.25, stars: 0 },
            rarity: '–û–±—ã—á–Ω—ã–π',
            available: 100
        },
        {
            id: 'star_path',
            name: '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º',
            price: { coins: 0, stars: 100 },
            speed: { coins: 0, stars: 0.01 },
            rarity: '–†–µ–¥–∫–∏–π',
            available: 100
        }
    ];
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã"
async function handleMyMiners(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã"', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        const userMiners = await getUserMiners(userId);
        
        if (userMiners.length === 0) {
            const noMinersMessage = `üìä **–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã**\n\n` +
                `‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤\n\n` +
                `üí° –ö—É–ø–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞–π–Ω–µ—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!`;
            
            const noMinersKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miners_shop')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            await ctx.editMessageText(noMinersMessage, {
                parse_mode: 'Markdown',
                reply_markup: noMinersKeyboard.reply_markup
            });
            return;
        }
        
        const myMinersMessage = `üìä **–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã**\n\n` +
            `‚õèÔ∏è **–í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤:** ${userMiners.length}\n\n` +
            `üí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:**\n` +
            `‚îú ü™ô Magnum Coins: ${calculateTotalMiningIncome(userMiners).coins}/–º–∏–Ω\n` +
            `‚îî ‚≠ê Stars: ${calculateTotalMiningIncome(userMiners).stars}/–º–∏–Ω\n\n` +
            `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;
        
        const myMinersKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üí∞ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥', 'collect_mining_income')],
            [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –µ—â–µ –º–∞–π–Ω–µ—Ä', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(myMinersMessage, {
            parse_mode: 'Markdown',
            reply_markup: myMinersKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã"', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'my_miners')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥
async function handleWithdraw(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        const withdrawMessage = `‚≠ê **–í—ã–≤–æ–¥ –∑–≤–µ–∑–¥**\n\n` +
            `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance.stars} ‚≠ê Stars\n\n` +
            `üí≥ –î–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n` +
            `üìß Email: admin@magnumstar.com\n` +
            `üí¨ Telegram: @admin`;
        
        const withdrawKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(withdrawMessage, {
            parse_mode: 'Markdown',
            reply_markup: withdrawKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'withdraw')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞
async function handleCollectMiningIncome(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        const userMiners = await getUserMiners(userId);
        
        if (userMiners.length === 0) {
            const noMinersMessage = `üí∞ **–°–±–æ—Ä –¥–æ—Ö–æ–¥–∞**\n\n` +
                `‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞\n\n` +
                `üí° –ö—É–ø–∏—Ç–µ –º–∞–π–Ω–µ—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!`;
            
            const noMinersKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miners_shop')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
            ]);
            
            await ctx.editMessageText(noMinersMessage, {
                parse_mode: 'Markdown',
                reply_markup: noMinersKeyboard.reply_markup
            });
            return;
        }
        
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞
        const collectedIncome = { coins: 0, stars: 0 };
        
        const collectMessage = `üí∞ **–î–æ—Ö–æ–¥ —Å–æ–±—Ä–∞–Ω!**\n\n` +
            `‚õèÔ∏è **–°–æ–±—Ä–∞–Ω–æ:**\n` +
            `‚îú ü™ô Magnum Coins: +${collectedIncome.coins}\n` +
            `‚îî ‚≠ê Stars: +${collectedIncome.stars}\n\n` +
            `üí° –î–æ—Ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n` +
            `üîÑ –°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä —á–µ—Ä–µ–∑: 10:00`;
        
        const collectKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìä –ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã', 'my_miners')],
            [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –µ—â–µ –º–∞–π–Ω–µ—Ä', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(collectMessage, {
            parse_mode: 'Markdown',
            reply_markup: collectKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–æ—Ö–æ–¥–∞**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'collect_mining_income')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞
async function handleBuyMiner(ctx, minerType) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞', { userId, minerType });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–µ
        const minerInfo = getMinerInfo(minerType);
        
        if (!minerInfo) {
            await ctx.reply('‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        const canAfford = (userBalance.coins >= minerInfo.price.coins) && 
                         (userBalance.stars >= minerInfo.price.stars);
        
        if (!canAfford) {
            const insufficientFundsMessage = `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤**\n\n` +
                `üí∞ **–¶–µ–Ω–∞ –º–∞–π–Ω–µ—Ä–∞:**\n` +
                `‚îú ü™ô Magnum Coins: ${minerInfo.price.coins}\n` +
                `‚îî ‚≠ê Stars: ${minerInfo.price.stars}\n\n` +
                `üí≥ **–í–∞—à –±–∞–ª–∞–Ω—Å:**\n` +
                `‚îú ü™ô Magnum Coins: ${userBalance.coins}\n` +
                `‚îî ‚≠ê Stars: ${userBalance.stars}\n\n` +
                `üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–∞–π–Ω–µ—Ä`;
            
            const insufficientFundsKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miners_shop')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
            ]);
            
            await ctx.editMessageText(insufficientFundsMessage, {
                parse_mode: 'Markdown',
                reply_markup: insufficientFundsKeyboard.reply_markup
            });
            return;
        }
        
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        const successMessage = `‚úÖ **–ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!**\n\n` +
            `‚õèÔ∏è **${minerInfo.name}**\n` +
            `‚îú üí∞ –¶–µ–Ω–∞: ${minerInfo.price.coins > 0 ? minerInfo.price.coins + ' ü™ô' : minerInfo.price.stars + ' ‚≠ê'}\n` +
            `‚îú ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: ${minerInfo.speed.coins > 0 ? minerInfo.speed.coins + ' ü™ô/–º–∏–Ω' : minerInfo.speed.stars + ' ‚≠ê/–º–∏–Ω'}\n` +
            `‚îî üéØ –†–µ–¥–∫–æ—Å—Ç—å: ${minerInfo.rarity}\n\n` +
            `üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞!`;
        
        const successKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üí∞ –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥', 'collect_mining_income')],
            [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –µ—â–µ –º–∞–π–Ω–µ—Ä', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(successMessage, {
            parse_mode: 'Markdown',
            reply_markup: successKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞', error, { userId, minerType });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–µ—Ä–µ
function getMinerInfo(minerType) {
    const miners = {
        'novice': {
            id: 'novice',
            name: '–ù–æ–≤–∏—á–æ–∫',
            price: { coins: 100, stars: 0 },
            speed: { coins: 0.25, stars: 0 },
            rarity: '–û–±—ã—á–Ω—ã–π',
            available: 100
        },
        'star_path': {
            id: 'star_path',
            name: '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º',
            price: { coins: 0, stars: 100 },
            speed: { coins: 0, stars: 0.01 },
            rarity: '–†–µ–¥–∫–∏–π',
            available: 100
        }
    };
    
    return miners[minerType];
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞–π–Ω–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
async function handleNextMiner(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞–π–Ω–µ—Ä–∞', { userId });
    
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await ctx.reply('üîÑ –§—É–Ω–∫—Ü–∏—è "–°–ª–µ–¥—É—é—â–∏–π –º–∞–π–Ω–µ—Ä" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
async function handleActivateKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    userStates.set(userId, {
        state: 'waiting_for_key',
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'waiting_for_key' });
    
    const activateMessage = `üîë **–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞**\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n` +
        `üí° –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n` +
        `‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ`;
    
    const activateKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'main_menu')]
    ]);
    
    await ctx.editMessageText(activateMessage, {
        parse_mode: 'Markdown',
        reply_markup: activateKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function handleReferrals(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const referralStats = await getReferralStats(userId);
        
        const referralsMessage = `üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n` +
            `üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n` +
            `\`https://t.me/MagnumStarBot?start=${referralStats.referralId}\`\n\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
            `‚îú üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.totalReferrals}\n` +
            `‚îú ‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referralStats.totalEarned.stars}\n` +
            `‚îî üéØ –£—Ä–æ–≤–µ–Ω—å: ${referralStats.level}\n\n` +
            `üí∞ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n` +
            `‚îú ü•á 1 —É—Ä–æ–≤–µ–Ω—å: +5 ‚≠ê Stars\n` +
            `‚îú ü•à 2 —É—Ä–æ–≤–µ–Ω—å: +3 ‚≠ê Stars\n` +
            `‚îî ü•â 3 —É—Ä–æ–≤–µ–Ω—å: +1 ‚≠ê Stars`;
        
        const referralsKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'referral_stats')],
            [Markup.button.callback('üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'top_referrers')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(referralsMessage, {
            parse_mode: 'Markdown',
            reply_markup: referralsKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'referrals')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function handleMainMenu(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const referralStats = await getReferralStats(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
        const dataManager = require('../utils/dataManager');
        const botStats = await dataManager.getBotStats();
        
        const mainMenuMessage = `üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!**\n` +
            `üíé –¢–≤–æ–π –ø—É—Ç—å –∫ –Ω–∞–≥—Ä–∞–¥–∞–º —É–∂–µ –Ω–∞—á–∞–ª—Å—è!\n\n` +
            `üéÆ –ò–≥—Ä–∞–π –≤ Magnum Stars, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π Magnum Coins, –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ ‚≠ê –∏ –≤—ã–≤–æ–¥–∏ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ!\n\n` +
            `üë§ **–ü—Ä–æ—Ñ–∏–ª—å**\n` +
            `‚îú üÜî ID: \`${userId}\`\n` +
            `‚îî ‚ú® –ò–º—è: ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
            `üíé **–ë–∞–ª–∞–Ω—Å**\n` +
            `‚îú ‚≠ê Stars: ${userBalance.stars}\n` +
            `‚îî ü™ô Magnum Coins: ${userBalance.coins}\n\n` +
            `üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n` +
            `‚îú üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.totalUsers}\n` +
            `‚îî üíé –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: ${botStats.totalStarsWithdrawn} ‚≠ê\n\n` +
            `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –¥–∞–ª—å—à–µ üöÄ`;
        
        const mainMenuKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üí∞ –ú–∞–π–Ω–µ—Ä—ã', 'miners')],
            [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
            [Markup.button.callback('‚≠ê –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'withdraw')],
            [Markup.button.callback('üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á', 'activate_key')],
            [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')],
            [Markup.button.webApp('üåê WebApp', 'https://magnumstarbot.onrender.com')],
            [Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
        ]);
        
        await ctx.editMessageText(mainMenuMessage, {
            parse_mode: 'Markdown',
            reply_markup: mainMenuKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'main_menu')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async function handleAdminPanel(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        return;
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
        const dataManager = require('../utils/dataManager');
        const botStats = await dataManager.getBotStats();
        const totalUsers = await dataManager.getTotalUsers();
        const totalStarsWithdrawn = await dataManager.getTotalStarsWithdrawn();
        
        const adminMessage = `‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n` +
            `üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:\n\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
            `üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${botStats.totalStarsWithdrawn} ‚≠ê Stars, ${botStats.totalCoinsEarned} ü™ô Coins\n` +
            `üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: 0\n\n` +
            `üßπ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º:**\n` +
            `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∞\n` +
            `üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞`;
        
        const adminKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á', 'create_key')],
            [Markup.button.callback('üëë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á —Ç–∏—Ç—É–ª–∞', 'create_title_key')],
            [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞', 'cache_stats')],
            [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', 'clear_cache')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(adminMessage, {
            parse_mode: 'Markdown',
            reply_markup: adminKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'admin_panel')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
async function handleCreateKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    userStates.set(userId, {
        state: 'creating_key',
        currentStep: 'reward_type',
        data: {
            stars: 0,
            coins: 0,
            maxUses: 1
        },
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'creating_key' });
    
    const createKeyMessage = `üîë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞**\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞:\n\n` +
        `‚≠ê Stars - –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞\n` +
        `ü™ô Magnum Coins - –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞`;
    
    const createKeyKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚≠ê Stars', 'key_reward_stars')],
        [Markup.button.callback('ü™ô Magnum Coins', 'key_reward_coins')],
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(createKeyMessage, {
        parse_mode: 'Markdown',
        reply_markup: createKeyKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
async function handleCreateTitleKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
    userStates.set(userId, {
        state: 'creating_title_key',
        currentStep: 'description',
        data: {
            titleId: 'novice',
            stars: 50,
            coins: 25,
            maxUses: 1
        },
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'creating_title_key' });
    
    const createTitleKeyMessage = `üëë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞**\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞:\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: –ö–ª—é—á —Ç–∏—Ç—É–ª–∞ "–ù–æ–≤–∏—á–æ–∫" –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ`;
    
    const createTitleKeyKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(createTitleKeyMessage, {
        parse_mode: 'Markdown',
        reply_markup: createTitleKeyKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
async function handleClearCache(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
        return;
    }
    
    const beforeStats = cacheManager.getStats();
    cacheManager.clear();
    const afterStats = cacheManager.getStats();
    
    const clearMessage = `üóëÔ∏è **–ö—ç—à –æ—á–∏—â–µ–Ω**\n\n` +
        `üìä **–î–æ –æ—á–∏—Å—Ç–∫–∏:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä: ${beforeStats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${beforeStats.hits}\n` +
        `‚îî ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${beforeStats.misses}\n\n` +
        `üìä **–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä: ${afterStats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${afterStats.hits}\n` +
        `‚îî ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${afterStats.misses}\n\n` +
        `üßπ **–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏:** ${beforeStats.totalSize - afterStats.totalSize} –ú–ë`;
    
    const clearKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞', 'cache_stats')],
        [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(clearMessage, {
        parse_mode: 'Markdown',
        reply_markup: clearKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
async function handleCacheStats(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
        return;
    }
    
    const stats = cacheManager.getStats();
    const memUsage = process.memoryUsage();
    
    const statsMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞**\n\n` +
        `üíæ **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${stats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${stats.hits}\n` +
        `‚îú ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${stats.misses}\n` +
        `‚îî üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏—è: ${stats.evictions}\n\n` +
        `üß† **–ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞:**\n` +
        `‚îú üíæ Heap Used: ${Math.round(memUsage.heapUsed / 1024 / 1024 * 100) / 100} –ú–ë\n` +
        `‚îú üìä Heap Total: ${Math.round(memUsage.heapTotal / 1024 / 1024 * 100) / 100} –ú–ë\n` +
        `‚îî üîÑ RSS: ${Math.round(memUsage.rss / 1024 / 1024 * 100) / 100} –ú–ë\n\n` +
        `üìã **–î–µ—Ç–∞–ª–∏ –ø–æ –∫—ç—à–∞–º:**\n` +
        Object.entries(stats.caches).map(([name, cache]) => 
            `‚îú ${name}: ${cache.size}/${cache.maxSize} (TTL: ${Math.round(cache.ttl / 1000)}—Å)`
        ).join('\n');
    
    const statsKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', 'clear_cache')],
        [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(statsMessage, {
        parse_mode: 'Markdown',
        reply_markup: statsKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏—Ç—É–ª–æ–≤
async function handleTitles(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏—Ç—É–ª–æ–≤', { userId });
    
    const titlesMessage = `üëë **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã**\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏—Ç—É–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n` +
        `üÜï **–ù–æ–≤–∏—á–æ–∫**\n` +
        `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 1\n` +
        `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
        `üëë **–í–ª–∞–¥–µ–ª–µ—Ü**\n` +
        `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: –¢–∏—Ç—É–ª –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞\n` +
        `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 10\n` +
        `‚îî üîí –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`;
    
    const titlesKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –ú–æ–∏ —Ç–∏—Ç—É–ª—ã', 'my_titles')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.editMessageText(titlesMessage, {
        parse_mode: 'Markdown',
        reply_markup: titlesKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∏—Ö —Ç–∏—Ç—É–ª–æ–≤
async function handleMyTitles(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∏—Ö —Ç–∏—Ç—É–ª–æ–≤', { userId });
    
    const myTitlesMessage = `üëë **–ú–æ–∏ —Ç–∏—Ç—É–ª—ã**\n\n` +
        `üéØ –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª:\n\n` +
        `üÜï **–ù–æ–≤–∏—á–æ–∫**\n` +
        `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 1\n` +
        `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n` +
        `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤:**\n` +
        `‚îú üéØ –í—Å–µ–≥–æ —Ç–∏—Ç—É–ª–æ–≤: 1\n` +
        `‚îú ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 1\n` +
        `‚îî üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 1`;
    
    const myTitlesKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëë –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã', 'titles')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.editMessageText(myTitlesMessage, {
        parse_mode: 'Markdown',
        reply_markup: myTitlesKeyboard.reply_markup
    });
}

module.exports = {
    callbackHandler,
    handleKeyCreation,
    handleTitleKeyCreation,
    userStates
};

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–õ–Æ–ß–ï–ô ===

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞
async function handleKeyRewardType(ctx, rewardType) {
    const userId = ctx.from.id;
    
    logger.info('–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞', { userId, rewardType });
    
    const userState = userStates.get(userId);
    if (!userState) return;
    
    userState.currentStep = 'reward_amount';
    userState.data.rewardType = rewardType;
    
    const rewardTypeText = rewardType === 'stars' ? '‚≠ê Stars' : 'ü™ô Magnum Coins';
    
    const message = `üîë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞**\n\n` +
        `üéØ –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: ${rewardTypeText}\n\n` +
        `üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${rewardTypeText} –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã:\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: 100`;
    
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleKeyCreation(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞', { userId, text });
    
    const userState = userStates.get(userId);
    if (!userState || userState.state !== 'creating_key') return;
    
    try {
        if (userState.currentStep === 'reward_amount') {
            const amount = parseInt(text);
            if (isNaN(amount) || amount <= 0) {
                await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                return;
            }
            
            userState.data[userState.data.rewardType] = amount;
            userState.currentStep = 'max_uses';
            
            const rewardTypeText = userState.data.rewardType === 'stars' ? '‚≠ê Stars' : 'ü™ô Magnum Coins';
            
            const message = `üîë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞**\n\n` +
                `üéØ –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: ${rewardTypeText}\n` +
                `üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} ${rewardTypeText}\n\n` +
                `üîÑ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:\n\n` +
                `üí° –ü—Ä–∏–º–µ—Ä: 1`;
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
            ]);
            
            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            
        } else if (userState.currentStep === 'max_uses') {
            const maxUses = parseInt(text);
            if (isNaN(maxUses) || maxUses <= 0) {
                await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                return;
            }
            
            userState.data.maxUses = maxUses;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á
            const { generateKey } = require('../utils/keys');
            const key = generateKey();
            
            const rewardTypeText = userState.data.rewardType === 'stars' ? '‚≠ê Stars' : 'ü™ô Magnum Coins';
            
            const successMessage = `‚úÖ **–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                `üîë –ö–ª—é—á: \`${key}\`\n` +
                `üéØ –¢–∏–ø: ${rewardTypeText}\n` +
                `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${userState.data[userState.data.rewardType]} ${rewardTypeText}\n` +
                `üîÑ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxUses}\n\n` +
                `üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"`;
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–ª—é—á', 'create_key')],
                [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
            ]);
            
            await ctx.reply(successMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.delete(userId);
            
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞', error, { userId, text });
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞');
        userStates.delete(userId);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleTitleKeyCreation(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞', { userId, text });
    
    const userState = userStates.get(userId);
    if (!userState || userState.state !== 'creating_title_key') return;
    
    try {
        if (userState.currentStep === 'description') {
            if (text.trim().length < 3) {
                await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Ç–∏—Ç—É–ª–∞
            const { generateKey } = require('../utils/keys');
            const key = generateKey();
            
            const successMessage = `‚úÖ **–ö–ª—é—á —Ç–∏—Ç—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                `üîë –ö–ª—é—á: \`${key}\`\n` +
                `üëë –¢–∏—Ç—É–ª: –ù–æ–≤–∏—á–æ–∫\n` +
                `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${text.trim()}\n` +
                `üí∞ –ù–∞–≥—Ä–∞–¥–∞: 50 ‚≠ê Stars, 25 ü™ô Magnum Coins\n` +
                `üîÑ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: 1\n\n` +
                `üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"`;
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üëë –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–ª—é—á —Ç–∏—Ç—É–ª–∞', 'create_title_key')],
                [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
            ]);
            
            await ctx.reply(successMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.delete(userId);
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', error, { userId, text });
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞');
        userStates.delete(userId);
    }
}