const { Markup } = require('telegraf');
const logger = require('../utils/logger');
const cacheManager = require('../utils/cache');
const { getUserBalance } = require('../utils/currency');
const { getReferralStats } = require('../utils/referral');
const { isAdmin } = require('../utils/admin');
const dataManager = require('../utils/dataManager');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π
const userStates = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å start.js)
const lastBotMessages = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateLastBotMessage(userId, messageId) {
    lastBotMessages.set(userId, messageId);
    logger.debug('–û–±–Ω–æ–≤–ª–µ–Ω ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞', { userId, messageId });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getLastBotMessage(userId) {
    return lastBotMessages.get(userId);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function callbackHandler(ctx) {
    try {
        const userId = ctx.from.id;
        const callbackData = ctx.callbackQuery.data;
        const messageId = ctx.callbackQuery.message?.message_id;

        logger.info('–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å', {
            userId,
            callbackData,
            messageId,
            chatType: ctx.chat?.type,
            chatUsername: ctx.chat?.username,
            chatId: ctx.chat?.id
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º—ã–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –≤—ã–ø–ª–∞—Ç –∏–∑ —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∑–∞—è–≤–∫–∏
        const isWithdrawalChannel = ctx.chat?.username === 'magnumwithdraw';
        const lastMessageId = lastBotMessages.get(userId);

        logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', {
            userId,
            callbackData,
            messageId,
            lastMessageId,
            isWithdrawalChannel,
            chatType: ctx.chat?.type,
            chatUsername: ctx.chat?.username
        });

        if (!isWithdrawalChannel && lastMessageId && messageId !== lastMessageId) {
            logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å—Ç–∞—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º', {
                userId,
                callbackData,
                oldMessageId: messageId,
                currentMessageId: lastMessageId,
                chatType: ctx.chat?.type
            });

            // –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ
            await ctx.answerCbQuery('‚ùå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é.', true);
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback'–∏
        switch (callbackData) {
            case 'check_subscription':
                await handleCheckSubscription(ctx);
                break;
            case 'profile':
                await handleProfile(ctx);
                break;
                
            case 'miners':
                await handleMiners(ctx);
                break;
                
            case 'miners_shop':
                await handleMinersShop(ctx);
                break;
            case (action) => action.startsWith('next_miner_shop_'):
                const minerIndex = parseInt(action.replace('next_miner_shop_', ''));
                await handleMinersShop(ctx, minerIndex);
                break;
                
            case 'my_miners':
                await handleMyMiners(ctx);
                break;
                
            case 'start_mining':
                await handleStartMining(ctx);
                break;
            case 'mining_active':
                await ctx.answerCbQuery('‚è∞ –ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω! –î–æ—Ö–æ–¥ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
                break;
                
            case 'buy_miner':
                await handleBuyMiner(ctx);
                break;
                
            case 'next_miner':
                await handleNextMiner(ctx);
                break;
                
            case 'buy_miner_novice':
                await handleBuyMiner(ctx, 'novice');
                break;
                
            case 'withdraw':
                await handleWithdraw(ctx);
                break;
            case 'create_withdrawal':
                await handleCreateWithdrawal(ctx);
                break;
            case 'my_withdrawals':
                await handleMyWithdrawals(ctx);
                break;
            case 'webapp_coming_soon':
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await ctx.answerCbQuery('üöÄ WebApp —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.', true);
                break;
            case 'activate_key':
                await handleActivateKey(ctx);
                break;
                
            case 'referrals':
                await handleReferrals(ctx);
                break;
                
            case 'support':
                await handleSupport(ctx);
                break;

                
            case 'main_menu':
                await handleMainMenu(ctx);
                break;
                
            case 'admin_panel':
                await handleAdminPanel(ctx);
                break;
                
            case 'create_key':
                await handleCreateKey(ctx);
                break;
                
            case 'create_title_key':
                await handleCreateTitleKey(ctx);
                break;

            case 'create_miner_key':
                await handleCreateMinerKey(ctx);
                break;

            case 'miner_key_novice':
                await handleMinerKeyType(ctx, 'novice');
                break;

            case 'miner_key_star_path':
                await handleMinerKeyType(ctx, 'star_path');
                break;

            case 'clear_cache':
                await handleClearCache(ctx);
                break;
                
            case 'cache_stats':
                await handleCacheStats(ctx);
                break;
                
            case 'titles':
                await handleTitles(ctx);
                break;

            case 'grant_title':
                await handleGrantTitle(ctx);
                break;

            case 'revoke_title':
                await handleRevokeTitle(ctx);
                break;

            case 'view_user_titles':
                await handleViewUserTitles(ctx);
                break;

            case 'titles_stats':
                await handleTitlesStats(ctx);
                break;

            case 'my_titles':
                await handleMyTitles(ctx);
                break;
                
            case 'key_reward_stars':
                await handleKeyRewardType(ctx, 'stars');
                break;
                
            case 'key_reward_coins':
                await handleKeyRewardType(ctx, 'coins');
                break;
                
            case 'manage_titles':
                await handleManageTitles(ctx);
                break;
                
            case 'check_missed_rewards':
                await handleCheckMissedRewards(ctx);
                break;
                
            default:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
                if (callbackData.startsWith('approve_withdrawal_')) {
                    logger.info('üî• –í—ã–∑—ã–≤–∞–µ–º handleApproveWithdrawal', { action: callbackData, userId });
                    await handleApproveWithdrawal(ctx, callbackData);
                    return;
                }
                
                if (callbackData.startsWith('reject_withdrawal_')) {
                    logger.info('üî• –í—ã–∑—ã–≤–∞–µ–º handleRejectWithdrawal', { action: callbackData, userId });
                    await handleRejectWithdrawal(ctx, callbackData);
                    return;
                }
                
                if (callbackData.startsWith('attach_payment_screenshot_')) {
                    logger.info('üì∏ –í—ã–∑—ã–≤–∞–µ–º handleAttachPaymentScreenshot', { action: callbackData, userId });
                    await handleAttachPaymentScreenshot(ctx, callbackData);
                    return;
                }
                
                if (callbackData.startsWith('cancel_screenshot_')) {
                    logger.info('‚ùå –í—ã–∑—ã–≤–∞–µ–º handleCancelScreenshot', { action: callbackData, userId });
                    await handleCancelScreenshot(ctx, callbackData);
                    return;
                }
                
                if (callbackData.startsWith('complete_withdrawal_')) {
                    logger.info('‚úÖ –í—ã–∑—ã–≤–∞–µ–º handleCompleteWithdrawal', { action: callbackData, userId });
                    await handleCompleteWithdrawal(ctx, callbackData);
                    return;
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                if (callbackData === 'create_ticket') {
                    logger.info('üìù –í—ã–∑—ã–≤–∞–µ–º handleCreateTicket', { userId });
                    await handleCreateTicket(ctx);
                    return;
                }
                
                if (callbackData === 'my_tickets') {
                    logger.info('üìã –í—ã–∑—ã–≤–∞–µ–º handleMyTickets', { userId });
                    await handleMyTickets(ctx);
                    return;
                }
                
                if (callbackData === 'support_faq') {
                    logger.info('üìö –í—ã–∑—ã–≤–∞–µ–º handleSupportFAQ', { userId });
                    await handleSupportFAQ(ctx);
                    return;
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                if (callbackData.startsWith('take_ticket_')) {
                    logger.info('üë®‚Äçüíº –í—ã–∑—ã–≤–∞–µ–º handleTakeTicket', { action: callbackData, userId });
                    await handleTakeTicket(ctx, callbackData);
                    return;
                }
                
                if (callbackData.startsWith('close_ticket_')) {
                    logger.info('‚úÖ –í—ã–∑—ã–≤–∞–µ–º handleCloseTicket', { action: callbackData, userId });
                    await handleCloseTicket(ctx, callbackData);
                    return;
                }
                
                if (callbackData.startsWith('reply_ticket_')) {
                    logger.info('üí¨ –í—ã–∑—ã–≤–∞–µ–º handleReplyTicket', { action: callbackData, userId });
                    await handleReplyTicket(ctx, callbackData);
                    return;
                }
                
                if (callbackData.startsWith('cancel_reply_')) {
                    logger.info('‚ùå –í—ã–∑—ã–≤–∞–µ–º handleCancelReply', { action: callbackData, userId });
                    await handleCancelReply(ctx, callbackData);
                    return;
                }
                
                // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                logger.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', { userId, callbackData });
                await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', true);
                break;
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        await ctx.answerCbQuery();
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback', error, { userId: ctx?.from?.id });
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function handleProfile(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', { userId });
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const canUseBot = await dataManager.canUserUseBot(userId);
        if (!canUseBot) {
            const subscriptionMessage = `üîí **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª**\n\n` +
                `üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª **@magnumtap**\n\n` +
                `üìã **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n` +
                `1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"\n` +
                `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @magnumtap\n` +
                `3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"\n\n` +
                `üí° –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!`;
            
            const subscriptionKeyboard = Markup.inlineKeyboard([
                [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'https://t.me/magnumtap')],
                [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')]
            ]);
            
            await ctx.editMessageText(subscriptionMessage, {
                parse_mode: 'Markdown',
                reply_markup: subscriptionKeyboard.reply_markup
            });
            
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const referralStats = await getReferralStats(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { getUserCurrentTitle } = require('../utils/titles');
        const currentTitle = await getUserCurrentTitle(userId);
        
        const profileMessage = `üéÆ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Magnum Stars**\n\n` +
            `‚ú® –ù–∏–∫: ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `üÜî ID: \`${userId}\`\n` +
            `üèÖ –¢–∏—Ç—É–ª: ${currentTitle.name}\n\n` +
            `üíé **–ë–∞–ª–∞–Ω—Å:**\n` +
            `‚≠ê Stars ‚Üí ${userBalance.stars}\n` +
            `ü™ô Magnum Coins ‚Üí ${userBalance.coins}\n\n` +
            `üë• –î—Ä—É–∑—å—è: ${referralStats.totalReferrals}\n` +
            `üí∞ –†–µ—Ñ. –¥–æ—Ö–æ–¥: ${referralStats.totalEarned.stars} ‚≠ê, ${referralStats.totalEarned.coins} ü™ô`;
        
        const profileKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üëë –¢–∏—Ç—É–ª—ã', 'titles')],
            [Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'referrals')],
            [Markup.button.callback('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(profileMessage, {
            parse_mode: 'Markdown',
            reply_markup: profileKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'profile')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async function handleMiners(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userMiners = await dataManager.getUserMiners(userId);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥
        let totalCoinsPerMin = 0;
        let totalStarsPerMin = 0;
        
        userMiners.forEach(miner => {
            if (miner.isActive) {
                totalCoinsPerMin += miner.speed.coins;
                totalStarsPerMin += miner.speed.stars;
            }
        });
        
        const totalIncome = { coins: totalCoinsPerMin, stars: totalStarsPerMin };
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –º–∞–π–Ω–µ—Ä–æ–≤
        const minerAvailability = await dataManager.getMinerAvailability('novice');
        const userMinerCount = await dataManager.getUserMinerCount(userId, 'novice');
        
        const minersMessage = `‚õèÔ∏è **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
            `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:**\n` +
            `‚îú ü™ô Magnum Coins: ${userBalance.coins}\n` +
            `‚îî ‚≠ê Stars: ${userBalance.stars}\n\n` +
            `üìà **–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:**\n` +
            `‚îú ü™ô Magnum Coins: ${(userBalance.totalEarned?.coins || 0)}\n` +
            `‚îî ‚≠ê Stars: ${(userBalance.totalEarned?.stars || 0)}\n\n` +
            `‚õèÔ∏è **–í–∞—à–∏ –º–∞–π–Ω–µ—Ä—ã:**\n` +
            `‚îú üìä –í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤: ${userMiners.length}\n` +
            `‚îú ‚ö° –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalIncome.coins} ü™ô/–º–∏–Ω\n` +
            `‚îî üíé –î–æ—Ö–æ–¥ –≤ Stars: ${totalIncome.stars} ‚≠ê/–º–∏–Ω\n\n` +
            `üìä **–õ–∏–º–∏—Ç—ã:**\n` +
            `‚îú üë§ –£ –≤–∞—Å: ${userMinerCount}/${minerAvailability.maxPerUser} –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `‚îú üåê –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${minerAvailability.activeCount}/${minerAvailability.globalLimit}\n` +
            `‚îî üÜï –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –µ—â–µ: ${Math.max(0, minerAvailability.maxPerUser - userMinerCount)} –º–∞–π–Ω–µ—Ä–æ–≤\n\n` +
            `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;
    
    const minersKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miners_shop')],
            [Markup.button.callback('üìä –ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã', 'my_miners')],
            [Markup.button.callback('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥', 'start_mining')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.editMessageText(minersMessage, {
        parse_mode: 'Markdown',
        reply_markup: minersKeyboard.reply_markup
    });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –º–∞–π–Ω–µ—Ä–æ–≤', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'miners')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤
async function handleMinersShop(ctx, currentMinerIndex = 0) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤', { userId, currentMinerIndex });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
        const availableMiners = [
            {
                id: 'novice',
                name: '–ù–æ–≤–∏—á–æ–∫',
                price: { coins: 100, stars: 0 },
                speed: { coins: 1, stars: 0 }, // 1 Magnum Coin –≤ –º–∏–Ω—É—Ç—É
                rarity: '–û–±—ã—á–Ω—ã–π',
                description: '–ü–µ—Ä–≤—ã–π –º–∞–π–Ω–µ—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö. –î–æ–±—ã–≤–∞–µ—Ç 1 ü™ô Magnum Coin –≤ –º–∏–Ω—É—Ç—É'
            }
        ];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if (currentMinerIndex >= availableMiners.length) {
            currentMinerIndex = 0;
        }
        
        const currentMiner = availableMiners[currentMinerIndex];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–∞
        const minerAvailability = await dataManager.getMinerAvailability(currentMiner.id);
        const userMinerCount = await dataManager.getUserMinerCount(userId, currentMiner.id);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –º–∞–π–Ω–µ—Ä–µ
        const priceText = currentMiner.price.coins > 0 
            ? `${currentMiner.price.coins} ü™ô Magnum Coins`
            : `${currentMiner.price.stars} ‚≠ê Stars`;
            
        const speedText = currentMiner.speed.coins > 0
            ? `${currentMiner.speed.coins} ü™ô/–º–∏–Ω`
            : `${currentMiner.speed.stars} ‚≠ê/–º–∏–Ω`;
        
        const shopMessage = `üõí **–ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
            `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:**\n` +
            `‚îú ü™ô Magnum Coins: ${userBalance.coins}\n` +
            `‚îî ‚≠ê Stars: ${userBalance.stars}\n\n` +
            `üéØ **${currentMiner.name}**\n` +
            `‚îú üí∞ –¶–µ–Ω–∞: ${priceText}\n` +
            `‚îú ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: ${speedText}\n` +
            `‚îú üéØ –†–µ–¥–∫–æ—Å—Ç—å: ${currentMiner.rarity}\n` +
            `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${currentMiner.description}\n\n` +
            `üìä **–õ–∏–º–∏—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞:**\n` +
            `‚îú üë§ –£ –≤–∞—Å: ${userMinerCount}/${minerAvailability.maxPerUser} –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `‚îú üåê –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${minerAvailability.globalCount}/${minerAvailability.globalLimit} –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `‚îî üÜï –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${minerAvailability.available} –º–∞–π–Ω–µ—Ä–æ–≤\n\n` +
            `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∫—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä
        const canBuy = minerAvailability.isAvailable && 
                      userMinerCount < minerAvailability.maxPerUser &&
                      userBalance.coins >= currentMiner.price.coins;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        const shopKeyboard = [];
        
        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ (–∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å)
        if (canBuy) {
            shopKeyboard.push([Markup.button.callback(
                `üõí –ö—É–ø–∏—Ç—å ${currentMiner.name}`, 
                `buy_miner_${currentMiner.id}`
            )]);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            let reason = '';
            if (!minerAvailability.isAvailable) {
                reason = '‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –æ–±—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ';
            } else if (userMinerCount >= minerAvailability.maxPerUser) {
                reason = '‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
            } else if (userBalance.coins < currentMiner.price.coins) {
                reason = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤';
            }
            
            shopKeyboard.push([Markup.button.callback(
                reason, 
                'miners_shop'
            )]);
        }
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        shopKeyboard.push([
            Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners'),
            Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')
        ]);
        
        await ctx.editMessageText(shopMessage, {
            parse_mode: 'Markdown',
            reply_markup: Markup.inlineKeyboard(shopKeyboard).reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –º–∞–π–Ω–µ—Ä–æ–≤', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã"
async function handleMyMiners(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ "–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã"', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userMiners = await dataManager.getUserMiners(userId);
        
        if (userMiners.length === 0) {
            const noMinersMessage = `üìä **–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã**\n\n` +
                `‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤\n\n` +
                `üí° –ö—É–ø–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞–π–Ω–µ—Ä –≤ –º–∞–≥–∞–∑–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!`;
            
            const noMinersKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miners_shop')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            await ctx.editMessageText(noMinersMessage, {
                parse_mode: 'Markdown',
                reply_markup: noMinersKeyboard.reply_markup
            });
            return;
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –¥–æ—Ö–æ–¥
        let totalCoinsPerMin = 0;
        let totalStarsPerMin = 0;
        
        userMiners.forEach(miner => {
            if (miner.isActive) {
                totalCoinsPerMin += miner.speed.coins;
                totalStarsPerMin += miner.speed.stars;
            }
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –º–∞–π–Ω–µ—Ä–æ–≤
        const minerAvailability = await dataManager.getMinerAvailability('novice');
        const userMinerCount = await dataManager.getUserMinerCount(userId, 'novice');
        
        const myMinersMessage = `üìä **–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã**\n\n` +
            `‚õèÔ∏è **–í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤:** ${userMiners.length}\n\n` +
            `üí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:**\n` +
            `‚îú ü™ô Magnum Coins: ${totalCoinsPerMin.toFixed(2)}/–º–∏–Ω\n` +
            `‚îî ‚≠ê Stars: ${totalStarsPerMin.toFixed(2)}/–º–∏–Ω\n\n` +
            `üìä **–õ–∏–º–∏—Ç—ã:**\n` +
            `‚îú üë§ –£ –≤–∞—Å: ${userMinerCount}/${minerAvailability.maxPerUser} –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `‚îú üåê –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: ${minerAvailability.activeCount}/${minerAvailability.globalLimit}\n` +
            `‚îî üÜï –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –µ—â–µ: ${Math.max(0, minerAvailability.maxPerUser - userMinerCount)} –º–∞–π–Ω–µ—Ä–æ–≤\n\n` +
            `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;
        
        const myMinersKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥', 'start_mining')],
            [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –µ—â–µ –º–∞–π–Ω–µ—Ä', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(myMinersMessage, {
            parse_mode: 'Markdown',
            reply_markup: myMinersKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã"', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–π–Ω–µ—Ä–æ–≤**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'my_miners')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥
async function handleWithdraw(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await dataManager.getUserBalance(userId);
        
        const withdrawMessage = `‚≠ê **–í—ã–≤–æ–¥ Stars**\n\n` +
            `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${userBalance.stars} ‚≠ê Stars\n\n` +
            `üìã **–£—Å–ª–æ–≤–∏—è –≤—ã–≤–æ–¥–∞:**\n` +
            `‚îú üí∞ –ú–∏–Ω–∏–º—É–º –¥–ª—è –∑–∞—è–≤–∫–∏: 50 ‚≠ê Stars\n` +
            `‚îú ‚è≥ –°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: 24‚Äì48 —á–∞—Å–æ–≤\n` +
            `‚îî üÜî –°–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞: Telegram ID\n\n` +
            `üí° **–ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ Stars:**\n` +
            `1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É¬ª\n` +
            `2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞\n` +
            `4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É –∏ –æ–∂–∏–¥–∞–π—Ç–µ üöÄ\n\n` +
            `‚ú® –ü–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚≠êÔ∏è –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç.`;
        
        const withdrawKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_withdrawal')],
            [Markup.button.callback('üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'my_withdrawals')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(withdrawMessage, {
            parse_mode: 'Markdown',
            reply_markup: withdrawKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'withdraw')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
async function handleStartMining(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userMiners = await dataManager.getUserMiners(userId);
        
        if (userMiners.length === 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞');
            return;
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–∏–Ω–≥
        const miningResult = await dataManager.startMining(userId);
        
        if (miningResult.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–∞–≥—Ä–∞–¥–æ–π
            const rewardMessage = miningResult.initialReward.coins > 0 
                ? `üöÄ –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${miningResult.initialReward.coins} ü™ô Magnum Coins –∑–∞ –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É!`
                : 'üöÄ –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!';
            
            await ctx.answerCbQuery(rewardMessage);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞–π–Ω–∏–Ω–≥–µ
            await showMiningInProgress(ctx, userId, miningResult.startTime);
            
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await ctx.answerCbQuery(`‚ùå ${miningResult.message}`);
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞', error, { userId });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –º–∞–π–Ω–∏–Ω–≥–∞
async function updateMiningTimer(ctx, userId, startTime) {
    try {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (4 —á–∞—Å–∞ = 14400000 –º—Å)
        const cooldownTime = 4 * 60 * 60 * 1000; // 4 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const nextMiningTime = new Date(startTime).getTime() + cooldownTime;
        const now = Date.now();
        
        if (now >= nextMiningTime) {
            // –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥"
            await showMiningReady(ctx, userId);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
            await showMiningTimer(ctx, userId, nextMiningTime);
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –º–∞–π–Ω–∏–Ω–≥–∞', error, { userId });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∞–π–Ω–∏–Ω–≥—É
async function showMiningReady(ctx, userId) {
    try {
        const userMiners = await dataManager.getUserMiners(userId);
        
        let totalCoinsPerMin = 0;
        let totalStarsPerMin = 0;
        
        userMiners.forEach(miner => {
            if (miner.isActive) {
                totalCoinsPerMin += miner.speed.coins;
                totalStarsPerMin += miner.speed.stars;
            }
        });
        
        const myMinersMessage = `üìä **–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã**\n\n` +
            `‚õèÔ∏è **–í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤:** ${userMiners.length}\n\n` +
            `üí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:**\n` +
            `‚îú ü™ô Magnum Coins: ${totalCoinsPerMin.toFixed(2)}/–º–∏–Ω\n` +
            `‚îî ‚≠ê Stars: ${totalStarsPerMin.toFixed(2)}/–º–∏–Ω\n\n` +
            `üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;
        
        const myMinersKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥', 'start_mining')],
            [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –µ—â–µ –º–∞–π–Ω–µ—Ä', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(myMinersMessage, {
            parse_mode: 'Markdown',
            reply_markup: myMinersKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –º–∞–π–Ω–∏–Ω–≥—É', error, { userId });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–∏–Ω–≥–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
async function showMiningInProgress(ctx, userId, startTime) {
    try {
        const userMiners = await dataManager.getUserMiners(userId);
        
        let totalCoinsPerMin = 0;
        let totalStarsPerMin = 0;
        
        userMiners.forEach(miner => {
            if (miner.isActive) {
                totalCoinsPerMin += miner.speed.coins;
                totalStarsPerMin += miner.speed.stars;
            }
        });
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (4 —á–∞—Å–∞ = 14400000 –º—Å)
        const cooldownTime = 4 * 60 * 60 * 1000; // 4 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const nextMiningTime = new Date(startTime).getTime() + cooldownTime;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        const nextMiningDate = new Date(nextMiningTime);
        const nextMiningTimeString = nextMiningDate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        });
        
        const myMinersMessage = `üìä **–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã**\n\n` +
            `‚õèÔ∏è **–í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤:** ${userMiners.length}\n\n` +
            `üí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:**\n` +
            `‚îú ü™ô Magnum Coins: ${totalCoinsPerMin.toFixed(2)}/–º–∏–Ω\n` +
            `‚îî ‚≠ê Stars: ${totalStarsPerMin.toFixed(2)}/–º–∏–Ω\n\n` +
            `‚è∞ **–ú–∞–π–Ω–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n` +
            `üîÑ **–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤:** ${nextMiningTimeString}\n\n` +
            `üí° –î–æ—Ö–æ–¥ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!`;
        
        const myMinersKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback(`‚è∞ –ú–∞–π–Ω–∏–Ω–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ (${nextMiningTimeString})`, 'mining_active')],
            [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –µ—â–µ –º–∞–π–Ω–µ—Ä', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(myMinersMessage, {
            parse_mode: 'Markdown',
            reply_markup: myMinersKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–∏–Ω–≥–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', error, { userId });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
async function showMiningTimer(ctx, userId, nextMiningTime) {
    try {
        const userMiners = await dataManager.getUserMiners(userId);
        
        let totalCoinsPerMin = 0;
        let totalStarsPerMin = 0;
        
        userMiners.forEach(miner => {
            if (miner.isActive) {
                totalCoinsPerMin += miner.speed.coins;
                totalStarsPerMin += miner.speed.stars;
            }
        });
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        const nextMiningDate = new Date(nextMiningTime);
        const nextMiningTimeString = nextMiningDate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        });
        
        const myMinersMessage = `üìä **–ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã**\n\n` +
            `‚õèÔ∏è **–í—Å–µ–≥–æ –º–∞–π–Ω–µ—Ä–æ–≤:** ${userMiners.length}\n\n` +
            `üí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:**\n` +
            `‚îú ü™ô Magnum Coins: ${totalCoinsPerMin.toFixed(2)}/–º–∏–Ω\n` +
            `‚îî ‚≠ê Stars: ${totalStarsPerMin.toFixed(2)}/–º–∏–Ω\n\n` +
            `‚è∞ **–ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω**\n` +
            `üîÑ **–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤:** ${nextMiningTimeString}\n\n` +
            `üí° –î–æ—Ö–æ–¥ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É!`;
        
        const myMinersKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback(`‚è∞ –ú–∞–π–Ω–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω (${nextMiningTimeString})`, 'mining_active')],
            [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –µ—â–µ –º–∞–π–Ω–µ—Ä', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(myMinersMessage, {
            parse_mode: 'Markdown',
            reply_markup: myMinersKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–∞–π–º–µ—Ä–∞ –º–∞–π–Ω–∏–Ω–≥–∞', error, { userId });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞
async function handleBuyMiner(ctx, minerType) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞', { userId, minerType });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–µ
        const minerInfo = dataManager.getMinerInfo(minerType);
        
        if (!minerInfo) {
            await ctx.reply('‚ùå –ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        const canAfford = (userBalance.coins >= minerInfo.price.coins) && 
                         (userBalance.stars >= minerInfo.price.stars);
        
        if (!canAfford) {
            const insufficientFundsMessage = `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤**\n\n` +
                `üí∞ **–¶–µ–Ω–∞ –º–∞–π–Ω–µ—Ä–∞:**\n` +
                `‚îú ü™ô Magnum Coins: ${minerInfo.price.coins}\n` +
                `‚îî ‚≠ê Stars: ${minerInfo.price.stars}\n\n` +
                `üí≥ **–í–∞—à –±–∞–ª–∞–Ω—Å:**\n` +
                `‚îú ü™ô Magnum Coins: ${userBalance.coins}\n` +
                `‚îî ‚≠ê Stars: ${userBalance.stars}\n\n` +
                `üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –º–∞–π–Ω–µ—Ä`;
            
            const insufficientFundsKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üõí –ú–∞–≥–∞–∑–∏–Ω –º–∞–π–Ω–µ—Ä–æ–≤', 'miners_shop')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
            ]);
            
            await ctx.editMessageText(insufficientFundsMessage, {
                parse_mode: 'Markdown',
                reply_markup: insufficientFundsKeyboard.reply_markup
            });
            return;
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∫—É–ø–∫—É –º–∞–π–Ω–µ—Ä–∞
        const purchasedMiner = await dataManager.buyMiner(userId, minerType);
        
        const successMessage = `‚úÖ **–ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!**\n\n` +
            `‚õèÔ∏è **${minerInfo.name}**\n` +
            `‚îú üÜî ID: ${purchasedMiner.id}\n` +
            `‚îú üí∞ –¶–µ–Ω–∞: ${minerInfo.price.coins > 0 ? minerInfo.price.coins + ' ü™ô' : minerInfo.price.stars + ' ‚≠ê'}\n` +
            `‚îú ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: ${minerInfo.speed.coins > 0 ? minerInfo.speed.coins + ' ü™ô/–º–∏–Ω' : minerInfo.speed.stars + ' ‚≠ê/–º–∏–Ω'}\n` +
            `‚îú üéØ –†–µ–¥–∫–æ—Å—Ç—å: ${minerInfo.rarity}\n` +
            `‚îî üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${new Date().toLocaleDateString('ru-RU')}\n\n` +
            `üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–æ—Ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`;
        
        const successKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥', 'start_mining')],
            [Markup.button.callback('üìä –ú–æ–∏ –º–∞–π–Ω–µ—Ä—ã', 'my_miners')],
            [Markup.button.callback('üõí –ö—É–ø–∏—Ç—å –µ—â–µ –º–∞–π–Ω–µ—Ä', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(successMessage, {
            parse_mode: 'Markdown',
            reply_markup: successKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞', error, { userId, minerType });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'miners_shop')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞–π–Ω–µ—Ä–∞–º', 'miners')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}



// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞–π–Ω–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
async function handleNextMiner(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–∞–π–Ω–µ—Ä–∞', { userId });
    
    // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    await ctx.reply('üîÑ –§—É–Ω–∫—Ü–∏—è "–°–ª–µ–¥—É—é—â–∏–π –º–∞–π–Ω–µ—Ä" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞
async function handleActivateKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    userStates.set(userId, {
        state: 'waiting_for_key',
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'waiting_for_key' });
    
    const activateMessage = `üîë **–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞**\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n` +
        `üí° –ö–ª—é—á –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 16 —Å–∏–º–≤–æ–ª–æ–≤.\n` +
        `‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ.\n\n` +
        `üéâ –ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:\n` +
        ` ‚Ä¢ ‚≠ê Stars ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –∏ –¥–æ—Å—Ç–∏–≥–∞–π –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç!\n` +
        ` ‚Ä¢ ü™ô Magnum Coins ‚Äî –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –Ω–∞ –º–æ—â–Ω—ã–µ –º–∞–π–Ω–µ—Ä—ã!\n` +
        ` ‚Ä¢ ‚õèÔ∏è –ú–∞–π–Ω–µ—Ä—ã ‚Äî –¥–æ–±–∞–≤–ª—è–π –∫ —Å–≤–æ–µ–π —Ñ–µ—Ä–º–µ –∏ –ø–æ–≤—ã—à–∞–π –¥–æ—Ö–æ–¥!\n` +
        ` ‚Ä¢ üîí –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–¥–∫–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è!\n\n` +
        `üöÄ –ê–∫—Ç–∏–≤–∏—Ä—É–π –∫–ª—é—á –∏ –ø—Ä–æ–∫–∞—á–∞–π —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
    
    const activateKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'main_menu')]
    ]);
    
    await ctx.editMessageText(activateMessage, {
        parse_mode: 'Markdown',
        reply_markup: activateKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function handleReferrals(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const referralStats = await getReferralStats(userId);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ referralId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º userId
        const referralId = referralStats.referralId || ctx.from.id;
        
        const referralsMessage = `üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞**\n\n` +
            `üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n` +
            `\`https://t.me/MagnumStarBot?start=${referralId}\`\n\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
            `‚îú üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.totalReferrals}\n` +
            `‚îú ‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referralStats.totalEarned.stars}\n` +
            `‚îî üéØ –£—Ä–æ–≤–µ–Ω—å: ${referralStats.level}\n\n` +
            `üí∞ –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n` +
            `‚îú üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: +5 ‚≠ê Stars + 1000 ü™ô Magnum Coins\n` +
            `‚îî üí° –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –≤—ã—à–µ!`;
        
        const referralsKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîó –ú–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', 'my_referral_code')],
            [Markup.button.callback('üìä –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'top_referrers')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(referralsMessage, {
            parse_mode: 'Markdown',
            reply_markup: referralsKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'referrals')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function handleMainMenu(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é', { userId });
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const canUseBot = await dataManager.canUserUseBot(userId);
        if (!canUseBot) {
            const subscriptionMessage = `üîí **–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª**\n\n` +
                `üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª **@magnumtap**\n\n` +
                `üìã **–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**\n` +
                `1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"\n` +
                `2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @magnumtap\n` +
                `3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"\n\n` +
                `üí° –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!`;
            
            const subscriptionKeyboard = Markup.inlineKeyboard([
                [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'https://t.me/magnumtap')],
                [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')]
            ]);
            
            await ctx.editMessageText(subscriptionMessage, {
                parse_mode: 'Markdown',
                reply_markup: subscriptionKeyboard.reply_markup
            });
            
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await getUserBalance(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const referralStats = await getReferralStats(userId);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
        const botStats = await dataManager.getBotStats();
        

        
        const mainMenuMessage = `üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!**\n` +
            `üíé –¢–≤–æ–π –ø—É—Ç—å –∫ –Ω–∞–≥—Ä–∞–¥–∞–º —É–∂–µ –Ω–∞—á–∞–ª—Å—è!\n\n` +
            `üéÆ –ò–≥—Ä–∞–π –≤ Magnum Stars, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π Magnum Coins, –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ ‚≠ê –∏ –≤—ã–≤–æ–¥–∏ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ!\n\n` +
            `üë§ **–ü—Ä–æ—Ñ–∏–ª—å**\n` +
            `‚îú üÜî ID: \`${userId}\`\n` +
            `‚îî ‚ú® –ò–º—è: ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
            `üíé **–ë–∞–ª–∞–Ω—Å**\n` +
            `‚îú ‚≠ê Stars: ${userBalance.stars}\n` +
            `‚îî ü™ô Magnum Coins: ${userBalance.coins}\n\n` +
            `üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ**\n` +
            `‚îú üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.totalUsers}\n` +
            `‚îî üíé –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: ${botStats.totalStarsWithdrawn} ‚≠ê\n\n` +
            `üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –¥–∞–ª—å—à–µ üöÄ`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É WebApp –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const webAppButton = isAdmin(userId)
            ? Markup.button.webApp('Magnum Star - Beta', process.env.WEBAPP_URL || 'https://magnumstarbot.onrender.com')
            : Markup.button.callback('Magnum Star - Beta', 'webapp_coming_soon');

        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        const mainMenuButtons = [
            [Markup.button.callback('üí∞ –ú–∞–π–Ω–µ—Ä—ã', 'miners'), Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
            [Markup.button.callback('üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á', 'activate_key'), webAppButton],
            [Markup.button.callback('‚≠ê –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'withdraw')]
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if (isAdmin(userId)) {
            mainMenuButtons.push([Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]);
        }
        
        const mainMenuKeyboard = Markup.inlineKeyboard(mainMenuButtons);
        
        await ctx.editMessageText(mainMenuMessage, {
            parse_mode: 'Markdown',
            reply_markup: mainMenuKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'main_menu')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
async function handleAdminPanel(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏');
        return;
    }
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
        const botStats = await dataManager.getBotStats();
        const totalUsers = await dataManager.getTotalUsers();
        const totalStarsWithdrawn = await dataManager.getTotalStarsWithdrawn();
        
        const adminMessage = `‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n` +
            `üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:\n\n` +
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${totalUsers} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
            `üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${botStats.totalStarsWithdrawn} ‚≠ê Stars, ${botStats.totalCoinsEarned} ü™ô Coins\n` +
            `üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: 0\n\n` +
            `üßπ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º:**\n` +
            `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –¥–æ—Å—Ç—É–ø–Ω–∞\n` +
            `üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞`;
        
        const adminKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á', 'create_key')],
            [Markup.button.callback('üëë –í—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª', 'manage_titles')],
            [Markup.button.callback('‚õèÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã', 'check_missed_rewards')],
            [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞', 'cache_stats')],
            [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', 'clear_cache')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(adminMessage, {
            parse_mode: 'Markdown',
            reply_markup: adminKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'admin_panel')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
async function handleCreateKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
    userStates.set(userId, {
        state: 'creating_key',
        currentStep: 'reward_type',
        data: {
            stars: 0,
            coins: 0,
            maxUses: 1
        },
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'creating_key' });
    
    const createKeyMessage = `üîë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞**\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞:\n\n` +
        `‚≠ê Stars - –≤–∞–ª—é—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞\n` +
        `ü™ô Magnum Coins - –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞`;
    
    const createKeyKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚≠ê Stars', 'key_reward_stars')],
        [Markup.button.callback('ü™ô Magnum Coins', 'key_reward_coins')],
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(createKeyMessage, {
        parse_mode: 'Markdown',
        reply_markup: createKeyKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
async function handleCreateTitleKey(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', { userId });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞
    userStates.set(userId, {
        state: 'creating_title_key',
        currentStep: 'description',
        data: {
            titleId: 'novice',
            stars: 50,
            coins: 25,
            maxUses: 1
        },
        timestamp: Date.now()
    });
    
    logger.userState(userId, 'set', { state: 'creating_title_key' });
    
    const createTitleKeyMessage = `üëë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞**\n\n` +
        `üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª—é—á–∞:\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: –ö–ª—é—á —Ç–∏—Ç—É–ª–∞ "–ù–æ–≤–∏—á–æ–∫" –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ`;
    
    const createTitleKeyKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(createTitleKeyMessage, {
        parse_mode: 'Markdown',
        reply_markup: createTitleKeyKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
async function handleClearCache(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
        return;
    }
    
    const beforeStats = cacheManager.getStats();
    cacheManager.clear();
    const afterStats = cacheManager.getStats();
    
    const clearMessage = `üóëÔ∏è **–ö—ç—à –æ—á–∏—â–µ–Ω**\n\n` +
        `üìä **–î–æ –æ—á–∏—Å—Ç–∫–∏:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä: ${beforeStats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${beforeStats.hits}\n` +
        `‚îî ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${beforeStats.misses}\n\n` +
        `üìä **–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä: ${afterStats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${afterStats.hits}\n` +
        `‚îî ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${afterStats.misses}\n\n` +
        `üßπ **–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –ø–∞–º—è—Ç–∏:** ${beforeStats.totalSize - afterStats.totalSize} –ú–ë`;
    
    const clearKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞', 'cache_stats')],
        [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(clearMessage, {
        parse_mode: 'Markdown',
        reply_markup: clearKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
async function handleCacheStats(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞', { userId });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
        return;
    }
    
    const stats = cacheManager.getStats();
    const memUsage = process.memoryUsage();
    
    const statsMessage = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞**\n\n` +
        `üíæ **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n` +
        `‚îú üìà –†–∞–∑–º–µ—Ä –∫—ç—à–∞: ${stats.totalSize} –ú–ë\n` +
        `‚îú üéØ –ü–æ–ø–∞–¥–∞–Ω–∏—è: ${stats.hits}\n` +
        `‚îú ‚ùå –ü—Ä–æ–º–∞—Ö–∏: ${stats.misses}\n` +
        `‚îî üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏—è: ${stats.evictions}\n\n` +
        `üß† **–ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞:**\n` +
        `‚îú üíæ Heap Used: ${Math.round(memUsage.heapUsed / 1024 / 1024 * 100) / 100} –ú–ë\n` +
        `‚îú üìä Heap Total: ${Math.round(memUsage.heapTotal / 1024 / 1024 * 100) / 100} –ú–ë\n` +
        `‚îî üîÑ RSS: ${Math.round(memUsage.rss / 1024 / 1024 * 100) / 100} –ú–ë\n\n` +
        `üìã **–î–µ—Ç–∞–ª–∏ –ø–æ –∫—ç—à–∞–º:**\n` +
        Object.entries(stats.caches).map(([name, cache]) => 
            `‚îú ${name}: ${cache.size}/${cache.maxSize} (TTL: ${Math.round(cache.ttl / 1000)}—Å)`
        ).join('\n');
    
    const statsKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', 'clear_cache')],
        [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(statsMessage, {
        parse_mode: 'Markdown',
        reply_markup: statsKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏—Ç—É–ª–æ–≤
async function handleTitles(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏—Ç—É–ª–æ–≤', { userId });
    
    const titlesMessage = `üëë **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã**\n\n` +
            `üéØ **–í—Å–µ–≥–æ —Ç–∏—Ç—É–ª–æ–≤:** 7\n\n` +
            `üÜï **–ù–æ–≤–∏—á–æ–∫** (–û–±—ã—á–Ω—ã–π)\n` +
            `‚îú üìù –ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 1\n` +
        `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
            `‚õèÔ∏è **–ú–∞–π–Ω–µ—Ä** (–û–±—ã—á–Ω—ã–π)\n` +
            `‚îú üìù –¢–∏—Ç—É–ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤\n` +
            `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 5, 100 ‚≠ê, 500 ü™ô\n` +
            `‚îî üîí –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
            `üíº **–¢—Ä–µ–π–¥–µ—Ä** (–†–µ–¥–∫–∏–π)\n` +
            `‚îú üìù –¢–∏—Ç—É–ª –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤\n` +
            `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 10, 500 ‚≠ê, 1000 ü™ô\n` +
            `‚îî üîí –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
            `üí∞ **–ò–Ω–≤–µ—Å—Ç–æ—Ä** (–≠–ø–∏—á–µ—Å–∫–∏–π)\n` +
            `‚îú üìù –¢–∏—Ç—É–ª –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤\n` +
            `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 20, 1000 ‚≠ê, 5000 ü™ô\n` +
            `‚îî üîí –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
            `üé≠ **–ú–∞—Å—Ç–µ—Ä** (–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π)\n` +
            `‚îú üìù –¢–∏—Ç—É–ª –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞\n` +
            `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 30, 2500 ‚≠ê, 10000 ü™ô\n` +
            `‚îî üîí –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
            `üåü **–õ–µ–≥–µ–Ω–¥–∞** (–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π)\n` +
            `‚îú üìù –¢–∏—Ç—É–ª –¥–ª—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n` +
            `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 50, 5000 ‚≠ê, 25000 ü™ô\n` +
            `‚îî üîí –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n` +
            `üëë **–í–ª–∞–¥–µ–ª–µ—Ü** (–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π)\n` +
            `‚îú üìù –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞\n` +
            `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 100, 10000 ‚≠ê, 50000 ü™ô\n` +
        `‚îî üîí –°—Ç–∞—Ç—É—Å: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`;
    
    const titlesKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìä –ú–æ–∏ —Ç–∏—Ç—É–ª—ã', 'my_titles')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.editMessageText(titlesMessage, {
        parse_mode: 'Markdown',
        reply_markup: titlesKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∏—Ö —Ç–∏—Ç—É–ª–æ–≤
async function handleMyTitles(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∏—Ö —Ç–∏—Ç—É–ª–æ–≤', { userId });
    
    const myTitlesMessage = `üëë **–ú–æ–∏ —Ç–∏—Ç—É–ª—ã**\n\n` +
        `üéØ –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª:\n\n` +
        `üÜï **–ù–æ–≤–∏—á–æ–∫**\n` +
        `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `‚îú üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –£—Ä–æ–≤–µ–Ω—å 1\n` +
        `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n\n` +
        `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤:**\n` +
        `‚îú üéØ –í—Å–µ–≥–æ —Ç–∏—Ç—É–ª–æ–≤: 1\n` +
        `‚îú ‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 1\n` +
        `‚îî üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: 1`;
    
    const myTitlesKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üëë –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã', 'titles')],
        [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
        [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
    ]);
    
    await ctx.editMessageText(myTitlesMessage, {
        parse_mode: 'Markdown',
        reply_markup: myTitlesKeyboard.reply_markup
    });
}





module.exports = {
    callbackHandler,
    handleKeyCreation,
    handleTitleKeyCreation,
    userStates
};

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ö–õ–Æ–ß–ï–ô ===

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞
async function handleKeyRewardType(ctx, rewardType) {
    const userId = ctx.from.id;
    
    logger.info('–í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–ª—é—á–∞', { userId, rewardType });
    
    const userState = userStates.get(userId);
    if (!userState) return;
    
    userState.currentStep = 'reward_amount';
    userState.data.rewardType = rewardType;
    
    const rewardTypeText = rewardType === 'stars' ? '‚≠ê Stars' : 'ü™ô Magnum Coins';
    
    const message = `üîë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞**\n\n` +
        `üéØ –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: ${rewardTypeText}\n\n` +
        `üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${rewardTypeText} –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã:\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: 100`;
    
    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);
    
    await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleKeyCreation(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞', { userId, text });
    
    const userState = userStates.get(userId);
    if (!userState || userState.state !== 'creating_key') return;
    
    try {
        if (userState.currentStep === 'reward_amount') {
            const amount = parseInt(text);
            if (isNaN(amount) || amount <= 0) {
                await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                return;
            }
            
            userState.data[userState.data.rewardType] = amount;
            userState.currentStep = 'max_uses';
            
            const rewardTypeText = userState.data.rewardType === 'stars' ? '‚≠ê Stars' : 'ü™ô Magnum Coins';
            
            const message = `üîë **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞**\n\n` +
                `üéØ –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: ${rewardTypeText}\n` +
                `üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${amount} ${rewardTypeText}\n\n` +
                `üîÑ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:\n\n` +
                `üí° –ü—Ä–∏–º–µ—Ä: 1`;
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
            ]);
            
            await ctx.reply(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            
        } else if (userState.currentStep === 'max_uses') {
            const maxUses = parseInt(text);
            if (isNaN(maxUses) || maxUses <= 0) {
                await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                return;
            }
            
            userState.data.maxUses = maxUses;
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const { generateKey } = require('../utils/keys');
            const key = generateKey();
            
            const keyData = {
                key: key,
                type: userState.data.rewardType,
                reward: {
                    stars: userState.data.rewardType === 'stars' ? userState.data.stars : 0,
                    coins: userState.data.rewardType === 'coins' ? userState.data.coins : 0
                },
                maxUses: maxUses,
                createdBy: userId
            };
            
            try {
                const createResult = await dataManager.createKey(keyData);

                if (createResult.success) {
            const rewardTypeText = userState.data.rewardType === 'stars' ? '‚≠ê Stars' : 'ü™ô Magnum Coins';

            const successMessage = `‚úÖ **–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                `üîë –ö–ª—é—á: \`${key}\`\n` +
                `üéØ –¢–∏–ø: ${rewardTypeText}\n` +
                `üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${userState.data[userState.data.rewardType]} ${rewardTypeText}\n` +
                `üîÑ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxUses}\n\n` +
                `üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"`;

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–ª—é—á', 'create_key')],
                [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
            ]);

            await ctx.reply(successMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
            const chatMessage = `üéâ **–ù–æ–≤—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!**\n\n` +
                `üîë –ö–ª—é—á: \`${key}\`\n` +
                `üéØ –¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã: ${rewardTypeText}\n` +
                `üí∞ –†–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã: ${userState.data[userState.data.rewardType]} ${rewardTypeText}\n` +
                `üîÑ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxUses}\n` +
                `üë§ –°–æ–∑–¥–∞–ª: @${ctx.from.username || '–∞–¥–º–∏–Ω'}\n\n` +
                `üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –≤ –±–æ—Ç–µ!`;

            const { sendChannelNotification } = require('../middleware/chatFilter');
            await sendChannelNotification(ctx, chatMessage);
                } else {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                }
                
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', error, { userId, keyData });
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            }
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.delete(userId);
            
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞', error, { userId, text });
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞');
        userStates.delete(userId);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleTitleKeyCreation(ctx, text) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞', { userId, text });
    
    const userState = userStates.get(userId);
    if (!userState || userState.state !== 'creating_title_key') return;
    
    try {
        if (userState.currentStep === 'description') {
            if (text.trim().length < 3) {
                await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Ç–∏—Ç—É–ª–∞
            const { generateKey } = require('../utils/keys');
            const key = generateKey();
            
            const successMessage = `‚úÖ **–ö–ª—é—á —Ç–∏—Ç—É–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                `üîë –ö–ª—é—á: \`${key}\`\n` +
                `üëë –¢–∏—Ç—É–ª: –ù–æ–≤–∏—á–æ–∫\n` +
                `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${text.trim()}\n` +
                `üí∞ –ù–∞–≥—Ä–∞–¥–∞: 50 ‚≠ê Stars, 25 ü™ô Magnum Coins\n` +
                `üîÑ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: 1\n\n` +
                `üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"`;
            
            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üëë –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–ª—é—á —Ç–∏—Ç—É–ª–∞', 'create_title_key')],
                [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
            ]);
            
            await ctx.reply(successMessage, {
                parse_mode: 'Markdown',
                reply_markup: keyboard.reply_markup
            });
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.delete(userId);
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞', error, { userId, text });
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ —Ç–∏—Ç—É–ª–∞');
        userStates.delete(userId);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function handleCreateWithdrawal(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userBalance = await dataManager.getUserBalance(userId);
        
        if (userBalance.stars < 50) {
            const insufficientMessage = `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥**\n\n` +
                `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance.stars} ‚≠ê Stars\n` +
                `üìã –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 50 ‚≠ê Stars\n\n` +
                `üí° –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤–µ–∑–¥, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥`;
            
            const insufficientKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üí∞ –ú–∞–π–Ω–µ—Ä—ã', 'miners')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–≤–æ–¥—É', 'withdraw')]
            ]);
            
            await ctx.editMessageText(insufficientMessage, {
                parse_mode: 'Markdown',
                reply_markup: insufficientKeyboard.reply_markup
            });
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
        userStates.set(userId, {
            state: 'waiting_for_withdrawal_amount',
            timestamp: Date.now()
        });
        
        const createMessage = `üí≥ **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥**\n\n` +
            `üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${userBalance.stars} ‚≠ê Stars\n` +
            `üìã **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:** 50 ‚≠ê Stars\n\n` +
            `üìù **–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:**\n` +
            `üí° –ü—Ä–∏–º–µ—Ä: 100 (–¥–ª—è –≤—ã–≤–æ–¥–∞ 100 ‚≠ê Stars)`;
        
        const createKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'withdraw')]
        ]);
        
        await ctx.editMessageText(createMessage, {
            parse_mode: 'Markdown',
            reply_markup: createKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'create_withdrawal')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–≤–æ–¥—É', 'withdraw')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleMyWithdrawals(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const requests = await dataManager.db.collection('withdrawals')
            .find({ userId: Number(userId) })
            .sort({ createdAt: -1 })
            .toArray();
        
        if (requests.length === 0) {
            const noRequestsMessage = `üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥**\n\n` +
                `‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥\n\n` +
                `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ "üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"`;
            
            const noRequestsKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'create_withdrawal')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–≤–æ–¥—É', 'withdraw')]
            ]);
            
            await ctx.editMessageText(noRequestsMessage, {
                parse_mode: 'Markdown',
                reply_markup: noRequestsKeyboard.reply_markup
            });
            return;
        }
        
        let requestsMessage = `üìã **–ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥**\n\n`;
        
        for (const request of requests) {
            const status = request.status === 'pending' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç' : 
                          request.status === 'approved' ? '‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞';
            
            const date = new Date(request.createdAt).toLocaleDateString('ru-RU');
            const time = new Date(request.createdAt).toLocaleTimeString('ru-RU');
            
            requestsMessage += `üìã **–ó–∞—è–≤–∫–∞ #${request.id}**\n` +
                `‚îú üí∞ –°—É–º–º–∞: ${request.amount} ‚≠ê Stars\n` +
                `‚îú üìÖ –î–∞—Ç–∞: ${date} ${time}\n` +
                `‚îú üìä –°—Ç–∞—Ç—É—Å: ${status}\n`;
            
            if (request.status !== 'pending') {
                const processedDate = new Date(request.processedAt).toLocaleDateString('ru-RU');
                const processedTime = new Date(request.processedAt).toLocaleTimeString('ru-RU');
                requestsMessage += `‚îú ‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${processedDate} ${processedTime}\n`;
                
                if (request.comment) {
                    requestsMessage += `‚îî üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${request.comment}\n`;
                } else {
                    requestsMessage += `‚îî üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ù–µ—Ç\n`;
                }
            } else {
                requestsMessage += `‚îî ‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞: 24-48 —á–∞—Å–æ–≤\n`;
            }
            
            requestsMessage += '\n';
        }
        
        const requestsKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üí≥ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É', 'create_withdrawal')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–≤–æ–¥—É', 'withdraw')]
        ]);
        
        await ctx.editMessageText(requestsMessage, {
            parse_mode: 'Markdown',
            reply_markup: requestsKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'my_withdrawals')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–≤–æ–¥—É', 'withdraw')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async function handleApproveWithdrawal(ctx, action) {
    const userId = ctx.from.id;
    const requestId = action.replace('approve_withdrawal_', '');
    const messageId = ctx.callbackQuery?.message?.message_id;
    const chatId = ctx.chat?.id;

    logger.info('üöÄ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –û–î–û–ë–†–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ò', {
        userId,
        requestId,
        messageId,
        chatId,
        chatType: ctx.chat?.type,
        chatUsername: ctx.chat?.username,
        action: action,
        callbackData: ctx.callbackQuery?.data,
        timestamp: new Date().toISOString()
    });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
        await ctx.answerCbQuery('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É...', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫', true);
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
        const result = await dataManager.processWithdrawalRequest(requestId, 'approve', userId, '–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
        
        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            const updatedMessage = `üìã **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –û–î–û–ë–†–ï–ù–ê** ‚úÖ\n\n` +
                `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
                `‚îú üÜî ID: \`${result.request.userId}\`\n` +
                `‚îú üë§ –ò–º—è: ${result.request.firstName}\n` +
                `‚îî üè∑Ô∏è Username: ${result.request.username}\n\n` +
                `üí∞ **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
                `‚îú üÜî ID –∑–∞—è–≤–∫–∏: \`${result.request.id}\`\n` +
                `‚îú üí∞ –°—É–º–º–∞: ${result.request.amount} ‚≠ê Stars\n` +
                `‚îú üìÖ –î–∞—Ç–∞: ${new Date(result.request.createdAt).toLocaleDateString('ru-RU')}\n` +
                `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(result.request.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
                `‚úÖ **–û–¥–æ–±—Ä–µ–Ω–æ:** ${new Date(result.request.processedAt).toLocaleDateString('ru-RU')} ${new Date(result.request.processedAt).toLocaleTimeString('ru-RU')}\n` +
                `üë®‚Äçüíº **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${result.request.comment}`;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            try {
                await ctx.editMessageText(updatedMessage, { parse_mode: 'Markdown' });
                logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ)', {
                    userId,
                    requestId,
                    messageId,
                    chatId
                });
            } catch (editError) {
                logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ)', editError, {
                    userId,
                    requestId,
                    messageId,
                    chatId
                });
                // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await ctx.telegram.sendMessage(result.request.userId, 
                `üéâ **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n` +
                `üìã **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
                `‚îú üÜî ID: \`${result.request.id}\`\n` +
                `‚îú üí∞ –°—É–º–º–∞: ${result.request.amount} ‚≠ê Stars\n` +
                `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–∞\n\n` +
                `‚è∞ **–í—Ä–µ–º—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:** ${new Date(result.request.processedAt).toLocaleDateString('ru-RU')} ${new Date(result.request.processedAt).toLocaleTimeString('ru-RU')}\n\n` +
                `üí° **–ß—Ç–æ –¥–∞–ª—å—à–µ:** –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤`
            );
            
            logger.info('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞', { userId, requestId, adminId: userId });

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!', false);

        } else {
            await ctx.answerCbQuery(`‚ùå ${result.message}`);
            return;
        }

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', error, { userId, requestId });
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
async function handleRejectWithdrawal(ctx, action) {
    const userId = ctx.from.id;
    const requestId = action.replace('reject_withdrawal_', '');
    const messageId = ctx.callbackQuery?.message?.message_id;
    const chatId = ctx.chat?.id;

    logger.info('üö´ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–ö–õ–û–ù–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ò', {
        userId,
        requestId,
        messageId,
        chatId,
        chatType: ctx.chat?.type,
        chatUsername: ctx.chat?.username,
        action: action,
        callbackData: ctx.callbackQuery?.data,
        timestamp: new Date().toISOString()
    });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
        await ctx.answerCbQuery('‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É...', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫', true);
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
        const result = await dataManager.processWithdrawalRequest(requestId, 'reject', userId, '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
        
        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            const updatedMessage = `üìã **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –û–¢–ö–õ–û–ù–ï–ù–ê** ‚ùå\n\n` +
                `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
                `‚îú üÜî ID: \`${result.request.userId}\`\n` +
                `‚îú üë§ –ò–º—è: ${result.request.firstName}\n` +
                `‚îî üè∑Ô∏è Username: ${result.request.username}\n\n` +
                `üí∞ **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
                `‚îú üÜî ID –∑–∞—è–≤–∫–∏: \`${result.request.id}\`\n` +
                `‚îú üí∞ –°—É–º–º–∞: ${result.request.amount} ‚≠ê Stars\n` +
                `‚îú üìÖ –î–∞—Ç–∞: ${new Date(result.request.createdAt).toLocaleDateString('ru-RU')}\n` +
                `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(result.request.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
                `‚ùå **–û—Ç–∫–ª–æ–Ω–µ–Ω–æ:** ${new Date(result.request.processedAt).toLocaleDateString('ru-RU')} ${new Date(result.request.processedAt).toLocaleTimeString('ru-RU')}\n` +
                `üë®‚Äçüíº **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${result.request.comment}\n\n` +
                `üí∞ **–ó–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**`;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            try {
                await ctx.editMessageText(updatedMessage, { parse_mode: 'Markdown' });
                logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)', {
                    userId,
                    requestId,
                    messageId,
                    chatId
                });
            } catch (editError) {
                logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)', editError, {
                    userId,
                    requestId,
                    messageId,
                    chatId
                });
                // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await ctx.telegram.sendMessage(result.request.userId, 
                `‚ùå **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n` +
                `üìã **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
                `‚îú üÜî ID: \`${result.request.id}\`\n` +
                `‚îú üí∞ –°—É–º–º–∞: ${result.request.amount} ‚≠ê Stars\n` +
                `‚îî ‚ùå –°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n` +
                `‚è∞ **–í—Ä–µ–º—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:** ${new Date(result.request.processedAt).toLocaleDateString('ru-RU')} ${new Date(result.request.processedAt).toLocaleTimeString('ru-RU')}\n` +
                `üí¨ **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** ${result.request.comment}\n\n` +
                `üí∞ **–ó–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å**\n\n` +
                `üí° **–ß—Ç–æ –¥–∞–ª—å—à–µ:** –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥`
            );
            
            logger.info('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', { userId, requestId, adminId: userId });

            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', false);

        } else {
            await ctx.answerCbQuery(`‚ùå ${result.message}`);
            return;
        }

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', error, { userId, requestId });
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function handleCheckSubscription(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const subscriptionCheck = await dataManager.checkUserSubscription(userId, null, ctx.telegram);
        
        if (subscriptionCheck.isSubscribed) {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            const successMessage = `‚úÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**\n\n` +
                `üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!\n\n` +
                `üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Magnum Stars!`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
            const userIsAdmin = isAdmin(userId);

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É WebApp –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const webAppButton = userIsAdmin
                ? Markup.button.webApp('Magnum Star - Beta', process.env.WEBAPP_URL || 'https://magnumstarbot.onrender.com')
                : Markup.button.callback('Magnum Star - Beta', 'webapp_coming_soon');

            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            const mainMenuButtons = [
                [Markup.button.callback('üí∞ –ú–∞–π–Ω–µ—Ä—ã', 'miners'), Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
                [Markup.button.callback('üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á', 'activate_key'), webAppButton],
                [Markup.button.callback('‚≠ê –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã', 'withdraw')]
            ];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            if (userIsAdmin) {
                mainMenuButtons.push([Markup.button.callback('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]);
            }
            
            const mainMenu = Markup.inlineKeyboard(mainMenuButtons);
            
            await ctx.editMessageText(successMessage, {
                parse_mode: 'Markdown',
                reply_markup: mainMenu.reply_markup
            });
            
            logger.info('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { userId });
            
        } else {
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const errorMessage = `üöÄ **–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Magnum Stars –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!**\n\n` +
                `üì¢ –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.\n\n` +
                `‚úÖ **–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –∏–≥—Ä—É!**`;
            
            const subscriptionKeyboard = Markup.inlineKeyboard([
                [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'https://t.me/magnumtap')],
                [Markup.button.callback('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'check_subscription')]
            ]);
            
            await ctx.editMessageText(errorMessage, {
                parse_mode: 'Markdown',
                reply_markup: subscriptionKeyboard.reply_markup
            });
            
            logger.info('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', { userId });
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'check_subscription')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'start')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏
async function handleManageTitles(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏', { userId });
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏');
            return;
        }
        
        const manageTitlesMessage = `üëë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏**\n\n` +
            `üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n` +
            `‚îú üëë –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n` +
            `‚îú ‚ùå –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
            `‚îî üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n` +
            `üí° **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;
        
        const manageTitlesKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üëë –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª', 'grant_title')],
            [Markup.button.callback('‚ùå –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª', 'revoke_title')],
            [Markup.button.callback('üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏—Ç—É–ª–æ–≤', 'view_user_titles')],
            [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
        ]);
        
        await ctx.editMessageText(manageTitlesMessage, {
            parse_mode: 'Markdown',
            reply_markup: manageTitlesKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'manage_titles')],
            [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥
async function handleCheckMissedRewards(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', { userId });
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        const startMessage = `‚õèÔ∏è **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥**\n\n` +
            `üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n` +
            `‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\n\n` +
            `üí° –ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞ –º–∞–π–Ω–∏–Ω–≥–∞`;
        
        await ctx.editMessageText(startMessage, {
            parse_mode: 'Markdown'
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
        const result = await dataManager.processAllMissedMiningRewards();
        
        if (result.success) {
            const successMessage = `‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n` +
                `üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n` +
                `‚îú üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.totalUsersProcessed}\n` +
                `‚îú ü™ô Magnum Coins –Ω–∞—á–∏—Å–ª–µ–Ω–æ: ${result.totalCoinsAwarded}\n` +
                `‚îú ‚≠ê Stars –Ω–∞—á–∏—Å–ª–µ–Ω–æ: ${result.totalStarsAwarded}\n` +
                `‚îî ‚è∞ –ú–∏–Ω—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.totalMinutesProcessed}\n\n` +
                `üéâ –í—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!`;
            
            const successKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);
            
            await ctx.editMessageText(successMessage, {
                parse_mode: 'Markdown',
                reply_markup: successKeyboard.reply_markup
            });
            
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { userId, result });
            
        } else {
            const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥**\n\n` +
                `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É\n` +
                `üîç –û—à–∏–±–∫–∞: ${result.error}\n\n` +
                `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
            
            const errorKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'check_missed_rewards')],
                [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
            ]);
            
            await ctx.editMessageText(errorMessage, {
                parse_mode: 'Markdown',
                reply_markup: errorKeyboard.reply_markup
            });
            
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', { userId, error: result.error });
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'check_missed_rewards')],
            [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞
async function handleCreateMinerKey(ctx) {
    const userId = ctx.from.id;

    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞', { userId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
        return;
    }

    const createMinerKeyMessage = `‚õèÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞**\n\n` +
        `üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∫–ª—é—á–∞:\n\n` +
        `‚õèÔ∏è **–ù–æ–≤–∏—á–æ–∫**\n` +
        `‚îú üí∞ –¶–µ–Ω–∞: 100 ü™ô Magnum Coins\n` +
        `‚îú ‚ö° –î–æ—Ö–æ–¥: 1 ü™ô/–º–∏–Ω\n` +
        `‚îî üéØ –†–µ–¥–∫–æ—Å—Ç—å: –û–±—ã—á–Ω—ã–π\n\n` +
        `‚≠ê **–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º**\n` +
        `‚îú üí∞ –¶–µ–Ω–∞: 100 ‚≠ê Stars\n` +
        `‚îú ‚ö° –î–æ—Ö–æ–¥: 0.01 ‚≠ê/–º–∏–Ω\n` +
        `‚îî üéØ –†–µ–¥–∫–æ—Å—Ç—å: –†–µ–¥–∫–∏–π\n\n` +
        `üí° **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞–π–Ω–µ—Ä–∞:**`;

    const createMinerKeyKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚õèÔ∏è –ù–æ–≤–∏—á–æ–∫ (100 ü™ô)', 'miner_key_novice')],
        [Markup.button.callback('‚≠ê –ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º (100 ‚≠ê)', 'miner_key_star_path')],
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);

    await ctx.editMessageText(createMinerKeyMessage, {
        parse_mode: 'Markdown',
        reply_markup: createMinerKeyKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∫–ª—é—á–∞
async function handleMinerKeyType(ctx, minerType) {
    const userId = ctx.from.id;

    logger.info('–í—ã–±–æ—Ä —Ç–∏–ø–∞ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –∫–ª—é—á–∞', { userId, minerType });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏');
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞
    userStates.set(userId, {
        state: 'creating_miner_key',
        currentStep: 'max_uses',
        data: {
            minerType: minerType,
            maxUses: 1
        },
        timestamp: Date.now()
    });

    logger.userState(userId, 'set', { state: 'creating_miner_key' });

    const displayMinerName = minerType === 'novice' ? '–ù–æ–≤–∏—á–æ–∫' : '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º';
    const displayPriceSymbol = minerType === 'novice' ? 'ü™ô' : '‚≠ê';
    const displayRewardSymbol = minerType === 'novice' ? 'ü™ô' : '‚≠ê';

    const message = `‚õèÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞**\n\n` +
        `üéØ –¢–∏–ø –º–∞–π–Ω–µ—Ä–∞: ${displayMinerName}\n` +
        `üí∞ –¶–µ–Ω–∞ –º–∞–π–Ω–µ—Ä–∞: 100 ${displayPriceSymbol}\n` +
        `‚ö° –î–æ—Ö–æ–¥: ${minerType === 'novice' ? '1' : '0.01'} ${displayRewardSymbol}/–º–∏–Ω\n\n` +
        `üîÑ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: 1`;

    const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'admin_panel')]
    ]);

    await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleMinerKeyCreation(ctx, text) {
    const userId = ctx.from.id;

    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞', { userId, text });

    const userState = userStates.get(userId);
    if (!userState || userState.state !== 'creating_miner_key') return;

    try {
        if (userState.currentStep === 'max_uses') {
            const maxUses = parseInt(text);
            if (isNaN(maxUses) || maxUses <= 0) {
                await ctx.reply('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0');
                return;
            }

            userState.data.maxUses = maxUses;

            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –º–∞–π–Ω–µ—Ä–∞
            const { generateKey } = require('../utils/keys');
            const key = generateKey();

            const keyData = {
                key: key,
                type: 'miner',
                minerType: userState.data.minerType,
                maxUses: maxUses,
                createdBy: userId,
                createdAt: new Date()
            };

            try {
                const createResult = await dataManager.createMinerKey(keyData);

                if (createResult.success) {
                    const minerDisplayName = userState.data.minerType === 'novice' ? '–ù–æ–≤–∏—á–æ–∫' : '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º';
                    const successPriceSymbol = userState.data.minerType === 'novice' ? 'ü™ô' : '‚≠ê';
                    const successRewardSymbol = userState.data.minerType === 'novice' ? 'ü™ô' : '‚≠ê';

                    const successMessage = `‚úÖ **–ö–ª—é—á –º–∞–π–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n` +
                        `üîë –ö–ª—é—á: \`${key}\`\n` +
                        `‚õèÔ∏è –ú–∞–π–Ω–µ—Ä: ${minerDisplayName}\n` +
                        `üí∞ –¶–µ–Ω–∞: 100 ${successPriceSymbol}\n` +
                        `‚ö° –î–æ—Ö–æ–¥: ${userState.data.minerType === 'novice' ? '1' : '0.01'} ${successRewardSymbol}/–º–∏–Ω\n` +
                        `üîÑ –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: ${maxUses}\n\n` +
                        `üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"`;

                    const keyboard = Markup.inlineKeyboard([
                        [Markup.button.callback('‚õèÔ∏è –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∫–ª—é—á –º–∞–π–Ω–µ—Ä–∞', 'create_miner_key')],
                        [Markup.button.callback('üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', 'admin_panel')]
                    ]);

                    await ctx.reply(successMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: keyboard.reply_markup
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
                    const chatMinerName = userState.data.minerType === 'novice' ? '–ù–æ–≤–∏—á–æ–∫' : '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º';
                    const chatPriceSymbol = userState.data.minerType === 'novice' ? 'ü™ô' : '‚≠ê';
                    const chatRewardSymbol = userState.data.minerType === 'novice' ? 'ü™ô' : '‚≠ê';
                    const incomeRate = userState.data.minerType === 'novice' ? '1' : '0.01';

                    const chatMessage = `üéâ **–ù–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω!**\n\n` +
                        `üîë **–ö–æ–¥:** \`${key}\`\n` +
                        `üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** ‚õèÔ∏è ${chatMinerName} (100 ${chatPriceSymbol})\n` +
                        `üîÑ **–î–æ—Å—Ç—É–ø–Ω–æ:** ${maxUses} –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n` +
                        `‚ö° –£—Å–ø–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –≤ –±–æ—Ç–µ –∏ –∑–∞–±–µ—Ä–∏ –±–æ–Ω—É—Å –ø–µ—Ä–≤—ã–º!`;

                    const { sendChannelNotification } = require('../middleware/chatFilter');
                    await sendChannelNotification(ctx, chatMessage);
                } else {
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                }

            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', error, { userId, keyData });
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            }

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.delete(userId);

        }

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞', error, { userId, text });
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞');
        userStates.delete(userId);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
async function handleGrantTitle(ctx) {
    const userId = ctx.from.id;

    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–∞', { userId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–æ–≤');
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(userId, {
        state: 'granting_title',
        currentStep: 'waiting_user_id',
        timestamp: Date.now()
    });

    const grantTitleMessage = `üëë **–í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞**\n\n` +
        `üéØ **–®–∞–≥ 1: –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: 123456789\n\n` +
        `üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç:**`;

    const grantTitleKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'titles')]
    ]);

    await ctx.editMessageText(grantTitleMessage, {
        parse_mode: 'Markdown',
        reply_markup: grantTitleKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–æ—Ä–∞ —Ç–∏—Ç—É–ª–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
async function handleRevokeTitle(ctx) {
    const userId = ctx.from.id;

    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–æ—Ä–∞ —Ç–∏—Ç—É–ª–∞', { userId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–±–æ—Ä–∞ —Ç–∏—Ç—É–ª–æ–≤');
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(userId, {
        state: 'revoking_title',
        currentStep: 'waiting_user_id',
        timestamp: Date.now()
    });

    const revokeTitleMessage = `‚ùå **–ó–∞–±–æ—Ä —Ç–∏—Ç—É–ª–∞**\n\n` +
        `üéØ **–®–∞–≥ 1: –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: 123456789\n\n` +
        `üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç:**`;

    const revokeTitleKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'titles')]
    ]);

    await ctx.editMessageText(revokeTitleMessage, {
        parse_mode: 'Markdown',
        reply_markup: revokeTitleKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
async function handleViewUserTitles(ctx) {
    const userId = ctx.from.id;

    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.set(userId, {
        state: 'viewing_user_titles',
        currentStep: 'waiting_user_id',
        timestamp: Date.now()
    });

    const viewTitlesMessage = `üìä **–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n` +
        `üéØ **–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n` +
        `üí° –ü—Ä–∏–º–µ—Ä: 123456789\n\n` +
        `üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç:**`;

    const viewTitlesKeyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'titles')]
    ]);

    await ctx.editMessageText(viewTitlesMessage, {
        parse_mode: 'Markdown',
        reply_markup: viewTitlesKeyboard.reply_markup
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏—Ç—É–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
async function handleTitlesStats(ctx) {
    const userId = ctx.from.id;

    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏—Ç—É–ª–æ–≤', { userId });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if (!isAdmin(userId)) {
        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏—Ç—É–ª–æ–≤');
        return;
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏—Ç—É–ª–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
        const statsMessage = `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤**\n\n` +
            `üîß **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n` +
            `üìä **–ë—É–¥—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
            `‚îú üëë –í—Å–µ–≥–æ —Ç–∏—Ç—É–ª–æ–≤ –≤—ã–¥–∞–Ω–æ: -\n` +
            `‚îú üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–∏—Ç—É–ª–∞–º–∏: -\n` +
            `‚îú üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏—Ç—É–ª—ã: -\n` +
            `‚îî üìÖ –¢–∏—Ç—É–ª—ã –∑–∞ –º–µ—Å—è—Ü: -\n\n` +
            `üöÄ **–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!**`;

        const statsKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'titles_stats')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏—Ç—É–ª–∞–º', 'titles')]
        ]);

        await ctx.editMessageText(statsMessage, {
            parse_mode: 'Markdown',
            reply_markup: statsKeyboard.reply_markup
        });

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏—Ç—É–ª–æ–≤', error, { userId });

        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏—Ç—É–ª–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ`;

        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'titles_stats')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏—Ç—É–ª–∞–º', 'titles')]
        ]);

        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ —Ç–∏—Ç—É–ª–æ–≤
async function handleTitles(ctx) {
    const userId = ctx.from.id;

    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ —Ç–∏—Ç—É–ª–æ–≤', { userId });

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
            const comingSoonMessage = `üëë **–¢–∏—Ç—É–ª—ã - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!**\n\n` +
                `üîß **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–∏—Ç—É–ª–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ**\n\n` +
                `üéØ **–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–∏—Ç—É–ª—ã?**\n` +
                `‚îú üëë –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–≤–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
                `‚îú üèÜ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç —É—Ä–æ–≤–µ–Ω—å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∏–≥—Ä–µ\n` +
                `‚îú üíé –î–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏\n` +
                `‚îî üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã\n\n` +
                `üöÄ **–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!**\n` +
                `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ @magnumtap`;

            const comingSoonKeyboard = Markup.inlineKeyboard([
                [Markup.button.url('üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏', 'https://t.me/magnumtap')],
                [Markup.button.callback('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
                [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
            ]);

            await ctx.editMessageText(comingSoonMessage, {
                parse_mode: 'Markdown',
                reply_markup: comingSoonKeyboard.reply_markup
            });

            logger.info('–ü–æ–∫–∞–∑–∞–Ω —ç–∫—Ä–∞–Ω "–¢–∏—Ç—É–ª—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });
            return;
        }

        // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏
        const titlesMessage = `üëë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–∞–º–∏**\n\n` +
            `üéØ **–ê–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∏—Ç—É–ª–æ–≤:**\n\n` +
            `üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n` +
            `‚îú üëë –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n` +
            `‚îú ‚ùå –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
            `‚îú üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
            `‚îú üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á —Ç–∏—Ç—É–ª–∞\n` +
            `‚îî üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏—Ç—É–ª–æ–≤\n\n` +
            `üí° **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**`;

        const titlesKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üëë –í—ã–¥–∞—Ç—å —Ç–∏—Ç—É–ª', 'grant_title')],
            [Markup.button.callback('‚ùå –ó–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª', 'revoke_title')],
            [Markup.button.callback('üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏—Ç—É–ª–æ–≤', 'view_user_titles')],
            [Markup.button.callback('üîë –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á —Ç–∏—Ç—É–ª–∞', 'create_title_key')],
            [Markup.button.callback('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'titles_stats')],
            [Markup.button.callback('üîô –ü—Ä–æ—Ñ–∏–ª—å', 'profile')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);

        await ctx.editMessageText(titlesMessage, {
            parse_mode: 'Markdown',
            reply_markup: titlesKeyboard.reply_markup
        });

        logger.info('–ü–æ–∫–∞–∑–∞–Ω –∞–¥–º–∏–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∏—Ç—É–ª–æ–≤', { userId });

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ —Ç–∏—Ç—É–ª–æ–≤', error, { userId });

        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏—Ç—É–ª–æ–≤**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∏—Ç—É–ª–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;

        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'titles')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);

        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function handleReferrals(ctx) {
    const userId = ctx.from.id;

    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', { userId });

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const referralStats = await getReferralStats(userId);

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const referralCode = await dataManager.getUserReferralCode(userId);

        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
        const referralsMessage = `üë• **–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã**\n\n` +
            `üîó **–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:** \`${referralCode}\`\n\n` +
            `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n` +
            `‚îú üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.totalReferrals}\n` +
            `‚îú ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${referralStats.activeReferrals}\n` +
            `‚îú üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: ${referralStats.totalEarned.stars} ‚≠ê, ${referralStats.totalEarned.coins} ü™ô\n` +
            `‚îî üéØ –£—Ä–æ–≤–µ–Ω—å: ${referralStats.level}\n\n` +
            `üéÅ **–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:**\n` +
            `‚îú üí∞ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç: 1000 ü™ô Magnum Coins\n` +
            `‚îî ‚≠ê –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: 5 ‚≠ê Stars + 1000 ü™ô Magnum Coins\n\n` +
            `üìã **–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π:**\n` +
            `1Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n` +
            `2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º: https://t.me/MagnumStarBot?start=${referralCode}\n` +
            `3Ô∏è‚É£ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!`;

        const referralsKeyboard = Markup.inlineKeyboard([
            [Markup.button.switchToChat('üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', `https://t.me/MagnumStarBot?start=${referralCode}`)],
            [Markup.button.callback('üìä –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', 'top_referrers')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);

        await ctx.editMessageText(referralsMessage, {
            parse_mode: 'Markdown',
            reply_markup: referralsKeyboard.reply_markup
        });

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', error, { userId });

        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;

        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'referrals')],
            [Markup.button.callback('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'main_menu')]
        ]);

        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}




// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã
async function handleAttachPaymentScreenshot(ctx, action) {
    const userId = ctx.from.id;
    const requestId = action.replace('attach_payment_screenshot_', '');
    const messageId = ctx.callbackQuery?.message?.message_id;
    const chatId = ctx.chat?.id;

    logger.info('üì∏ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–Ø –°–ö–†–ò–ù–®–û–¢–ê –í–´–ü–õ–ê–¢–´', {
        userId,
        requestId,
        messageId,
        chatId,
        chatType: ctx.chat?.type,
        chatUsername: ctx.chat?.username,
        action: action,
        callbackData: ctx.callbackQuery?.data,
        timestamp: new Date().toISOString()
    });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
        await ctx.answerCbQuery('üì∏ –ì–æ—Ç–æ–≤–∏–º —Ñ–æ—Ä–º—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤—ã–ø–ª–∞—Ç', true);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        const withdrawalRequest = await dataManager.db.collection('withdrawals').findOne({ id: requestId });
        
        if (!withdrawalRequest) {
            await ctx.answerCbQuery('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', true);
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        const screenshotMessage = `üì∏ **–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã**\n\n` +
            `üìã **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
            `‚îú üÜî ID: \`${withdrawalRequest.id}\`\n` +
            `‚îú üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${withdrawalRequest.firstName}\n` +
            `‚îú üí∞ –°—É–º–º–∞: ${withdrawalRequest.amount} ‚≠ê Stars\n` +
            `‚îî üìÖ –î–∞—Ç–∞: ${new Date(withdrawalRequest.createdAt).toLocaleDateString('ru-RU')}\n\n` +
            `üì∏ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n` +
            `1Ô∏è‚É£ –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã\n` +
            `2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç\n` +
            `3Ô∏è‚É£ –°–∫—Ä–∏–Ω—à–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ\n\n` +
            `üí° **–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤—ã–ø–ª–∞—Ç!`;
        
        const screenshotKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_screenshot_${requestId}`)]
        ]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        try {
            await ctx.editMessageText(screenshotMessage, {
                parse_mode: 'Markdown',
                reply_markup: screenshotKeyboard.reply_markup
            });
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
            const { userStates } = require('./callback');
            userStates.set(userId, {
                state: 'waiting_for_payment_screenshot',
                currentStep: 'waiting_screenshot',
                data: {
                    requestId: requestId,
                    withdrawalRequest: withdrawalRequest
                },
                timestamp: Date.now()
            });
            
            logger.info('–ê–¥–º–∏–Ω –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã', { 
                userId, 
                requestId, 
                state: 'waiting_for_payment_screenshot' 
            });
            
        } catch (editError) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (—Å–∫—Ä–∏–Ω—à–æ—Ç)', editError, {
                userId,
                requestId,
                messageId,
                chatId
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
            await ctx.reply(screenshotMessage, {
                parse_mode: 'Markdown',
                reply_markup: screenshotKeyboard.reply_markup
            });
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã', error, { userId, requestId });
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ä–º—ã –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
async function handleCancelScreenshot(ctx, action) {
    const userId = ctx.from.id;
    const requestId = action.replace('cancel_screenshot_', '');

    logger.info('‚ùå –û–¢–ú–ï–ù–ê –ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–Ø –°–ö–†–ò–ù–®–û–¢–ê –í–´–ü–õ–ê–¢–´', {
        userId,
        requestId,
        timestamp: new Date().toISOString()
    });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        const withdrawalRequest = await dataManager.db.collection('withdrawals').findOne({ id: requestId });
        
        if (!withdrawalRequest) {
            return;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
        const originalMessage = `üìã **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥**\n\n` +
            `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
            `‚îú üÜî ID: \`${withdrawalRequest.userId}\`\n` +
            `‚îú üë§ –ò–º—è: ${withdrawalRequest.firstName}\n` +
            `‚îî üè∑Ô∏è Username: ${withdrawalRequest.username}\n\n` +
            `üí∞ **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
            `‚îú üÜî ID –∑–∞—è–≤–∫–∏: ‚Ññ${withdrawalRequest.id}\n` +
            `‚îú üí∞ –°—É–º–º–∞: ${withdrawalRequest.amount} ‚≠ê Stars\n` +
            `‚îú üìÖ –î–∞—Ç–∞: ${new Date(withdrawalRequest.createdAt).toLocaleDateString('ru-RU')}\n` +
            `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(withdrawalRequest.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
            `üéØ **–î–µ–π—Å—Ç–≤–∏—è:**`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤–∏–¥–∏–º—É—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
        const originalKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
                        callback_data: `approve_withdrawal_${withdrawalRequest.id}`,
                        web_app: undefined
                    },
                    {
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                        callback_data: `reject_withdrawal_${withdrawalRequest.id}`,
                        web_app: undefined
                    }
                ],
                [
                    {
                        text: 'üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω –≤—ã–ø–ª–∞—Ç—ã',
                        callback_data: `attach_payment_screenshot_${withdrawalRequest.id}`,
                        web_app: undefined
                    }
                ]
            ]
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        try {
            await ctx.editMessageText(originalMessage, {
                parse_mode: 'Markdown',
                reply_markup: originalKeyboard
            });
        } catch (editError) {
            logger.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', editError, { userId, requestId });
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        const { userStates } = require('./callback');
        userStates.delete(userId);
        
        logger.info('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—á–∏—â–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', { userId, requestId });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞', error, { userId, requestId });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function handleCompleteWithdrawal(ctx, action) {
    const userId = ctx.from.id;
    const requestId = action.replace('complete_withdrawal_', '');

    logger.info('‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î', {
        userId,
        requestId,
        timestamp: new Date().toISOString()
    });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        await ctx.answerCbQuery('‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        const withdrawalRequest = await dataManager.db.collection('withdrawals').findOne({ id: requestId });
        
        if (!withdrawalRequest) {
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        await dataManager.db.collection('withdrawals').updateOne(
            { id: requestId },
            { 
                $set: { 
                    status: 'completed',
                    completedAt: new Date(),
                    completedBy: userId
                }
            }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        const finalMessage = `üìã **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ó–ê–í–ï–†–®–ï–ù–ê** üéâ\n\n` +
            `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
            `‚îú üÜî ID: \`${withdrawalRequest.userId}\`\n` +
            `‚îú üë§ –ò–º—è: ${withdrawalRequest.firstName}\n` +
            `‚îî üè∑Ô∏è Username: ${withdrawalRequest.username}\n\n` +
            `üí∞ **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
            `‚îú üÜî ID –∑–∞—è–≤–∫–∏: \`${withdrawalRequest.id}\`\n` +
            `‚îú üí∞ –°—É–º–º–∞: ${withdrawalRequest.amount} ‚≠ê Stars\n` +
            `‚îú üìÖ –î–∞—Ç–∞: ${new Date(withdrawalRequest.createdAt).toLocaleDateString('ru-RU')}\n` +
            `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(withdrawalRequest.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
            `üì∏ **–°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–ª–∞—Ç—ã:** ‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω\n` +
            `‚úÖ **–°—Ç–∞—Ç—É—Å:** –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n` +
            `‚è∞ **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}\n` +
            `üë®‚Äçüíº **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
            `üéâ **–í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**`;
        
        try {
            await ctx.editMessageText(finalMessage, { parse_mode: 'Markdown' });
        } catch (editError) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', editError, { userId, requestId });
        }
        
        logger.info('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { userId, requestId });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', error, { userId, requestId });
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async function handleSupport(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', { userId });
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { dataManager } = require('../utils/dataManager');
        const activeTickets = await dataManager.db.collection('support_tickets')
            .find({ userId: Number(userId), status: { $in: ['open', 'in_progress'] } })
            .sort({ createdAt: -1 })
            .toArray();
        
        const supportMessage = `üÜò **–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Magnum Stars**\n\n` +
            `üí¨ **–ö–∞–∫ –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å?**\n\n` +
            `üìã **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:** ${activeTickets.length}\n\n` +
            `üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n` +
            `‚îú üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç\n` +
            `‚îú üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã\n` +
            `‚îî üìö FAQ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n` +
            `üí° **–°–æ–≤–µ—Ç:** –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ, –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ`;
        
        const supportKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', 'create_ticket')],
            [Markup.button.callback('üìã –ú–æ–∏ —Ç–∏–∫–µ—Ç—ã', 'my_tickets')],
            [Markup.button.callback('üìö FAQ', 'support_faq')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')]
        ]);
        
        await ctx.editMessageText(supportMessage, {
            parse_mode: 'Markdown',
            reply_markup: supportKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', error, { userId });
        
        const errorMessage = `‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n` +
            `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n` +
            `üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`;
        
        const errorKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', 'support')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é', 'profile')]
        ]);
        
        await ctx.editMessageText(errorMessage, {
            parse_mode: 'Markdown',
            reply_markup: errorKeyboard.reply_markup
        });
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async function handleCreateTicket(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', { userId });
    
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        const { userStates } = require('./callback');
        userStates.set(userId, {
            state: 'creating_support_ticket',
            currentStep: 'waiting_description',
            data: {
                description: '',
                attachments: []
            },
            timestamp: Date.now()
        });
        
        const createTicketMessage = `üìù **–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n` +
            `üí¨ **–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:**\n\n` +
            `üí° **–°–æ–≤–µ—Ç—ã:**\n` +
            `‚îú üìù –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –ø–æ–¥—Ä–æ–±–Ω—ã\n` +
            `‚îú üñºÔ∏è –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã\n` +
            `‚îî ‚è∞ –û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n` +
            `üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ —á–∞—Ç:**`;
        
        const createTicketKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üîô –û—Ç–º–µ–Ω–∞', 'support')]
        ]);
        
        await ctx.editMessageText(createTicketMessage, {
            parse_mode: 'Markdown',
            reply_markup: createTicketKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', error, { userId });
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function handleMyTickets(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });
    
    try {
        const { dataManager } = require('../utils/dataManager');
        const tickets = await dataManager.db.collection('support_tickets')
            .find({ userId: Number(userId) })
            .sort({ createdAt: -1 })
            .toArray();
        
        if (tickets.length === 0) {
            const noTicketsMessage = `üìã **–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã**\n\n` +
                `‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤\n\n` +
                `üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–∏–∫–µ—Ç, –Ω–∞–∂–∞–≤ "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"`;
            
            const noTicketsKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', 'create_ticket')],
                [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ', 'support')]
            ]);
            
            await ctx.editMessageText(noTicketsMessage, {
                parse_mode: 'Markdown',
                reply_markup: noTicketsKeyboard.reply_markup
            });
            return;
        }
        
        let ticketsMessage = `üìã **–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã**\n\n`;
        
        for (const ticket of tickets) {
            const status = ticket.status === 'open' ? 'üÜï –û—Ç–∫—Ä—ã—Ç' : 
                          ticket.status === 'in_progress' ? '‚è≥ –í —Ä–∞–±–æ—Ç–µ' : 
                          ticket.status === 'closed' ? '‚úÖ –ó–∞–∫—Ä—ã—Ç' : '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            const date = new Date(ticket.createdAt).toLocaleDateString('ru-RU');
            const time = new Date(ticket.createdAt).toLocaleTimeString('ru-RU');
            
            ticketsMessage += `üìã **–¢–∏–∫–µ—Ç #${ticket.id}**\n` +
                `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description.substring(0, 50)}${ticket.description.length > 50 ? '...' : ''}\n` +
                `‚îú üìÖ –î–∞—Ç–∞: ${date} ${time}\n` +
                `‚îú üìä –°—Ç–∞—Ç—É—Å: ${status}\n`;
            
            if (ticket.status === 'closed') {
                const closedDate = new Date(ticket.closedAt).toLocaleDateString('ru-RU');
                const closedTime = new Date(ticket.closedAt).toLocaleTimeString('ru-RU');
                ticketsMessage += `‚îî ‚è∞ –ó–∞–∫—Ä—ã—Ç: ${closedDate} ${closedTime}\n`;
            } else {
                ticketsMessage += `‚îî ‚è∞ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞\n`;
            }
            
            ticketsMessage += '\n';
        }
        
        const ticketsKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç', 'create_ticket')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ', 'support')]
        ]);
        
        await ctx.editMessageText(ticketsMessage, {
            parse_mode: 'Markdown',
            reply_markup: ticketsKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤', error, { userId });
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∏–∫–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// FAQ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async function handleSupportFAQ(ctx) {
    const userId = ctx.from.id;
    
    logger.info('–ü—Ä–æ—Å–º–æ—Ç—Ä FAQ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', { userId });
    
    try {
        const faqMessage = `üìö **FAQ - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n` +
            `‚ùì **–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç?**\n` +
            `‚îú üìù –ù–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"\n` +
            `‚îú üí¨ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n` +
            `‚îî üñºÔ∏è –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n\n` +
            `‚ùì **–°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞?**\n` +
            `‚îú ‚è∞ –û–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n` +
            `‚îú üöÄ –í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –±—ã—Å—Ç—Ä–µ–µ\n` +
            `‚îî üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n` +
            `‚ùì **–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ —Ç–∏–∫–µ—Ç –Ω–µ —Ä–µ—à–µ–Ω?**\n` +
            `‚îú üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–∏–∫–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n` +
            `‚îú üñºÔ∏è –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã\n` +
            `‚îî üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n\n` +
            `‚ùì **–ö–∞–∫ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç?**\n` +
            `‚îú ‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä–æ–µ—Ç —Ç–∏–∫–µ—Ç\n` +
            `‚îú üí¨ –ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã\n` +
            `‚îî üìã –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ`;
        
        const faqKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üìù –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç', 'create_ticket')],
            [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ', 'support')]
        ]);
        
        await ctx.editMessageText(faqMessage, {
            parse_mode: 'Markdown',
            reply_markup: faqKeyboard.reply_markup
        });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ FAQ', error, { userId });
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –í–∑—è—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É
async function handleTakeTicket(ctx, action) {
    const userId = ctx.from.id;
    const ticketId = action.replace('take_ticket_', '');

    logger.info('üë®‚Äçüíº –í–∑—è—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É', { userId, ticketId });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        await ctx.answerCbQuery('üë®‚Äçüíº –¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        const { dataManager } = require('../utils/dataManager');
        const ticket = await dataManager.db.collection('support_tickets').findOne({ id: ticketId });
        
        if (!ticket) {
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
        await dataManager.db.collection('support_tickets').updateOne(
            { id: ticketId },
            { 
                $set: { 
                    status: 'in_progress',
                    assignedTo: userId,
                    assignedAt: new Date(),
                    updatedAt: new Date()
                }
            }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        const updatedMessage = `üÜò **–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –í –†–ê–ë–û–¢–ï** ‚è≥\n\n` +
            `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
            `‚îú üÜî ID: \`${ticket.userId}\`\n` +
            `‚îú üë§ –ò–º—è: ${ticket.firstName}\n` +
            `‚îî üè∑Ô∏è Username: ${ticket.username ? `@${ticket.username}` : '@username'}\n\n` +
            `üìã **–î–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞:**\n` +
            `‚îú üÜî ID —Ç–∏–∫–µ—Ç–∞: \`${ticket.id}\`\n` +
            `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description.substring(0, 200)}${ticket.description.length > 200 ? '...' : ''}\n` +
            `‚îú üìÖ –î–∞—Ç–∞: ${new Date(ticket.createdAt).toLocaleDateString('ru-RU')}\n` +
            `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(ticket.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
            `üë®‚Äçüíº **–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É:** ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}\n` +
            `üë§ **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
            `üí¨ **–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç**`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤–∏–¥–∏–º—É—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
        const updatedKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç',
                        callback_data: `reply_ticket_${ticketId}`,
                        web_app: undefined
                    }
                ],
                [
                    {
                        text: '‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
                        callback_data: `close_ticket_${ticketId}`,
                        web_app: undefined
                    }
                ]
            ]
        };
        
        try {
            await ctx.editMessageText(updatedMessage, {
                parse_mode: 'Markdown',
                reply_markup: updatedKeyboard
            });
        } catch (editError) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ', editError, { userId, ticketId });
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.telegram.sendMessage(ticket.userId, 
            `‚è≥ **–í–∞—à —Ç–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!**\n\n` +
            `üìã **–î–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞:**\n` +
            `‚îú üÜî ID: \`${ticket.id}\`\n` +
            `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description.substring(0, 100)}${ticket.description.length > 100 ? '...' : ''}\n` +
            `‚îî ‚è≥ –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ\n\n` +
            `üë®‚Äçüíº **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º**\n` +
            `‚è∞ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`
        );
        
        logger.info('–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É', { userId, ticketId });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É', error, { userId, ticketId });
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
async function handleCloseTicket(ctx, action) {
    const userId = ctx.from.id;
    const ticketId = action.replace('close_ticket_', '');

    logger.info('‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞', { userId, ticketId });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        await ctx.answerCbQuery('‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        const { dataManager } = require('../utils/dataManager');
        const ticket = await dataManager.db.collection('support_tickets').updateOne(
            { id: ticketId },
            { 
                $set: { 
                    status: 'closed',
                    closedAt: new Date(),
                    closedBy: userId,
                    updatedAt: new Date()
                }
            }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        const finalMessage = `üÜò **–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –ó–ê–ö–†–´–¢** ‚úÖ\n\n` +
            `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
            `‚îú üÜî ID: \`${ticket.userId}\`\n` +
            `‚îú üë§ –ò–º—è: ${ticket.firstName}\n` +
            `‚îî üè∑Ô∏è Username: ${ticket.username ? `@${ticket.username}` : '@username'}\n\n` +
            `üìã **–î–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞:**\n` +
            `‚îú üÜî ID —Ç–∏–∫–µ—Ç–∞: \`${ticket.id}\`\n` +
            `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description.substring(0, 200)}${ticket.description.length > 200 ? '...' : ''}\n` +
            `‚îú üìÖ –î–∞—Ç–∞: ${new Date(ticket.createdAt).toLocaleDateString('ru-RU')}\n` +
            `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(ticket.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
            `‚úÖ **–ó–∞–∫—Ä—ã—Ç:** ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}\n` +
            `üë®‚Äçüíº **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
            `üéâ **–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω!**`;
        
        try {
            await ctx.editMessageText(finalMessage, { parse_mode: 'Markdown' });
        } catch (editError) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', editError, { userId, ticketId });
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.telegram.sendMessage(ticket.userId, 
            `‚úÖ **–í–∞—à —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç!**\n\n` +
            `üìã **–î–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞:**\n` +
            `‚îú üÜî ID: \`${ticket.id}\`\n` +
            `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description.substring(0, 100)}${ticket.description.length > 100 ? '...' : ''}\n` +
            `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç\n\n` +
            `üéâ **–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!**\n` +
            `üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç`
        );
        
        logger.info('–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç', { userId, ticketId });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞', error, { userId, ticketId });
    }
}

// –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async function handleReplyTicket(ctx, action) {
    const userId = ctx.from.id;
    const ticketId = action.replace('reply_ticket_', '');

    logger.info('üí¨ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', { userId, ticketId });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        await ctx.answerCbQuery('üí¨ –ì–æ—Ç–æ–≤–∏–º —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞...', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        const { dataManager } = require('../utils/dataManager');
        const ticket = await dataManager.db.collection('support_tickets').findOne({ id: ticketId });
        
        if (!ticket) {
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const replyMessage = `üí¨ **–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n` +
            `üìã **–î–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞:**\n` +
            `‚îú üÜî ID: \`${ticket.id}\`\n` +
            `‚îú üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ticket.firstName}\n` +
            `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description.substring(0, 100)}${ticket.description.length > 100 ? '...' : ''}\n` +
            `‚îî üìÖ –î–∞—Ç–∞: ${new Date(ticket.createdAt).toLocaleDateString('ru-RU')}\n\n` +
            `üí¨ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n` +
            `1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n` +
            `2Ô∏è‚É£ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n` +
            `3Ô∏è‚É£ –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n` +
            `üí° **–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç!`;
        
        const replyKeyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `cancel_reply_${ticketId}`)]
        ]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        try {
            await ctx.editMessageText(replyMessage, {
                parse_mode: 'Markdown',
                reply_markup: replyKeyboard.reply_markup
            });
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
            const { userStates } = require('./callback');
            userStates.set(userId, {
                state: 'replying_to_ticket',
                currentStep: 'waiting_reply',
                data: {
                    ticketId: ticketId,
                    ticketData: ticket
                },
                timestamp: Date.now()
            });
            
            logger.info('–ê–¥–º–∏–Ω –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç', { 
                userId, 
                ticketId, 
                state: 'replying_to_ticket' 
            });
            
        } catch (editError) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (–æ—Ç–≤–µ—Ç)', editError, {
                userId,
                ticketId
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
            await ctx.reply(replyMessage, {
                parse_mode: 'Markdown',
                reply_markup: replyKeyboard.reply_markup
            });
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç', error, { userId, ticketId });
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ä–º—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
    }
}

// –û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
async function handleCancelReply(ctx, action) {
    const userId = ctx.from.id;
    const ticketId = action.replace('cancel_reply_', '');

    logger.info('‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç', { userId, ticketId });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        await ctx.answerCbQuery('‚ùå –û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω', false);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if (!isAdmin(userId)) {
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        const { dataManager } = require('../utils/dataManager');
        const ticket = await dataManager.db.collection('support_tickets').findOne({ id: ticketId });
        
        if (!ticket) {
            return;
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∏–∫–µ—Ç–æ–º
        const originalMessage = `üÜò **–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –í –†–ê–ë–û–¢–ï** ‚è≥\n\n` +
            `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
            `‚îú üÜî ID: \`${ticket.userId}\`\n` +
            `‚îú üë§ –ò–º—è: ${ticket.firstName}\n` +
            `‚îî üè∑Ô∏è Username: ${ticket.username ? `@${ticket.username}` : '@username'}\n\n` +
            `üìã **–î–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞:**\n` +
            `‚îú üÜî ID —Ç–∏–∫–µ—Ç–∞: \`${ticket.id}\`\n` +
            `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description.substring(0, 200)}${ticket.description.length > 200 ? '...' : ''}\n` +
            `‚îú üìÖ –î–∞—Ç–∞: ${new Date(ticket.createdAt).toLocaleDateString('ru-RU')}\n` +
            `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(ticket.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
            `üë®‚Äçüíº **–í–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É:** ${new Date(ticket.assignedAt).toLocaleDateString('ru-RU')} ${new Date(ticket.assignedAt).toLocaleTimeString('ru-RU')}\n` +
            `üë§ **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
            `üí¨ **–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç**`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤–∏–¥–∏–º—É—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
        const originalKeyboard = {
            inline_keyboard: [
                [
                    {
                        text: 'üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç',
                        callback_data: `reply_ticket_${ticket.id}`,
                        web_app: undefined
                    }
                ],
                [
                    {
                        text: '‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
                        callback_data: `close_ticket_${ticket.id}`,
                        web_app: undefined
                    }
                ]
            ]
        };
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        try {
            await ctx.editMessageText(originalMessage, {
                parse_mode: 'Markdown',
                reply_markup: originalKeyboard
            });
        } catch (editError) {
            logger.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è', editError, { userId, ticketId });
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        const { userStates } = require('./callback');
        userStates.delete(userId);
        
        logger.info('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ—á–∏—â–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', { userId, ticketId });
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç', error, { userId, ticketId });
    }
}

module.exports = {
    callbackHandler,
    updateLastBotMessage,
    getLastBotMessage,
    handleKeyCreation,
    handleTitleKeyCreation,
    handleMinerKeyCreation,
    handleTitles,
    handleGrantTitle,
    handleRevokeTitle,
    handleViewUserTitles,
    handleTitlesStats,
    handleReferrals,
    handleApproveWithdrawal,
    handleRejectWithdrawal,
    handleAttachPaymentScreenshot,
    handleCancelScreenshot,
    handleCompleteWithdrawal,
    handleSupport,
    handleCreateTicket,
    handleMyTickets,
    handleSupportFAQ,
    handleTakeTicket,
    handleCloseTicket,
    handleReplyTicket,
    handleCancelReply,
    userStates
};
