const { Telegraf } = require('telegraf');
const logger = require('./utils/logger');
const messageCleaner = require('./utils/messageCleaner');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
function initializeBot() {
    try {
        const botToken = process.env.BOT_TOKEN;
        if (!botToken) {
            throw new Error('BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        }

        logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞', {
            botToken: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            nodeEnv: process.env.NODE_ENV || 'development'
        });

        const bot = new Telegraf(botToken);
        logger.info('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω');

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        const logError = (error, ctx) => {
            logger.errorWithContext('–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ', error, {
                userId: ctx?.from?.id,
                chatId: ctx?.chat?.id,
                messageType: ctx?.message?.text ? 'text' : 'callback',
                timestamp: new Date().toISOString()
            });
        };

        // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        const safeAsync = (handler) => {
            return async (ctx, next) => {
                try {
                    logger.function('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞', {
                        handler: handler.name || 'anonymous',
                        userId: ctx?.from?.id,
                        chatId: ctx?.chat?.id
                    });

                    await handler(ctx, next);
                    
                } catch (error) {
                    logger.errorWithContext('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ', error, {
                        handler: handler.name || 'anonymous',
                        userId: ctx?.from?.id,
                        chatId: ctx?.chat?.id,
                        message: ctx?.message?.text || 'callback'
                    });

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –¢–û–õ–¨–ö–û –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö
                    if (ctx.chat?.type === 'private') {
                        try {
                            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                            logger.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
                                userId: ctx?.from?.id
                            });
                        } catch (replyError) {
                            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', replyError);
                        }
                    } else {
                        logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç', {
                            userId: ctx?.from?.id,
                            chatId: ctx?.chat?.id,
                            chatType: ctx?.chat?.type
                        });
                    }
                }
            };
        };

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        logger.info('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');

        // Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Ç–µ
        const { privateChatOnly } = require('./middleware/chatFilter');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
        logger.info('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ start –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        const startHandler = require('./handlers/start');
        bot.start(safeAsync(privateChatOnly(startHandler)));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ info –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        const infoHandler = require('./handlers/info');
        const { autoDeleteUserMessageMiddleware } = require('./utils/autoDelete');

        // –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.use(autoDeleteUserMessageMiddleware());

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã –æ—Ç –∞–¥–º–∏–Ω–∞
        const handlePaymentScreenshot = async (ctx, requestId, withdrawalRequest) => {
            try {
                const userId = ctx.from.id;
                const messageType = ctx.message.photo ? 'photo' : ctx.message.document ? 'document' : 'text';
                
                logger.info('üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã', { 
                    userId, 
                    requestId, 
                    messageType,
                    hasPhoto: !!ctx.message.photo,
                    hasDocument: !!ctx.message.document
                });
                
                if (messageType === 'photo') {
                    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                    const photo = ctx.message.photo[ctx.message.photo.length - 1];
                    const fileId = photo.file_id;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const { dataManager } = require('./utils/dataManager');
                    await dataManager.db.collection('withdrawals').updateOne(
                        { id: requestId },
                        { 
                            $set: { 
                                paymentScreenshot: {
                                    fileId: fileId,
                                    uploadedAt: new Date(),
                                    uploadedBy: userId
                                },
                                status: 'payment_confirmed'
                            }
                        }
                    );
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                    const updatedMessage = `üìã **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ - –í–´–ü–õ–ê–¢–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê** ‚úÖ\n\n` +
                        `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
                        `‚îú üÜî ID: \`${withdrawalRequest.userId}\`\n` +
                        `‚îú üë§ –ò–º—è: ${withdrawalRequest.firstName}\n` +
                        `‚îî üè∑Ô∏è Username: ${withdrawalRequest.username}\n\n` +
                        `üí∞ **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
                        `‚îú üÜî ID –∑–∞—è–≤–∫–∏: \`${withdrawalRequest.id}\`\n` +
                        `‚îú üí∞ –°—É–º–º–∞: ${withdrawalRequest.amount} ‚≠ê Stars\n` +
                        `‚îú üìÖ –î–∞—Ç–∞: ${new Date(withdrawalRequest.createdAt).toLocaleDateString('ru-RU')}\n` +
                        `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(withdrawalRequest.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
                        `üì∏ **–°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω:**\n` +
                        `‚îú ‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n` +
                        `‚îú üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n` +
                        `‚îî üí° **–ó–∞—è–≤–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞**`;
                    
                    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤–∏–¥–∏–º—É—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
                    const updatedKeyboard = {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                                    callback_data: `complete_withdrawal_${requestId}`,
                                    web_app: undefined
                                }
                            ]
                        ]
                    };
                    
                    await ctx.reply(updatedMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: updatedKeyboard
                    });
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await ctx.telegram.sendMessage(withdrawalRequest.userId, 
                        `üéâ **–í–∞—à–∞ –≤—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!**\n\n` +
                        `üìã **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**\n` +
                        `‚îú üÜî ID: \`${withdrawalRequest.id}\`\n` +
                        `‚îú üí∞ –°—É–º–º–∞: ${withdrawalRequest.amount} ‚≠ê Stars\n` +
                        `‚îî ‚úÖ –°—Ç–∞—Ç—É—Å: –í—ã–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n` +
                        `üì∏ **–°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n` +
                        `‚è∞ **–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:** ${new Date().toLocaleDateString('ru-RU')}\n\n` +
                        `üí° **–í—ã–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**`
                    );
                    
                    logger.info('–°–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', { userId, requestId, fileId });
                    
                } else if (messageType === 'document') {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    const document = ctx.message.document;
                    await ctx.reply('üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
                    
                } else {
                    // –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await ctx.reply('üìù –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.');
                }
                
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã', error, { userId: ctx.from.id, requestId });
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        };

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const supportChannelHandler = async (ctx) => {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
                if (ctx.chat.username === 'magnumsupported') {
                    const userId = ctx.from.id;
                    const text = ctx.message.text;
                    const hasPhoto = !!ctx.message.photo;
                    const hasDocument = !!ctx.message.document;

                    logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', { 
                        userId, 
                        chatId: ctx.chat.id, 
                        text,
                        hasPhoto,
                        hasDocument,
                        messageType: hasPhoto ? 'photo' : hasDocument ? 'document' : 'text'
                    });

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                    const { isAdmin } = require('./utils/admin');
                    if (!isAdmin(userId)) {
                        logger.warn('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', { userId });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç
                    const { userStates } = require('./handlers/callback');
                    const userState = userStates.get(userId);
                    
                    if (userState && userState.state === 'replying_to_ticket') {
                        logger.info('–ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', { userId, ticketId: userState.data.ticketId });
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç
                        await handleTicketReply(ctx, userState.data.ticketId, userState.data.ticketData);
                        
                        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        userStates.delete(userId);
                        return;
                    }
                }

                // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                await infoHandler(ctx);

            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', error);
                throw error;
            }
        };

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∞
        const handleTicketReply = async (ctx, ticketId, ticketData) => {
            try {
                const userId = ctx.from.id;
                const messageType = ctx.message.photo ? 'photo' : ctx.message.document ? 'document' : 'text';
                
                logger.info('üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', { 
                    userId, 
                    ticketId, 
                    messageType,
                    hasPhoto: !!ctx.message.photo,
                    hasDocument: !!ctx.message.document
                });
                
                if (messageType === 'photo') {
                    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
                    const photo = ctx.message.photo[ctx.message.photo.length - 1];
                    const fileId = photo.file_id;
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const { dataManager } = require('./utils/dataManager');
                    await dataManager.db.collection('support_tickets').updateOne(
                        { id: ticketId },
                        { 
                            $push: { 
                                messages: {
                                    type: 'admin',
                                    content: '[–°–∫—Ä–∏–Ω—à–æ—Ç]',
                                    fileId: fileId,
                                    timestamp: new Date(),
                                    userId: userId
                                }
                            },
                            $set: { updatedAt: new Date() }
                        }
                    );
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await ctx.telegram.sendPhoto(ticketData.userId, fileId, {
                        caption: `üí¨ **–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}**\n\n` +
                            `üë®‚Äçüíº **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                            `‚è∞ **–í—Ä–µ–º—è:** ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
                            `üì∏ **–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω**`
                    });
                    
                } else if (messageType === 'document') {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    const document = ctx.message.document;
                    await ctx.reply('üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç.');
                    
                } else if (messageType === 'text') {
                    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    const { dataManager } = require('./utils/dataManager');
                    await dataManager.db.collection('support_tickets').updateOne(
                        { id: ticketId },
                        { 
                            $push: { 
                                messages: {
                                    type: 'admin',
                                    content: ctx.message.text,
                                    timestamp: new Date(),
                                    userId: userId
                                }
                            },
                            $set: { updatedAt: new Date() }
                        }
                    );
                    
                    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await ctx.telegram.sendMessage(ticketData.userId, 
                        `üí¨ **–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Ç–∏–∫–µ—Ç #${ticketId}**\n\n` +
                            `üë®‚Äçüíº **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                            `‚è∞ **–í—Ä–µ–º—è:** ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}\n\n` +
                            `üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n${ctx.message.text}`
                    );
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                const updatedMessage = `üÜò **–¢–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - –û–¢–í–ï–ß–ï–ù** üí¨\n\n` +
                    `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n` +
                    `‚îú üÜî ID: \`${ticketData.userId}\`\n` +
                    `‚îú üë§ –ò–º—è: ${ticketData.firstName}\n` +
                    `‚îî üè∑Ô∏è Username: ${ticketData.username ? `@${ticketData.username}` : '@username'}\n\n` +
                    `üìã **–î–µ—Ç–∞–ª–∏ —Ç–∏–∫–µ—Ç–∞:**\n` +
                    `‚îú üÜî ID —Ç–∏–∫–µ—Ç–∞: \`${ticketId}\`\n` +
                    `‚îú üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${ticketData.description.substring(0, 200)}${ticketData.description.length > 200 ? '...' : ''}\n` +
                    `‚îú üìÖ –î–∞—Ç–∞: ${new Date(ticketData.createdAt).toLocaleDateString('ru-RU')}\n` +
                    `‚îî ‚è∞ –í—Ä–µ–º—è: ${new Date(ticketData.createdAt).toLocaleTimeString('ru-RU')}\n\n` +
                    `üë®‚Äçüíº **–û—Ç–≤–µ—Ç–∏–ª:** ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}\n` +
                    `üë§ **–ê–¥–º–∏–Ω:** ${ctx.from.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                    `üí¨ **–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é**`;
                
                // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤–∏–¥–∏–º—É—é —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
                const updatedKeyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: '‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
                                callback_data: `close_ticket_${ticketId}`,
                                web_app: undefined
                            }
                        ]
                    ]
                };
                
                try {
                    await ctx.editMessageText(updatedMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: updatedKeyboard
                    });
                } catch (editError) {
                    logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏', editError, { userId, ticketId });
                }
                
                logger.info('–û—Ç–≤–µ—Ç –Ω–∞ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', { userId, ticketId, messageType });
                
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç', error, { userId: ctx.from.id, ticketId });
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        };

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–ª–∞—Ç (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è privateChatOnly)
        const withdrawalChannelHandler = async (ctx) => {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–ª–∞—Ç
                if (ctx.chat.username === 'magnumwithdraw') {
                    const userId = ctx.from.id;
                    const text = ctx.message.text;
                    const hasPhoto = !!ctx.message.photo;
                    const hasDocument = !!ctx.message.document;

                    logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç', { 
                        userId, 
                        chatId: ctx.chat.id, 
                        text,
                        hasPhoto,
                        hasDocument,
                        messageType: hasPhoto ? 'photo' : hasDocument ? 'document' : 'text'
                    });

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                    const { isAdmin } = require('./utils/admin');
                    if (!isAdmin(userId)) {
                        logger.warn('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç', { userId });
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                    const { userStates } = require('./handlers/callback');
                    const userState = userStates.get(userId);
                    
                    if (userState && userState.state === 'waiting_for_payment_screenshot') {
                        logger.info('–ê–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–ª–∞—Ç—ã', { userId, requestId: userState.data.requestId });
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                        await handlePaymentScreenshot(ctx, userState.data.requestId, userState.data.withdrawalRequest);
                        
                        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        userStates.delete(userId);
                        return;
                    }

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ ID –∑–∞—è–≤–æ–∫
                    const requestId = parseInt(text);
                    if (!isNaN(requestId)) {
                        logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç', { userId, requestId });

                        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
                        const { handleApproveWithdrawal, handleRejectWithdrawal } = require('./handlers/callback');

                        // –°–æ–∑–¥–∞–µ–º mock callbackQuery –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
                        const mockCtx = {
                            ...ctx,
                            callbackQuery: {
                                data: `approve_withdrawal_${requestId}`,
                                message: ctx.message
                            },
                            answerCbQuery: async (text, showAlert) => {
                                if (text) {
                                    await ctx.reply(text);
                                }
                            },
                            editMessageText: async (text, options) => {
                                await ctx.reply(text, options);
                            }
                        };

                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
                        await handleApproveWithdrawal(mockCtx);
                        return;
                    }

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
                    if (text.toLowerCase().includes('–æ—Ç–∫–ª–æ–Ω–∏—Ç—å') || text.toLowerCase().includes('reject')) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞—è–≤–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–æ–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "–æ—Ç–∫–ª–æ–Ω–∏—Ç—å 123" –∏–ª–∏ "reject 123")
                        const match = text.match(/(\d+)/);
                        if (match) {
                            const requestId = parseInt(match[1]);
                            logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç', { userId, requestId });

                            // –°–æ–∑–¥–∞–µ–º mock callbackQuery –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                            const mockCtx = {
                                ...ctx,
                                callbackQuery: {
                                    data: `reject_withdrawal_${requestId}`,
                                    message: ctx.message
                                },
                                answerCbQuery: async (text, showAlert) => {
                                    if (text) {
                                        await ctx.reply(text);
                                    }
                                },
                                editMessageText: async (text, options) => {
                                    await ctx.reply(text, options);
                                }
                            };

                            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
                            await handleRejectWithdrawal(mockCtx);
                            return;
                        }
                    }
                }

                // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                await infoHandler(ctx);

            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–ª–∞—Ç', error);
                throw error;
            }
        };

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–Ω–∞–ª–æ–≤
        bot.on('text', safeAsync(async (ctx) => {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            if (ctx.chat?.username === 'magnumsupported') {
                await supportChannelHandler(ctx);
            } else if (ctx.chat?.username === 'magnumwithdraw') {
                await withdrawalChannelHandler(ctx);
            } else {
                await infoHandler(ctx);
            }
        }));
        
        bot.on('photo', safeAsync(async (ctx) => {
            if (ctx.chat?.username === 'magnumsupported') {
                await supportChannelHandler(ctx);
            } else if (ctx.chat?.username === 'magnumwithdraw') {
                await withdrawalChannelHandler(ctx);
            } else {
                await infoHandler(ctx);
            }
        }));
        
        bot.on('document', safeAsync(async (ctx) => {
            if (ctx.chat?.username === 'magnumsupported') {
                await supportChannelHandler(ctx);
            } else if (ctx.chat?.username === 'magnumwithdraw') {
                await withdrawalChannelHandler(ctx);
            } else {
                await infoHandler(ctx);
            }
        }));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
        logger.info('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        const { callbackHandler } = require('./handlers/callback');

        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
        const universalCallbackHandler = async (ctx) => {
            try {
                const userId = ctx.from.id;
                const callbackData = ctx.callbackQuery.data;
                const chatType = ctx.chat?.type;
                const chatUsername = ctx.chat?.username;

                logger.info('=== CALLBACK –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù ===', {
                    userId,
                    callbackData,
                    chatType,
                    chatUsername,
                    chatId: ctx.chat?.id,
                    messageId: ctx.callbackQuery?.message?.message_id,
                    timestamp: new Date().toISOString()
                });

                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –≤—ã–ø–ª–∞—Ç
                if (chatUsername === 'magnumwithdraw') {
                    logger.info('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –≤ –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç', {
                        userId,
                        callbackData,
                        chatId: ctx.chat.id
                    });

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                    const { isAdmin } = require('./utils/admin');
                    if (!isAdmin(userId)) {
                        logger.warn('‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ callback –≤ –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç', {
                            userId,
                            callbackData,
                            chatId: ctx.chat.id
                        });
                        await ctx.answerCbQuery('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞—è–≤–∫–∞–º–∏', true);
                        return;
                    }

                    logger.info('‚úÖ –ê–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤ –∫–∞–Ω–∞–ª–µ –≤—ã–ø–ª–∞—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback', {
                        userId,
                        callbackData
                    });

                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    await callbackHandler(ctx);
                    return;
                }

                // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                if (chatType !== 'private') {
                    logger.warn('‚ùå Callback –∏–∑ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞ —á–∞—Ç–∞', {
                        userId,
                        callbackData,
                        chatType,
                        chatUsername
                    });
                    await ctx.answerCbQuery('‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —á–∞—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', true);
                    return;
                }

                // –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
                logger.info('üì± –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ', {
                    userId,
                    callbackData
                });

                await callbackHandler(ctx);

            } catch (error) {
                logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback', error, {
                    userId: ctx?.from?.id,
                    callbackData: ctx?.callbackQuery?.data,
                    chatType: ctx?.chat?.type,
                    chatUsername: ctx?.chat?.username
                });
                throw error;
            }
        };

        bot.on('callback_query', safeAsync(universalCallbackHandler));

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        bot.catch((error, ctx) => {
            logger.errorWithContext('–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞', error, {
                userId: ctx?.from?.id,
                chatId: ctx?.chat?.id,
                chatType: ctx?.chat?.type,
                messageType: ctx?.message?.text ? 'text' : 'callback',
                timestamp: new Date().toISOString(),
                errorStack: error.stack
            });

            // –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
            if (ctx?.chat?.type !== 'private') {
                logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç', {
                    chatId: ctx?.chat?.id,
                    chatType: ctx?.chat?.type
                });
                return;
            }
        });

        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        messageCleaner.setBot(bot);
        messageCleaner.start();
        
        logger.info('–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –±–æ—Ç–æ–º');



        // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        const launchBot = async () => {
            try {
                logger.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
                await bot.launch();
                logger.info('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞', error);
                throw error;
            }
        };

        // Graceful shutdown
        const gracefulShutdown = async (signal) => {
            logger.info(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...`);
            try {
                await bot.stop(signal);
                logger.info('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                process.exit(0);
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞', error);
                process.exit(1);
            }
        };

        process.once('SIGINT', () => gracefulShutdown('SIGINT'));
        process.once('SIGTERM', () => gracefulShutdown('SIGTERM'));

        return { bot, launchBot };

    } catch (error) {
        logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞', error);
        throw error;
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const { bot, launchBot } = initializeBot();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
launchBot().catch(error => {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞', error);
    process.exit(1);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞
module.exports = { bot, launchBot };