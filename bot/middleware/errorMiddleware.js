// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const requestLogger = (ctx, next) => {
  const start = Date.now();
  const userId = ctx.from?.id || 'unknown';
  const updateType = ctx.updateType || 'unknown';
  
  console.log(`[${new Date().toISOString()}] Request from user ${userId}, type: ${updateType}`);
  
  return next().finally(() => {
    const duration = Date.now() - start;
    console.log(`[${new Date().toISOString()}] Request completed for user ${userId} in ${duration}ms`);
  });
};

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const contextValidator = (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!ctx.from || !ctx.from.id) {
    console.error('[Context Error] Missing user data in context');
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
  if (ctx.chat && ctx.chat.type !== 'private') {
    console.warn(`[Context Warning] Non-private chat detected: ${ctx.chat.type}`);
  }
  
  return next();
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ rate limiting
const rateLimiter = new Map();
const rateLimitMiddleware = (ctx, next) => {
  const userId = ctx.from?.id;
  const now = Date.now();
  const windowMs = 60000; // 1 –º–∏–Ω—É—Ç–∞
  const maxRequests = 30; // –º–∞–∫—Å–∏–º—É–º 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
  
  if (!rateLimiter.has(userId)) {
    rateLimiter.set(userId, { count: 0, resetTime: now + windowMs });
  }
  
  const userLimit = rateLimiter.get(userId);
  
  if (now > userLimit.resetTime) {
    userLimit.count = 0;
    userLimit.resetTime = now + windowMs;
  }
  
  if (userLimit.count >= maxRequests) {
    console.warn(`[Rate Limit] User ${userId} exceeded rate limit`);
    throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
  
  userLimit.count++;
  return next();
};

// Middleware –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π rate limiter
setInterval(() => {
  const now = Date.now();
  for (const [userId, data] of rateLimiter.entries()) {
    if (now > data.resetTime) {
      rateLimiter.delete(userId);
    }
  }
}, 300000); // –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const stateManager = (ctx, next) => {
  const userId = ctx.from?.id;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
  ctx.userState = {
    userId,
    timestamp: Date.now(),
    updateType: ctx.updateType
  };
  
  return next();
};

// Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performanceMonitor = (ctx, next) => {
  const start = process.hrtime.bigint();
  
  return next().finally(() => {
    const end = process.hrtime.bigint();
    const duration = Number(end - start) / 1000000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    if (duration > 1000) { // –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
      console.warn(`[Performance] Slow operation detected: ${duration.toFixed(2)}ms for user ${ctx.from?.id}`);
    }
  });
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ middleware
const errorHandlerMiddleware = (ctx, next) => {
  return next().catch((error) => {
    const userId = ctx.from?.id || 'unknown';
    console.error(`[Middleware Error] User ${userId}:`, error.message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if (ctx.reply && ctx.chat?.type === 'private') {
      ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n\n' +
        'üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.'
      ).catch(replyError => {
        console.error(`[Middleware Error] Failed to send error message to user ${userId}:`, replyError.message);
      });
    }
    
    throw error; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
  });
};

module.exports = {
  requestLogger,
  contextValidator,
  rateLimitMiddleware,
  stateManager,
  performanceMonitor,
  errorHandlerMiddleware
};
