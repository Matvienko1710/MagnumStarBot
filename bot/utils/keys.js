// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏)

const { updateStars, updateCoins } = require('./currency');
const { unlockTitle } = require('./titles');

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
const activationKeys = new Map();
const usedKeys = new Map();
const userKeyHistory = new Map();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ 12 —Å–∏–º–≤–æ–ª–æ–≤
const generateKey = () => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 12; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
const createKey = (reward = { stars: 10, coins: 0 }, maxUses = 1, description = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á', titleReward = null) => {
  const key = generateKey();
  
  activationKeys.set(key, {
    reward: reward,
    titleReward: titleReward,
    maxUses: maxUses,
    currentUses: 0,
    description: description,
    createdAt: new Date(),
    isActive: true
  });
  
  return key;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
const keyExists = (key) => {
  return activationKeys.has(key.toUpperCase());
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
const canUseKey = (key, userId) => {
  const upperKey = key.toUpperCase();
  
  if (!keyExists(upperKey)) {
    return { canUse: false, reason: '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω' };
  }
  
  const keyData = activationKeys.get(upperKey);
  
  if (!keyData.isActive) {
    return { canUse: false, reason: '–ö–ª—é—á –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' };
  }
  
  if (keyData.currentUses >= keyData.maxUses) {
    return { canUse: false, reason: '–ö–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑' };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –∫–ª—é—á
  if (!userKeyHistory.has(userId)) {
    userKeyHistory.set(userId, []);
  }
  
  const userHistory = userKeyHistory.get(userId);
  if (userHistory.includes(upperKey)) {
    return { canUse: false, reason: '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–ª—é—á' };
  }
  
  return { canUse: true, keyData: keyData };
};

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
const activateKey = (key, userId) => {
  const upperKey = key.toUpperCase();
  const check = canUseKey(upperKey, userId);
  
  if (!check.canUse) {
    throw new Error(check.reason);
  }
  
  const keyData = check.keyData;
  
  // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
  const results = {};
  
  if (keyData.reward.stars > 0) {
    results.stars = updateStars(userId, keyData.reward.stars, `key_activation_${upperKey}`);
  }
  
  if (keyData.reward.coins > 0) {
    results.coins = updateCoins(userId, keyData.reward.coins, `key_activation_${upperKey}`);
  }
  
  // –í—ã–¥–∞–µ–º —Ç–∏—Ç—É–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (keyData.titleReward) {
    try {
      const unlockedTitle = unlockTitle(userId, keyData.titleReward);
      results.title = unlockedTitle;
    } catch (error) {
      // –ï—Å–ª–∏ —Ç–∏—Ç—É–ª —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      console.log(`Title already unlocked for user ${userId}: ${error.message}`);
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
  keyData.currentUses += 1;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!userKeyHistory.has(userId)) {
    userKeyHistory.set(userId, []);
  }
  userKeyHistory.get(userId).push(upperKey);
  
  // –ï—Å–ª–∏ –∫–ª—é—á –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
  if (keyData.currentUses >= keyData.maxUses) {
    keyData.isActive = false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  try {
    const { getReferralActivityReward } = require('./referral');
    const referralData = require('./referral').getUserReferralData(userId);
    
    if (referralData.referrerId) {
      // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–ª—é—á–∞
      const reward = getReferralActivityReward(referralData.referrerId, userId, 'key_activation');
      if (reward) {
        console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${referralData.referrerId} –ø–æ–ª—É—á–∏–ª ${reward.stars} ‚≠ê ${reward.coins} ü™ô –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–ª—é—á–∞ ${userId}`);
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', error.message);
  }
  
  return {
    key: upperKey,
    reward: keyData.reward,
    titleReward: keyData.titleReward,
    results: results,
    description: keyData.description,
    remainingUses: keyData.maxUses - keyData.currentUses
  };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
const getKeyInfo = (key) => {
  const upperKey = key.toUpperCase();
  
  if (!keyExists(upperKey)) {
    return null;
  }
  
  const keyData = activationKeys.get(upperKey);
  return {
    key: upperKey,
    ...keyData,
    remainingUses: keyData.maxUses - keyData.currentUses
  };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–µ–π
const getKeysStats = () => {
  const keys = Array.from(activationKeys.entries());
  
  return {
    totalKeys: keys.length,
    activeKeys: keys.filter(([_, data]) => data.isActive).length,
    totalUses: keys.reduce((sum, [_, data]) => sum + data.currentUses, 0),
    keys: keys.map(([key, data]) => ({
      key: key,
      ...data,
      remainingUses: data.maxUses - data.currentUses
    }))
  };
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
const getUserKeyHistory = (userId) => {
  if (!userKeyHistory.has(userId)) {
    return [];
  }
  
  const userKeys = userKeyHistory.get(userId);
  return userKeys.map(key => {
    const keyData = activationKeys.get(key);
    return {
      key: key,
      usedAt: new Date(), // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      reward: keyData ? keyData.reward : { stars: 0, coins: 0 },
      description: keyData ? keyData.description : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á'
    };
  });
};

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π
const createTestKeys = () => {
  // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  createKey({ stars: 50, coins: 100 }, 1, '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á 1');
  createKey({ stars: 25, coins: 50 }, 5, '–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á 2');
  createKey({ stars: 100, coins: 0 }, 1, '–ü—Ä–µ–º–∏—É–º –∫–ª—é—á');
  createKey({ stars: 0, coins: 200 }, 10, '–ö–ª—é—á –¥–ª—è Coins');
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if (activationKeys.size === 0) {
  createTestKeys();
}

module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  createKey,
  keyExists,
  canUseKey,
  activateKey,
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  getKeyInfo,
  getKeysStats,
  getUserKeyHistory,
  
  // –£—Ç–∏–ª–∏—Ç—ã
  generateKey,
  createTestKeys
};
