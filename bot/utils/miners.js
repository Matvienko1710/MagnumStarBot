// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
const userMiners = new Map();

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
const serverMinerCounts = {
  NOVICE: 100,  // –ù–æ–≤–∏—á–æ–∫
  STAR_PATH: 100  // –ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º
};

// –¢–∏–ø—ã –º–∞–π–Ω–µ—Ä–æ–≤
const MINER_TYPES = {
  NOVICE: {
    id: 'novice',
    name: '–ù–æ–≤–∏—á–æ–∫',
    price: 100,
    priceType: 'coins', // —Ç–∏–ø –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    rewardPerMinute: 0.25,
    rewardType: 'coins', // —Ç–∏–ø –≤–∞–ª—é—Ç—ã –¥–ª—è –¥–æ–±—ã—á–∏
    maxReward: 1000, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–±—ã—á–∞
    rarity: 'common', // —Ä–µ–¥–∫–æ—Å—Ç—å: common, rare, epic, legendary
    description: '–ü–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä–µ –º–∞–π–Ω–∏–Ω–≥–∞ Magnum Coins',
    serverLimit: 100 // –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  },
  STAR_PATH: {
    id: 'star_path',
    name: '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º',
    price: 100,
    priceType: 'stars', // —Ç–∏–ø –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    rewardPerMinute: 0.01,
    rewardType: 'stars', // —Ç–∏–ø –≤–∞–ª—é—Ç—ã –¥–ª—è –¥–æ–±—ã—á–∏
    maxReward: 100, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–±—ã—á–∞
    rarity: 'rare', // —Ä–µ–¥–∫–æ—Å—Ç—å: common, rare, epic, legendary
    description: '–î–æ—Ä–æ–≥–∞ –∫ –∑–≤–µ–∑–¥–∞–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å',
    serverLimit: 100 // –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const initializeUserMiners = (userId) => {
  if (!userMiners.has(userId)) {
    userMiners.set(userId, {
      miners: [],
      lastCollection: Date.now(),
      totalEarned: { stars: 0, coins: 0 }
    });
  }
  return userMiners.get(userId);
};

// –ü–æ–ª—É—á–∏—Ç—å –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserMiners = (userId) => {
  const userData = initializeUserMiners(userId);
  return userData.miners;
};

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
const getAvailableRewards = (userId) => {
  const userData = initializeUserMiners(userId);
  const now = Date.now();
  const timeDiff = now - userData.lastCollection;
  const minutesDiff = timeDiff / (1000 * 60); // –º–∏–Ω—É—Ç—ã
  
  let totalRewardStars = 0;
  let totalRewardCoins = 0;
  
  userData.miners.forEach(miner => {
    const minerType = MINER_TYPES[miner.type];
    const reward = Math.min(
      minerType.rewardPerMinute * minutesDiff,
      minerType.maxReward - miner.totalEarned
    );
    
    if (minerType.rewardType === 'stars') {
      totalRewardStars += reward;
    } else if (minerType.rewardType === 'coins') {
      totalRewardCoins += reward;
    }
  });
  
  return {
    stars: Math.floor(totalRewardStars * 100) / 100, // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    coins: Math.floor(totalRewardCoins * 100) / 100
  };
};

// –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä
const buyMiner = (userId, minerType) => {
  const { getUserBalance, updateBalance } = require('./currency');
  
  if (!MINER_TYPES[minerType]) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–∞–π–Ω–µ—Ä–∞');
  }
  
  const minerInfo = MINER_TYPES[minerType];
  const userBalance = getUserBalance(userId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  if (serverMinerCounts[minerType] <= 0) {
    throw new Error(`–ú–∞–π–Ω–µ—Ä "${minerInfo.name}" –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–∞–ª—é—Ç—ã
  if (minerInfo.priceType === 'stars' && userBalance.stars < minerInfo.price) {
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –ù—É–∂–Ω–æ: ${minerInfo.price}, —É –≤–∞—Å: ${userBalance.stars}`);
  } else if (minerInfo.priceType === 'coins' && userBalance.coins < minerInfo.price) {
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Magnum Coins! –ù—É–∂–Ω–æ: ${minerInfo.price}, —É –≤–∞—Å: ${userBalance.coins}`);
  }
  
  // –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
  if (minerInfo.priceType === 'stars') {
    updateBalance(userId, { stars: -minerInfo.price });
  } else if (minerInfo.priceType === 'coins') {
    updateBalance(userId, { coins: -minerInfo.price });
  }
  
  // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  serverMinerCounts[minerType]--;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userData = initializeUserMiners(userId);
  const newMiner = {
    id: `${minerType}_${Date.now()}`,
    type: minerType,
    name: minerInfo.name,
    rarity: minerInfo.rarity,
    purchaseDate: Date.now(),
    totalEarned: 0,
    isActive: true
  };
  
  userData.miners.push(newMiner);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  try {
    const { getReferralActivityReward } = require('./referral');
    const referralData = require('./referral').getUserReferralData(userId);
    
    if (referralData.referrerId) {
      // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É –∑–∞ –ø–æ–∫—É–ø–∫—É –º–∞–π–Ω–µ—Ä–∞
      const reward = getReferralActivityReward(referralData.referrerId, userId, 'miner_purchase');
      if (reward) {
        console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${referralData.referrerId} –ø–æ–ª—É—á–∏–ª ${reward.stars} ‚≠ê ${reward.coins} ü™ô –∑–∞ –ø–æ–∫—É–ø–∫—É –º–∞–π–Ω–µ—Ä–∞ ${userId}`);
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', error.message);
  }
  
  return {
    miner: newMiner,
    price: minerInfo.price,
    priceType: minerInfo.priceType,
    newBalance: getUserBalance(userId)
  };
};

// –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã
const collectRewards = (userId) => {
  const { updateBalance } = require('./currency');
  const userData = initializeUserMiners(userId);
  
  const availableRewards = getAvailableRewards(userId);
  
  if (availableRewards.stars <= 0 && availableRewards.coins <= 0) {
    throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
  userData.lastCollection = Date.now();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (availableRewards.stars > 0) {
    updateBalance(userId, { stars: availableRewards.stars });
  }
  if (availableRewards.coins > 0) {
    updateBalance(userId, { coins: availableRewards.coins });
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–π–Ω–µ—Ä–æ–≤
  const now = Date.now();
  const timeDiff = now - userData.lastCollection;
  const minutesDiff = timeDiff / (1000 * 60);
  
  userData.miners.forEach(miner => {
    const minerType = MINER_TYPES[miner.type];
    const reward = Math.min(
      minerType.rewardPerMinute * minutesDiff,
      minerType.maxReward - miner.totalEarned
    );
    miner.totalEarned += reward;
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  userData.totalEarned.stars += availableRewards.stars;
  userData.totalEarned.coins += availableRewards.coins;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  try {
    const { getReferralActivityReward } = require('./referral');
    const referralData = require('./referral').getUserReferralData(userId);
    
    if (referralData.referrerId) {
      // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É –∑–∞ —Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥
      const reward = getReferralActivityReward(referralData.referrerId, userId, 'miner_collection');
      if (reward) {
        console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${referralData.referrerId} –ø–æ–ª—É—á–∏–ª ${reward.stars} ‚≠ê ${reward.coins} ü™ô –∑–∞ —Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥ ${userId}`);
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', error.message);
  }
  
  return {
    collected: availableRewards,
    newBalance: require('./currency').getUserBalance(userId)
  };
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–π–Ω–µ—Ä–æ–≤
const getMinersStats = (userId) => {
  const userData = initializeUserMiners(userId);
  const availableRewards = getAvailableRewards(userId);
  
  const stats = {
    totalMiners: userData.miners.length,
    activeMiners: userData.miners.filter(m => m.isActive).length,
    totalEarned: userData.totalEarned,
    availableRewards,
    lastCollection: userData.lastCollection,
    miners: userData.miners.map(miner => {
      const minerType = MINER_TYPES[miner.type];
      return {
        ...miner,
        rewardPerMinute: minerType.rewardPerMinute,
        rewardType: minerType.rewardType,
        maxReward: minerType.maxReward,
        remainingReward: minerType.maxReward - miner.totalEarned
      };
    })
  };
  
  return stats;
};

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –º–∞–π–Ω–µ—Ä–æ–≤
const getMinerTypes = () => {
  return Object.values(MINER_TYPES).map(type => ({
    ...type,
    availableOnServer: serverMinerCounts[type.id.toUpperCase()]
  }));
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –º–∞–π–Ω–µ—Ä–∞
const getMinerType = (type) => {
  const minerType = MINER_TYPES[type];
  if (minerType) {
    return {
      ...minerType,
      availableOnServer: serverMinerCounts[type.toUpperCase()]
    };
  }
  return null;
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
const getServerMinerCounts = () => {
  return { ...serverMinerCounts };
};

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∫–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–∞
const getRarityInfo = (rarity) => {
  const rarityInfo = {
    common: { name: '–û–±—ã—á–Ω—ã–π', color: '‚ö™', bonus: 1.0 },
    rare: { name: '–†–µ–¥–∫–∏–π', color: 'üîµ', bonus: 1.2 },
    epic: { name: '–≠–ø–∏—á–µ—Å–∫–∏–π', color: 'üü£', bonus: 1.5 },
    legendary: { name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', color: 'üü°', bonus: 2.0 }
  };
  return rarityInfo[rarity] || rarityInfo.common;
};

module.exports = {
  getUserMiners,
  getAvailableRewards,
  buyMiner,
  collectRewards,
  getMinersStats,
  getMinerTypes,
  getMinerType,
  getServerMinerCounts,
  getRarityInfo,
  MINER_TYPES
};
