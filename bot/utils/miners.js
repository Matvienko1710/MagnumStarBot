// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
const userMiners = new Map();

// –¢–∏–ø—ã –º–∞–π–Ω–µ—Ä–æ–≤
const MINER_TYPES = {
  BASIC: {
    id: 'basic',
    name: '–ë–∞–∑–æ–≤—ã–π –º–∞–π–Ω–µ—Ä',
    price: 100,
    rewardPerHour: 1,
    maxReward: 24,
    description: '–ü—Ä–æ—Å—Ç–æ–π –º–∞–π–Ω–µ—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'
  },
  ADVANCED: {
    id: 'advanced',
    name: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞–π–Ω–µ—Ä',
    price: 500,
    rewardPerHour: 5,
    maxReward: 120,
    description: '–ú–æ—â–Ω—ã–π –º–∞–π–Ω–µ—Ä –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
  },
  PRO: {
    id: 'pro',
    name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞–π–Ω–µ—Ä',
    price: 1000,
    rewardPerHour: 12,
    maxReward: 288,
    description: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞–π–Ω–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é'
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const initializeUserMiners = (userId) => {
  if (!userMiners.has(userId)) {
    userMiners.set(userId, {
      miners: [],
      lastCollection: Date.now(),
      totalEarned: { stars: 0, coins: 0 }
    });
  }
  return userMiners.get(userId);
};

// –ü–æ–ª—É—á–∏—Ç—å –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserMiners = (userId) => {
  const userData = initializeUserMiners(userId);
  return userData.miners;
};

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
const getAvailableRewards = (userId) => {
  const userData = initializeUserMiners(userId);
  const now = Date.now();
  const timeDiff = now - userData.lastCollection;
  const hoursDiff = timeDiff / (1000 * 60 * 60); // —á–∞—Å—ã
  
  let totalReward = 0;
  
  userData.miners.forEach(miner => {
    const minerType = MINER_TYPES[miner.type];
    const reward = Math.min(
      minerType.rewardPerHour * hoursDiff,
      minerType.maxReward - miner.totalEarned
    );
    totalReward += reward;
  });
  
  return Math.floor(totalReward);
};

// –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä
const buyMiner = (userId, minerType) => {
  const { getUserBalance, updateBalance } = require('./currency');
  
  if (!MINER_TYPES[minerType]) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–∞–π–Ω–µ—Ä–∞');
  }
  
  const minerInfo = MINER_TYPES[minerType];
  const userBalance = getUserBalance(userId);
  
  if (userBalance.stars < minerInfo.price) {
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars! –ù—É–∂–Ω–æ: ${minerInfo.price}, —É –≤–∞—Å: ${userBalance.stars}`);
  }
  
  // –°–ø–∏—Å—ã–≤–∞–µ–º Stars
  updateBalance(userId, { stars: -minerInfo.price });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const userData = initializeUserMiners(userId);
  const newMiner = {
    id: `${minerType}_${Date.now()}`,
    type: minerType,
    name: minerInfo.name,
    purchaseDate: Date.now(),
    totalEarned: 0,
    isActive: true
  };
  
  userData.miners.push(newMiner);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  try {
    const { getReferralActivityReward } = require('./referral');
    const referralData = require('./referral').getUserReferralData(userId);
    
    if (referralData.referrerId) {
      // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É –∑–∞ –ø–æ–∫—É–ø–∫—É –º–∞–π–Ω–µ—Ä–∞
      const reward = getReferralActivityReward(referralData.referrerId, userId, 'miner_purchase');
      if (reward) {
        console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${referralData.referrerId} –ø–æ–ª—É—á–∏–ª ${reward.stars} ‚≠ê ${reward.coins} ü™ô –∑–∞ –ø–æ–∫—É–ø–∫—É –º–∞–π–Ω–µ—Ä–∞ ${userId}`);
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', error.message);
  }
  
  return {
    miner: newMiner,
    price: minerInfo.price,
    newBalance: getUserBalance(userId)
  };
};

// –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã
const collectRewards = (userId) => {
  const { updateBalance } = require('./currency');
  const userData = initializeUserMiners(userId);
  
  const availableRewards = getAvailableRewards(userId);
  
  if (availableRewards <= 0) {
    throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞');
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
  userData.lastCollection = Date.now();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateBalance(userId, { stars: availableRewards });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–π–Ω–µ—Ä–æ–≤
  const now = Date.now();
  const timeDiff = now - userData.lastCollection;
  const hoursDiff = timeDiff / (1000 * 60 * 60);
  
  userData.miners.forEach(miner => {
    const minerType = MINER_TYPES[miner.type];
    const reward = Math.min(
      minerType.rewardPerHour * hoursDiff,
      minerType.maxReward - miner.totalEarned
    );
    miner.totalEarned += reward;
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  userData.totalEarned.stars += availableRewards;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  try {
    const { getReferralActivityReward } = require('./referral');
    const referralData = require('./referral').getUserReferralData(userId);
    
    if (referralData.referrerId) {
      // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É –∑–∞ —Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥
      const reward = getReferralActivityReward(referralData.referrerId, userId, 'miner_collection');
      if (reward) {
        console.log(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: ${referralData.referrerId} –ø–æ–ª—É—á–∏–ª ${reward.stars} ‚≠ê ${reward.coins} ü™ô –∑–∞ —Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥ ${userId}`);
      }
    }
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', error.message);
  }
  
  return {
    collected: availableRewards,
    newBalance: require('./currency').getUserBalance(userId)
  };
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–π–Ω–µ—Ä–æ–≤
const getMinersStats = (userId) => {
  const userData = initializeUserMiners(userId);
  const availableRewards = getAvailableRewards(userId);
  
  const stats = {
    totalMiners: userData.miners.length,
    activeMiners: userData.miners.filter(m => m.isActive).length,
    totalEarned: userData.totalEarned,
    availableRewards,
    lastCollection: userData.lastCollection,
    miners: userData.miners.map(miner => {
      const minerType = MINER_TYPES[miner.type];
      return {
        ...miner,
        rewardPerHour: minerType.rewardPerHour,
        maxReward: minerType.maxReward,
        remainingReward: minerType.maxReward - miner.totalEarned
      };
    })
  };
  
  return stats;
};

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö –º–∞–π–Ω–µ—Ä–æ–≤
const getMinerTypes = () => {
  return Object.values(MINER_TYPES);
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –º–∞–π–Ω–µ—Ä–∞
const getMinerType = (type) => {
  return MINER_TYPES[type];
};

module.exports = {
  getUserMiners,
  getAvailableRewards,
  buyMiner,
  collectRewards,
  getMinersStats,
  getMinerTypes,
  getMinerType,
  MINER_TYPES
};
