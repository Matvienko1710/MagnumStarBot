// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
class CacheManager {
    constructor() {
        this.caches = new Map();
        this.stats = {
            totalSize: 0,
            hits: 0,
            misses: 0,
            evictions: 0
        };

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        this.cleanupInterval = setInterval(() => {
            this.cleanup();
        }, 5 * 60 * 1000);

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏
        this.setupMemoryMonitoring();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫—É –ø–∞–º—è—Ç–∏)
    cleanup() {
        if (this.cleanupInterval) {
            clearInterval(this.cleanupInterval);
            this.cleanupInterval = null;
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞
    createCache(name, options = {}) {
        const cache = {
            data: new Map(),
            maxSize: options.maxSize || 100,
            ttl: options.ttl || 300000, // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            lastAccess: new Map()
        };
        
        this.caches.set(name, cache);
        console.log(`‚úÖ –ö—ç—à "${name}" —Å–æ–∑–¥–∞–Ω —Å –ª–∏–º–∏—Ç–æ–º ${cache.maxSize} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        return cache;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
    get(cacheName, key) {
        const cache = this.caches.get(cacheName);
        if (!cache) {
            this.stats.misses++;
            return null;
        }
        
        const item = cache.data.get(key);
        if (!item) {
            this.stats.misses++;
            return null;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        if (Date.now() - item.timestamp > cache.ttl) {
            cache.data.delete(key);
            cache.lastAccess.delete(key);
            this.stats.evictions++;
            return null;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        cache.lastAccess.set(key, Date.now());
        this.stats.hits++;
        
        return item.data;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
    set(cacheName, key, value, customTtl = null) {
        const cache = this.caches.get(cacheName);
        if (!cache) {
            console.error(`‚ùå –ö—ç—à "${cacheName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞
        if (cache.data.size >= cache.maxSize) {
            this.evictOldest(cacheName);
        }
        
        const ttl = customTtl || cache.ttl;
        cache.data.set(key, {
            data: value,
            timestamp: Date.now(),
            ttl: ttl
        });
        
        cache.lastAccess.set(key, Date.now());
        
        return true;
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    evictOldest(cacheName) {
        const cache = this.caches.get(cacheName);
        if (!cache || cache.data.size === 0) return;
        
        let oldestKey = null;
        let oldestTime = Date.now();
        
        for (const [key, lastAccess] of cache.lastAccess) {
            if (lastAccess < oldestTime) {
                oldestTime = lastAccess;
                oldestKey = key;
            }
        }
        
        if (oldestKey) {
            cache.data.delete(oldestKey);
            cache.lastAccess.delete(oldestKey);
            this.stats.evictions++;
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫—ç—à–∞ "${cacheName}": ${oldestKey}`);
        }
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—ç—à–µ–π
    cleanup() {
        const beforeSize = this.getTotalSize();
        
        for (const [name, cache] of this.caches) {
            const beforeCount = cache.data.size;
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for (const [key, item] of cache.data) {
                if (Date.now() - item.timestamp > item.ttl) {
                    cache.data.delete(key);
                    cache.lastAccess.delete(key);
                    this.stats.evictions++;
                }
            }
            
            const afterCount = cache.data.size;
            if (beforeCount !== afterCount) {
                console.log(`üßπ –ö—ç—à "${name}": –æ—á–∏—â–µ–Ω–æ ${beforeCount - afterCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            }
        }
        
        const afterSize = this.getTotalSize();
        console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–∞–º—è—Ç—å: ${beforeSize} ‚Üí ${afterSize} –ú–ë`);
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    clear(cacheName = null) {
        if (cacheName) {
            const cache = this.caches.get(cacheName);
            if (cache) {
                const size = cache.data.size;
                cache.data.clear();
                cache.lastAccess.clear();
                console.log(`üóëÔ∏è –ö—ç—à "${cacheName}" –æ—á–∏—â–µ–Ω (${size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
            }
        } else {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
            for (const [name, cache] of this.caches) {
                cache.data.clear();
                cache.lastAccess.clear();
            }
            console.log('üóëÔ∏è –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    getStats() {
        return {
            ...this.stats,
            totalSize: this.getTotalSize(),
            caches: Object.fromEntries(
                Array.from(this.caches.entries()).map(([name, cache]) => [
                    name,
                    {
                        size: cache.data.size,
                        maxSize: cache.maxSize,
                        ttl: cache.ttl
                    }
                ])
            )
        };
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –ú–ë
    getTotalSize() {
        let total = 0;
        for (const cache of this.caches.values()) {
            total += cache.data.size;
        }
        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: 1 —ç–ª–µ–º–µ–Ω—Ç ‚âà 1 –ö–ë
        return Math.round(total / 1024 * 100) / 100;
    }
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
    setupMemoryMonitoring() {
        setInterval(() => {
            const memUsage = process.memoryUsage();
            const heapUsed = Math.round(memUsage.heapUsed / 1024 / 1024 * 100) / 100;
            
            // –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100 –ú–ë, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç–∏–º
            if (heapUsed > 100) {
                console.log(`‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${heapUsed} –ú–ë. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...`);
                this.cleanup();
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞
                if (global.gc) {
                    global.gc();
                    console.log('üóëÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω');
                }
            }
        }, 60 * 1000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const cacheManager = new CacheManager();

// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫—ç—à–∏
cacheManager.createCache('users', { maxSize: 50, ttl: 300000 }); // 5 –º–∏–Ω—É—Ç
cacheManager.createCache('miners', { maxSize: 20, ttl: 600000 }); // 10 –º–∏–Ω—É—Ç
cacheManager.createCache('titles', { maxSize: 10, ttl: 1800000 }); // 30 –º–∏–Ω—É—Ç

module.exports = cacheManager;
