const database = require('./database');
const logger = require('./logger');
const { MINER_TYPES } = require('./miners');

class DataManager {
    constructor() {
        this.db = null;
        this.isInitialized = false;
    }

    async initialize() {
        try {
            if (!database.isConnected) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            }
            
            this.db = database.getDb();
            this.isInitialized = true;
            
            // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            await this.createIndexes();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.createDefaultData();
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await this.createUserActivityCollection();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
            logger.info('‚õèÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...');
            setImmediate(async () => {
            try {
                logger.info('üîç –í—ã–∑—ã–≤–∞–µ–º processAllMissedMiningRewards...');
                const missedRewardsResult = await this.processAllMissedMiningRewards();
                logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç processAllMissedMiningRewards –ø–æ–ª—É—á–µ–Ω:', missedRewardsResult);
                
                if (missedRewardsResult.success) {
                    logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', missedRewardsResult);
                } else {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', missedRewardsResult.error);
                }
            } catch (missedRewardsError) {
                logger.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', missedRewardsError);
            }
            });
            
            logger.info('DataManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            this.startMiningIncomeScheduler();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            this.startActiveReferralsScheduler();
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataManager', error);
            throw error;
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞
    startMiningIncomeScheduler() {
        try {
            logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞...');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º—Å)
            this.miningIncomeInterval = setInterval(async () => {
                try {
                    await this.processAllUsersMiningIncome();
                } catch (error) {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞', error);
                }
            }, 60000); // 1 –º–∏–Ω—É—Ç–∞
            
            logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 1 –º–∏–Ω—É—Ç–∞)');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞', error);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async processAllUsersMiningIncome() {
        try {
            logger.info('‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏
            const usersWithMiners = await this.db.collection('users').find({
                'miners.0': { $exists: true } // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–π–Ω–µ—Ä
            }).toArray();
            
            logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏: ${usersWithMiners.length}`);
            
            let totalUsersProcessed = 0;
            let totalCoinsAwarded = 0;
            let totalStarsAwarded = 0;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (const user of usersWithMiners) {
                try {
                    const result = await this.processMiningIncome(user.userId);
                    
                    if (result.coins > 0 || result.stars > 0) {
                        totalUsersProcessed++;
                        totalCoinsAwarded += result.coins;
                        totalStarsAwarded += result.stars;
                        
                        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥)', { 
                            userId: user.userId, 
                            coins: result.coins, 
                            stars: result.stars,
                            timestamp: new Date().toISOString()
                        });
                    }
                } catch (userError) {
                    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥)', userError, { userId: user.userId });
                }
            }
            
            if (totalCoinsAwarded > 0 || totalStarsAwarded > 0) {
                logger.info('üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
                    totalUsersProcessed,
                    totalCoinsAwarded,
                    totalStarsAwarded
                });
            } else {
                logger.debug('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤)');
            }
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
        }
    }

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞
    async diagnoseMiningSystem() {
        try {
            logger.info('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞...');

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const usersWithMiners = await this.db.collection('users').find({
                'miners.0': { $exists: true }
            }).toArray();

            let totalActiveMiners = 0;
            let totalInactiveMiners = 0;
            let totalExpiredMiners = 0;
            const now = new Date();

            for (const user of usersWithMiners) {
                const miners = user.miners || [];
                for (const miner of miners) {
                    if (!miner.isActive) {
                        totalInactiveMiners++;
                        continue;
                    }

                    if (!miner.lastMiningStart) {
                        totalInactiveMiners++;
                        continue;
                    }

                    const miningStartTime = new Date(miner.lastMiningStart);
                    const hoursSinceStart = (now - miningStartTime) / (1000 * 60 * 60);

                    if (hoursSinceStart >= 4) {
                        totalExpiredMiners++;
                    } else {
                        totalActiveMiners++;
                    }
                }
            }

            const stats = {
                totalUsers: usersWithMiners.length,
                totalActiveMiners,
                totalInactiveMiners,
                totalExpiredMiners,
                schedulerStatus: this.miningIncomeInterval ? 'ACTIVE' : 'INACTIVE',
                nextRunTime: this.miningIncomeInterval ? new Date(Date.now() + 60000).toISOString() : null
            };

            logger.info('üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', stats);
            return stats;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞', error);
            return { error: error.message };
        }
    }

    // ===== –°–ò–°–¢–ï–ú–ê –£–†–û–í–ù–ï–ô =====

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserLevel(userId) {
        try {
            const user = await this.getUser(userId);
            return user.level || {
                current: 1,
                experience: 0,
                nextLevelExp: 100
            };
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
            return {
                current: 1,
                experience: 0,
                nextLevelExp: 100
            };
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async addExperience(userId, expAmount, reason = 'unknown') {
        try {
            const user = await this.getUser(userId);
            let userLevel = user.level || {
                current: 1,
                experience: 0,
                nextLevelExp: 100
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
            userLevel.experience += expAmount;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            let leveledUp = false;
            while (userLevel.experience >= userLevel.nextLevelExp) {
                userLevel.experience -= userLevel.nextLevelExp;
                userLevel.current++;
                userLevel.nextLevelExp = Math.floor(userLevel.nextLevelExp * 1.5); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–π –æ–ø—ã—Ç
                leveledUp = true;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await this.db.collection('users').updateOne(
                { userId: Number(userId) },
                {
                    $set: {
                        level: userLevel,
                        lastActivity: new Date()
                    }
                }
            );

            logger.info('–û–ø—ã—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
                userId,
                expAdded: expAmount,
                newLevel: userLevel.current,
                newExp: userLevel.experience,
                leveledUp,
                reason
            });

            return {
                success: true,
                level: userLevel,
                leveledUp,
                expAdded: expAmount
            };

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', error, { userId, expAmount, reason });
            return { success: false, error: error.message };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    getRequiredExpForLevel(level) {
        // –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è 1: 100
        // –ö–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç –Ω–∞ 50% –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞
        return Math.floor(100 * Math.pow(1.5, level - 1));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    getLevelProgress(currentExp, nextLevelExp) {
        if (nextLevelExp === 0) return 100;
        return Math.floor((currentExp / nextLevelExp) * 100);
    }

    // ===== –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –£–†–û–í–ù–ï–ô =====
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    stopMiningIncomeScheduler() {
        try {
            if (this.miningIncomeInterval) {
                clearInterval(this.miningIncomeInterval);
                this.miningIncomeInterval = null;
                logger.info('üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞', error);
        }
    }

    async createIndexes() {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            const collections = ['users', 'transactions', 'settings'];
            for (const collectionName of collections) {
                try {
                    await this.db.createCollection(collectionName);
                    logger.info(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} —Å–æ–∑–¥–∞–Ω–∞`);
                } catch (error) {
                    // –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    logger.info(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                }
            }
            
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ userId, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –≤ database.js)
            try {
                await this.db.collection('users').createIndex({ userId: 1 }, { unique: true });
            } catch (error) {
                // –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                logger.info('–ò–Ω–¥–µ–∫—Å userId –¥–ª—è users —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            try {
                await this.db.collection('transactions').createIndex({ userId: 1 });
                await this.db.collection('transactions').createIndex({ timestamp: -1 });
            } catch (error) {
                logger.info('–ò–Ω–¥–µ–∫—Å—ã –¥–ª—è transactions —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
            }
            
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–ª—é—á–µ–π
            try {
                await this.db.createCollection('keys');
                await this.db.collection('keys').createIndex({ key: 1 }, { unique: true });
                await this.db.collection('keys').createIndex({ isActive: 1 });
            } catch (error) {
                logger.info('–ö–æ–ª–ª–µ–∫—Ü–∏—è keys —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            
            logger.info('–ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤', error);
        }
    }

    async createUserActivityCollection() {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try {
                await this.db.createCollection('user_activity');
                logger.info('–ö–æ–ª–ª–µ–∫—Ü–∏—è user_activity —Å–æ–∑–¥–∞–Ω–∞');
            } catch (error) {
                logger.info('–ö–æ–ª–ª–µ–∫—Ü–∏—è user_activity —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            
            // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            try {
                await this.db.collection('user_activity').createIndex({ userId: 1 });
                await this.db.collection('user_activity').createIndex({ lastActivity: -1 });
                await this.db.collection('user_activity').createIndex({ userId: 1, lastActivity: -1 });
                logger.info('–ò–Ω–¥–µ–∫—Å—ã –¥–ª—è user_activity —Å–æ–∑–¥–∞–Ω—ã');
            } catch (error) {
                logger.info('–ò–Ω–¥–µ–∫—Å—ã –¥–ª—è user_activity —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ user_activity', error);
        }
    }

    async createDefaultData() {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settingsCollection = this.db.collection('settings');
            const existingSettings = await settingsCollection.findOne({ type: 'system' });
            
            if (!existingSettings) {
                await settingsCollection.insertOne({
                    type: 'system',
                    botStats: {
                        totalUsers: 0,
                        totalStarsWithdrawn: 0,
                        totalCoinsEarned: 0,
                        activeReferrals: 0
                    },
                    exchangeRates: {
                        starToCoin: 10,
                        coinToStar: 0.1
                    },
                    referralRewards: {
                        level1: { stars: 5, coins: 0 },
                        level2: { stars: 3, coins: 0 },
                        level3: { stars: 1, coins: 0 }
                    },
                    createdAt: new Date(),
                    updatedAt: new Date()
                });
                
                logger.info('–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', error);
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===
    
    async getUser(userId) {
        try {
            logger.info('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', {
                userId,
                instanceId: this.constructor.name,
                isInitialized: this.isInitialized,
                timestamp: new Date().toISOString()
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.updateUserActivity(userId);

            const user = await this.db.collection('users').findOne({ userId: Number(userId) });

            if (!user) {
                logger.info('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ', { userId });

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const newUser = {
                    userId: Number(userId),
                    username: null,
                    firstName: null,
                    lastName: null,
                    balance: {
                        stars: 0,
                        coins: 0,
                        totalEarned: { stars: 0, coins: 0 }
                    },
                level: {
                    current: 1,
                    experience: 0,
                    nextLevelExp: 100
                },
                    referral: {
                        referralId: null,
                        referrerId: null,
                        totalEarned: { stars: 0, coins: 0 },
                        level: 1,
                        hasReceivedReferralBonus: false
                    },
                    subscription: {
                        isConfirmed: false,
                        confirmedAt: null
                    },
                    titles: {
                        current: 'novice',
                        unlocked: ['novice'],
                        history: []
                    },
                    miners: [],
                    createdAt: new Date(),
                    lastActivity: new Date()
                };

                await this.db.collection('users').insertOne(newUser);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
                await this.updateBotStats('totalUsers', 1);

                logger.info('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
                    userId,
                    balance: newUser.balance,
                    timestamp: new Date().toISOString()
                });
                return newUser;
            }

            logger.info('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', {
                userId,
                balance: user.balance,
                lastActivity: user.lastActivity,
                timestamp: new Date().toISOString()
            });

            return user;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, {
                userId,
                errorStack: error.stack
            });
            throw error;
        }
    }

    async updateUser(userId, updateData) {
        try {
            const result = await this.db.collection('users').updateOne(
                { userId: Number(userId) },
                { 
                    $set: { 
                        ...updateData,
                        lastActivity: new Date()
                    }
                }
            );
            
            if (result.modifiedCount > 0) {
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', { userId, updateData });
            }
            
            return result;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId, updateData });
            throw error;
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–ú ===
    
    async getUserBalance(userId) {
        try {
            const user = await this.getUser(userId);
            return user.balance;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
            return { stars: 0, coins: 0, totalEarned: { stars: 0, coins: 0 } };
        }
    }
    
    async updateBalance(userId, currency, amount, reason = 'transaction') {
        const session = this.db.client.startSession();

        try {
            logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', {
                userId,
                currency,
                amount,
                reason,
                instanceId: this.constructor.name,
                isInitialized: this.isInitialized,
                timestamp: new Date().toISOString()
            });

            return await session.withTransaction(async () => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const user = await this.db.collection('users').findOne(
                    { userId: userId },
                    { session }
                );

                if (!user) {
                    throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                }

                const oldBalance = user.balance[currency] || 0;
                const oldTotalEarned = user.balance.totalEarned?.[currency] || 0;

                logger.info('üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
                    userId,
                    currency,
                    oldBalance,
                    oldTotalEarned,
                    operation: amount > 0 ? 'increase' : 'decrease'
                });

                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                const updateObj = {
                    $set: { lastActivity: new Date() }
                };

                // –ê—Ç–æ–º–∞—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ totalEarned
                if (amount > 0) {
                    // –î–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ –ø–æ–ª—è
                    updateObj.$inc = {
                        [`balance.${currency}`]: amount,
                        [`balance.totalEarned.${currency}`]: amount
                    };
                } else {
                    // –î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—É–º–º –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å
                    updateObj.$inc = {
                        [`balance.${currency}`]: amount
                    };
                }

                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã—à–µ), –ø–æ—ç—Ç–æ–º—É $setOnInsert –Ω–µ –Ω—É–∂–µ–Ω

                logger.info('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
                    userId,
                    currency,
                    updateObj,
                    timestamp: new Date().toISOString()
                });

                // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const updateResult = await this.db.collection('users').updateOne(
                    { userId: userId },
                    updateObj,
                    { session }
                );

                if (updateResult.matchedCount === 0) {
                    throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
                }

                logger.info('üíæ –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
                    userId,
                    currency,
                    matchedCount: updateResult.matchedCount,
                    modifiedCount: updateResult.modifiedCount,
                    acknowledged: updateResult.acknowledged
                });

                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                const updatedUser = await this.db.collection('users').findOne(
                    { userId: userId },
                    { session }
                );

                const newBalance = updatedUser.balance[currency] || 0;
                const newTotalEarned = updatedUser.balance.totalEarned?.[currency] || 0;

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Ç–æ–π –∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                await this.addTransaction(userId, currency, amount, reason, oldBalance, newBalance, session);

                logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
                    userId,
                    currency,
                    amount,
                    reason,
                    oldBalance,
                    newBalance,
                    oldTotalEarned,
                    newTotalEarned,
                    timestamp: new Date().toISOString(),
                    source: 'DataManager.updateBalance'
                });

                return newBalance;
            });

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', error, {
                userId,
                currency,
                amount,
                reason,
                errorStack: error.stack
            });
            throw error;
        } finally {
            await session.endSession();
        }
    }



    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò ===
    
    async addTransaction(userId, currency, amount, reason, oldBalance, newBalance, session = null) {
        try {
            const transaction = {
                userId: Number(userId),
                currency,
                amount,
                reason,
                oldBalance,
                newBalance,
                timestamp: new Date()
            };

            const options = session ? { session } : {};
            const result = await this.db.collection('transactions').insertOne(transaction, options);

            if (result.insertedId) {
                logger.info('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', {
                    userId,
                    currency,
                    amount,
                    reason,
                    transactionId: result.insertedId,
                    inTransaction: !!session
                });
            } else {
                logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', { userId, currency, amount, reason, inTransaction: !!session });
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', error, {
                userId,
                currency,
                amount,
                reason,
                inTransaction: !!session
            });
            throw error; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤—ã—à–µ –¥–ª—è –æ—Ç–∫–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–ê–ú–ò ===
    
    async getUserByReferralId(referralId) {
        try {
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
            const user = await this.db.collection('users').findOne({ userId: Number(referralId) });
            
            if (user) {
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID', { referralId, userId: user.userId });
            return user;
            } else {
                logger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID', { referralId });
                return null;
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID', error, { referralId });
            return null;
        }
    }
    
    async setupReferral(userId, referrerId = null, userData = null) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ
            if (userData) {
                await this.updateUserProfile(userId, userData);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            if (referrerId && Number(referrerId) === userId) {
                logger.warn('–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞', { userId, referrerId });
                
                // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                const user = await this.getUser(userId);
                
                // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å referralId, –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
                if (user.referral && user.referral.referralId) {
                    logger.info('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', { userId, existingReferralId: user.referral.referralId });
                    return user.referral;
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                const referralData = {
                    referralId: userId,
                    referrerId: null,
                    totalEarned: { stars: 0, coins: 0 },
                    level: 1,
                    hasReceivedReferralBonus: true
                };
                
                await this.updateUser(userId, { referral: referralData });
                
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)', { userId });
                return referralData;
            }
            
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getUser(userId);
            
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å referralId, –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            if (user.referral && user.referral.referralId) {
                logger.info('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', { userId, existingReferralId: user.referral.referralId });
                return user.referral;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if (user.referral && user.referral.hasReceivedReferralBonus) {
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', { userId });
                return user.referral;
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á—å–∏–º-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
            if (referrerId) {
                const existingReferral = await this.db.collection('referrals').findOne({
                    userId: Number(userId)
                });
                
                if (existingReferral) {
                    logger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —á—å–∏–º-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º', { 
                        userId, 
                        existingReferrerId: existingReferral.referrerId,
                        requestedReferrerId: referrerId 
                    });
                    
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    return user.referral || {
                        referralId: userId,
                        referrerId: existingReferral.referrerId,
                        totalEarned: { stars: 0, coins: 0 },
                        level: 1,
                        hasReceivedReferralBonus: true
                    };
                }
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π referralId (–∏—Å–ø–æ–ª—å–∑—É–µ–º userId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            let referralId = userId;
            let actualReferrerId = null;
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            if (referrerId) {
                const referrer = await this.getUser(Number(referrerId));
                if (referrer && referrer.userId !== userId) {
                    actualReferrerId = Number(referrerId);
                    logger.info('–ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ ID', { userId, referrerId: actualReferrerId });
                } else {
                    logger.warn('–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π', { userId, referrerId, referrerFound: !!referrer });
                }
            }
            
            const referralData = {
                referralId: referralId,
                referrerId: actualReferrerId,
                totalEarned: { stars: 0, coins: 0 },
                level: 1,
                hasReceivedReferralBonus: false
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.updateUser(userId, { referral: referralData });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            if (actualReferrerId) {
                logger.info('–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞', { referrerId: actualReferrerId, newUserId: userId });
                
                await this.addReferralToUser(actualReferrerId, userId);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
                const referralAdded = await this.db.collection('referrals').findOne({
                    userId: Number(userId),
                    referrerId: Number(actualReferrerId)
                });
                
                if (!referralAdded) {
                    logger.warn('–†–µ—Ñ–µ—Ä–∞–ª –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã', { 
                        referrerId: actualReferrerId, 
                        newUserId: userId 
                    });
                    return referralData;
                }
                
                // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É (5 –∑–≤–µ–∑–¥ + 1000 –º–∞–≥–Ω—É–º –∫–æ–∏–Ω–æ–≤)
                logger.info('–ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É', { referrerId: actualReferrerId, stars: 5, coins: 1000 });
                await this.updateBalance(actualReferrerId, 'stars', 5, 'referral_reward');
                await this.updateBalance(actualReferrerId, 'coins', 1000, 'referral_reward');
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞', { referrerId: actualReferrerId, newUserId: userId, stars: 5, coins: 1000 });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                await this.sendReferralRewardNotification(actualReferrerId, userId, { stars: 5, coins: 1000 });
                
                // –¢–∞–∫–∂–µ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
                logger.info('–ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { userId, reward: 1000, currency: 'coins' });
                await this.updateBalance(userId, 'coins', 1000, 'referral_registration_bonus');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É
                await this.updateUser(userId, { 'referral.hasReceivedReferralBonus': true });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await this.sendReferralRegistrationNotification(userId, actualReferrerId, { coins: 1000 });
                
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É', { userId, reward: 1000, currency: 'coins' });
            } else if (referrerId) {
                // –ï—Å–ª–∏ ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Ç–µ—Ä—è–ª–∏ –±–æ–Ω—É—Å—ã
                logger.info('–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { userId, reward: 1000, currency: 'coins', referrerId });
                await this.updateBalance(userId, 'coins', 1000, 'referral_registration_bonus');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É
                await this.updateUser(userId, { 'referral.hasReceivedReferralBonus': true });
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞)
                await this.sendReferralRegistrationNotification(userId, null, { coins: 1000 });
                
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É (—Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)', { userId, reward: 1000, currency: 'coins', referrerId });
            }
            
            logger.info('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', { userId, referrerId: actualReferrerId, referralId });
            
            return referralData;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', error, { userId, referrerId });
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è, username)
    async updateUserProfile(userId, userData) {
        try {
            logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, userData });
            
            const updateData = {};
            
            // –û–±–Ω–æ–≤–ª—è–µ–º firstName –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if (userData.firstName && userData.firstName.trim()) {
                updateData.firstName = userData.firstName.trim();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if (userData.username && userData.username.trim()) {
                updateData.username = userData.username.trim();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º lastName –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if (userData.lastName && userData.lastName.trim()) {
                updateData.lastName = userData.lastName.trim();
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º telegramUsername –µ—Å–ª–∏ username –ø–µ—Ä–µ–¥–∞–Ω
            if (userData.username && userData.username.trim()) {
                updateData.telegramUsername = userData.username.trim();
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (Object.keys(updateData).length > 0) {
                await this.updateUser(userId, updateData);
                logger.info('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω', { userId, updateData });
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId, userData });
        }
    }

    async addReferralToUser(referrerId, newUserId) {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { referrerId, newUserId });
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            const existingReferral = await this.db.collection('referrals').findOne({
                userId: Number(newUserId),
                referrerId: Number(referrerId)
            });
            
            if (existingReferral) {
                logger.warn('–†–µ—Ñ–µ—Ä–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', { 
                    referrerId, 
                    newUserId, 
                    existingReferralId: existingReferral._id 
                });
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals
            const referralRecord = {
                userId: Number(newUserId),
                referrerId: Number(referrerId),
                createdAt: new Date(),
                isActive: true,
                reward: { stars: 5, coins: 1000 } // 5 –∑–≤–µ–∑–¥ + 1000 –º–∞–≥–Ω—É–º –∫–æ–∏–Ω–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é referrals
            try {
                await this.db.collection('referrals').insertOne(referralRecord);
                logger.info('–ó–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals', { referrerId, newUserId, referralId: referralRecord._id });
            } catch (insertError) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                if (insertError.code === 11000) {
                    logger.warn('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º', { 
                        referrerId, 
                        newUserId, 
                        error: insertError.message 
                    });
                    return; // –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
                }
                throw insertError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
            const referrer = await this.getUser(referrerId);
            const currentEarned = referrer.referral.totalEarned || { stars: 0, coins: 0 };
            const newEarned = {
                stars: currentEarned.stars + 5, // 5 –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                coins: currentEarned.coins + 1000 // 1000 –º–∞–≥–Ω—É–º –∫–æ–∏–Ω–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            };
            
            logger.info('–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞', { referrerId, currentEarned, newEarned });
            await this.updateUser(referrerId, {
                'referral.totalEarned': newEarned
            });
            
            logger.info('–†–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { referrerId, newUserId, newEarned });
            

            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞', error, { referrerId, newUserId });
        }
    }



    async getReferralStats(userId) {
        try {
            const user = await this.getUser(userId);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals
            const referrals = await this.db.collection('referrals')
                .find({ referrerId: Number(userId) })
                .toArray();
            
            logger.info('–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals', { userId, referralsCount: referrals.length });
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ userId - —ç—Ç–æ —á–∏—Å–ª–æ
            const numericUserId = Number(userId);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            const baseStarsReward = 5; // 5 –∑–≤–µ–∑–¥ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            const baseCoinsReward = 1000; // 1000 –º–∞–≥–Ω—É–º –∫–æ–∏–Ω–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            const calculatedEarned = {
                stars: referrals.length * baseStarsReward,
                coins: referrals.length * baseCoinsReward
            };
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ (–±–µ—Ä–µ–º –±–æ–ª—å—à–µ–µ)
            const savedEarned = user.referral.totalEarned || { stars: 0, coins: 0 };
            const totalEarned = {
                stars: Math.max(calculatedEarned.stars, savedEarned.stars),
                coins: Math.max(calculatedEarned.coins, savedEarned.coins)
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –±–æ–ª—å—à–µ
            if (totalEarned.stars > savedEarned.stars || totalEarned.coins > savedEarned.coins) {
                await this.updateUser(userId, {
                    'referral.totalEarned': totalEarned
                });
                logger.info('–û–±–Ω–æ–≤–ª–µ–Ω totalEarned –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, oldEarned: savedEarned, newEarned: totalEarned });
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            const activeReferralsStats = await this.getActiveReferralsStats(userId);
            
            return {
                referralId: numericUserId, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
                totalReferrals: referrals.length,
                activeReferrals: activeReferralsStats.activeReferrals,
                totalEarned: totalEarned,
                level: user.referral.level || 1,
                referrals: referrals,
                isActiveReferrer: activeReferralsStats.isActiveReferrer
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error, { userId });
            
            return {
                referralId: Number(userId),
                totalReferrals: 0,
                activeReferrals: 0,
                totalEarned: { stars: 0, coins: 0 },
                level: 1,
                referrals: []
            };
        }
    }



    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–¢–£–õ–ê–ú–ò ===
    
    async getCurrentTitle(userId) {
        try {
            const user = await this.getUser(userId);
            return user.titles.current;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏—Ç—É–ª–∞', error, { userId });
            throw error;
        }
    }

    async unlockTitle(userId, titleId) {
        try {
            const user = await this.getUser(userId);
            const unlockedTitles = [...user.titles.unlocked];
            
            if (!unlockedTitles.includes(titleId)) {
                unlockedTitles.push(titleId);
                
                await this.updateUser(userId, {
                    'titles.unlocked': unlockedTitles,
                    'titles.history': [...user.titles.history, {
                        titleId,
                        timestamp: new Date(),
                        action: 'unlock'
                    }]
                });
                
                logger.info('–¢–∏—Ç—É–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', { userId, titleId });
            }
            
            return unlockedTitles;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∏—Ç—É–ª–∞', error, { userId, titleId });
            throw error;
        }
    }

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê ===
    
    async getBotStats() {
        try {
            const settings = await this.db.collection('settings').findOne({ type: 'system' });
            return settings ? settings.botStats : {
                totalUsers: 0,
                totalStarsWithdrawn: 0,
                totalCoinsEarned: 0,
                activeReferrals: 0
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞', error);
            return {
                totalUsers: 0,
                totalStarsWithdrawn: 0,
                totalCoinsEarned: 0,
                activeReferrals: 0
            };
        }
    }

    async updateBotStats(field, value) {
        try {
            await this.db.collection('settings').updateOne(
                { type: 'system' },
                { 
                    $inc: { [`botStats.${field}`]: value },
                    $set: { updatedAt: new Date() }
                }
            );
            
            logger.info('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', { field, value });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞', error, { field, value });
        }
    }

    // === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    
    async getTotalUsers() {
        try {
            const count = await this.db.collection('users').countDocuments();
            return count;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
            return 0;
        }
    }

    async getTotalStarsWithdrawn() {
        try {
            const result = await this.db.collection('transactions').aggregate([
                { $match: { currency: 'stars', amount: { $lt: 0 } } },
                { $group: { _id: null, total: { $sum: { $abs: '$amount' } } } }
            ]).toArray();
            
            return result.length > 0 ? result[0].total : 0;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥', error);
            return 0;
        }
    }

    

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ô–ù–ï–†–ê–ú–ò ===
    
    // –ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–µ—Ä–∞
    async buyMiner(userId, minerType) {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É –º–∞–π–Ω–µ—Ä–∞', { userId, minerType });
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–µ
            const minerInfo = this.getMinerInfo(minerType);
            if (!minerInfo) {
                throw new Error('–ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getUser(userId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –º–∞–π–Ω–µ—Ä–æ–≤
            const userMinerCount = await this.getUserMinerCount(userId, minerType);
            const globalMinerCount = await this.getGlobalMinerCount(minerType);
            
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤', { 
                userId, 
                minerType, 
                userMinerCount, 
                globalMinerCount,
                maxPerUser: minerInfo.maxPerUser,
                globalLimit: minerInfo.globalLimit
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (userMinerCount >= minerInfo.maxPerUser) {
                throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–∞–π–Ω–µ—Ä–æ–≤ "${minerInfo.name}" –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${minerInfo.maxPerUser})`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if (globalMinerCount >= minerInfo.globalLimit) {
                throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –æ–±—â–∏–π –ª–∏–º–∏—Ç –º–∞–π–Ω–µ—Ä–æ–≤ "${minerInfo.name}" –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (${minerInfo.globalLimit})`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
            const canAfford = (user.balance.coins >= minerInfo.price.coins) && 
                             (user.balance.stars >= minerInfo.price.stars);
            
            if (!canAfford) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞');
            }
            
            // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            if (minerInfo.price.coins > 0) {
                await this.updateBalance(userId, 'coins', -minerInfo.price.coins, 'miner_purchase');
            }
            if (minerInfo.price.stars > 0) {
                await this.updateBalance(userId, 'stars', -minerInfo.price.stars, 'miner_purchase');
            }
            
            // –°–æ–∑–¥–∞–µ–º –º–∞–π–Ω–µ—Ä
            const miner = {
                id: this.generateMinerId(),
                type: minerType,
                name: minerInfo.name,
                speed: minerInfo.speed,
                rarity: minerInfo.rarity,
                purchaseDate: new Date(),
                lastCollection: new Date(),
                lastMiningStart: null, // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
                isActive: true,
                level: 1,
                experience: 0
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const userMiners = user.miners || [];
            userMiners.push(miner);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –º–∞–π–Ω–µ—Ä–∞–º–∏
            await this.updateUser(userId, { miners: userMiners });
            
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω –º–∞–π–Ω–∏–Ω–≥, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞–π–Ω–µ—Ä –∫ –∞–∫—Ç–∏–≤–Ω—ã–º
            const hasActiveMining = userMiners.some(m => m.isActive && m.lastMiningStart);
            if (hasActiveMining) {
                logger.info('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω –º–∞–π–Ω–∏–Ω–≥, –Ω–æ–≤—ã–π –º–∞–π–Ω–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∞–∫—Ç–∏–≤–Ω—ã–º', { 
                    userId, 
                    minerId: miner.id, 
                    totalMiners: userMiners.length 
                });
            }
            
            logger.info('–ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω', { userId, minerType, minerId: miner.id });
            
            return miner;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞', error, { userId, minerType });
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserMiners(userId) {
        try {
            const user = await this.getUser(userId);
            return user.miners || [];
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
            return [];
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ (—Ä–∞–∑ –≤ 4 —á–∞—Å–∞ –¥–ª—è novice, —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤ –¥–ª—è limited)
    async startMining(userId) {
        try {
            logger.info('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞', { userId });
            
            const user = await this.getUser(userId);
            const miners = user.miners || [];
            
            if (miners.length === 0) {
                return { success: false, message: '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞' };
            }
            
            const now = new Date();
            let canStartMining = false;
            let nextStartTime = null;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥
            // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–π–Ω–µ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è - —Ä–∞–∑—Ä–µ—à–∞–µ–º
            for (const miner of miners) {
                if (!miner.isActive) continue;
                
                if (!miner.lastMiningStart) {
                    canStartMining = true;
                    break;
                }
                
                const timeSinceLastStart = now - new Date(miner.lastMiningStart);
                const hoursSinceLastStart = timeSinceLastStart / (1000 * 60 * 60);
                
                // –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤
                let requiredHours = 4; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 —á–∞—Å–∞
                if (miner.type === 'limited') {
                    requiredHours = 12;
                } else if (miner.type === 'epic') {
                    requiredHours = 8; // –ï–ø–∏—á–µ—Å–∫–∏–π –º–∞–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç 8 —á–∞—Å–æ–≤
                }
                
                if (hoursSinceLastStart >= requiredHours) {
                    canStartMining = true;
                    break;
                }
            }
            
            // –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            if (!canStartMining) {
                const earliestNextStart = new Date(Math.min(...miners
                    .filter(m => m.isActive && m.lastMiningStart)
                    .map(m => {
                        const requiredHours = m.type === 'limited' ? 12 : 4;
                        return new Date(m.lastMiningStart).getTime() + (requiredHours * 60 * 60 * 1000);
                    })
                ));
                
                const timeUntilNext = earliestNextStart - now;
                const hoursUntilNext = Math.ceil(timeUntilNext / (1000 * 60 * 60));
                
                return { 
                    success: false, 
                    message: `–ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤–æ–∑–º–æ–∂–µ–Ω —á–µ—Ä–µ–∑ ${hoursUntilNext} —á–∞—Å–æ–≤`,
                    nextStartTime: earliestNextStart
                };
            }
            
            if (!canStartMining) {
                return { 
                    success: false, 
                    message: `–ú–∞–π–Ω–∏–Ω–≥ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ ${Math.ceil((nextStartTime - now) / (1000 * 60 * 60))} —á–∞—Å–æ–≤`,
                    nextStartTime: nextStartTime
                };
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
            for (const miner of miners) {
                if (miner.isActive) {
                    miner.lastMiningStart = now;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.updateUser(userId, { miners: miners });
            
            // –°—Ä–∞–∑—É –Ω–∞—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞
            let totalCoins = 0;
            let totalStars = 0;
            
            for (const miner of miners) {
                if (miner.isActive) {
                    totalCoins += miner.speed.coins;
                    totalStars += miner.speed.stars;
                }
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É
            if (totalCoins > 0) {
                await this.updateBalance(userId, 'coins', totalCoins, 'mining_income_start');
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ (Coins)', { userId, totalCoins });
            }
            if (totalStars > 0) {
                await this.updateBalance(userId, 'stars', totalStars, 'mining_income_start');
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ (Stars)', { userId, totalStars });
            }
            
            logger.info('–ú–∞–π–Ω–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω', { userId, startTime: now, initialReward: { coins: totalCoins, stars: totalStars } });
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Ö–æ–¥–µ
            let rewardMessage = '–ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! ';
            if (totalCoins > 0) {
                rewardMessage += `–ü–æ–ª—É—á–µ–Ω–æ ${totalCoins} ü™ô Coins –∑–∞ –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É. `;
            }
            if (totalStars > 0) {
                rewardMessage += `–ü–æ–ª—É—á–µ–Ω–æ ${totalStars} ‚≠ê Stars –∑–∞ –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É. `;
            }
            rewardMessage += '–î–æ—Ö–æ–¥ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.';
            
            return { 
                success: true, 
                message: rewardMessage,
                startTime: now,
                initialReward: { coins: totalCoins, stars: totalStars }
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞', error, { userId });
            throw error;
        }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π)
    async processMiningIncome(userId) {
        try {
            const user = await this.getUser(userId);
            const miners = user.miners || [];
            
            if (miners.length === 0) {
                return { coins: 0, stars: 0 };
            }
            
            let totalCoins = 0;
            let totalStars = 0;
            const now = new Date();
            
            logger.info('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞', { userId, minersCount: miners.length });
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞
            for (const miner of miners) {
                if (!miner.isActive || !miner.lastMiningStart) {
                    logger.debug('–ú–∞–π–Ω–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω', { 
                        userId, 
                        minerId: miner.id, 
                        isActive: miner.isActive, 
                        lastMiningStart: miner.lastMiningStart 
                    });
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–π–Ω–∏–Ω–≥ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –º–µ–Ω–µ–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∑–∞–¥
                const timeSinceMiningStart = now - new Date(miner.lastMiningStart);
                const hoursSinceStart = timeSinceMiningStart / (1000 * 60 * 60);
                
                // –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤
                let requiredHours = 4; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 —á–∞—Å–∞
                if (miner.type === 'limited') {
                    requiredHours = 12;
                } else if (miner.type === 'epic') {
                    requiredHours = 8; // –ï–ø–∏—á–µ—Å–∫–∏–π –º–∞–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç 8 —á–∞—Å–æ–≤
                }
                
                if (hoursSinceStart < requiredHours) {
                    // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É (—Å–∫–æ—Ä–æ—Å—Ç—å —É–∂–µ –≤ –º–∏–Ω—É—Ç—É)
                    const coinsEarned = miner.speed.coins; // –î–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É (1 Coin)
                    const starsEarned = miner.speed.stars; // –î–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É
                    
                    totalCoins += coinsEarned;
                    totalStars += starsEarned;
                    
                    logger.debug('–ú–∞–π–Ω–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥', { 
                        userId, 
                        minerId: miner.id, 
                        minerType: miner.type,
                        coinsEarned, 
                        starsEarned,
                        hoursSinceStart: Math.round(hoursSinceStart * 100) / 100
                    });
                } else {
                    logger.debug(`–ú–∞–π–Ω–∏–Ω–≥ –º–∞–π–Ω–µ—Ä–∞ –∏—Å—Ç–µ–∫ (–±–æ–ª–µ–µ ${requiredHours} —á–∞—Å–æ–≤)`, { 
                        userId, 
                        minerId: miner.id, 
                        hoursSinceStart: Math.round(hoursSinceStart * 100) / 100,
                        requiredHours
                    });
                }
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥
            if (totalCoins > 0) {
                await this.updateBalance(userId, 'coins', totalCoins, 'mining_income_auto');
                logger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω (Coins)', { userId, totalCoins });
            }
            if (totalStars > 0) {
                await this.updateBalance(userId, 'stars', totalStars, 'mining_income_auto');
                logger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω (Stars)', { userId, totalStars });
            }
            
            if (totalCoins > 0 || totalStars > 0) {
                logger.info('üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω', { userId, totalCoins, totalStars });
            } else {
                logger.debug('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤)', { userId });
            }
            
            return { coins: totalCoins, stars: totalStars };
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞', error, { userId });
            return { coins: 0, stars: 0 };
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥ (–ø–æ—Å–ª–µ —Ä–µ–¥–µ–ø–ª–æ—è)
    async processMissedMiningRewards(userId) {
        try {
            const user = await this.getUser(userId);
            const miners = user.miners || [];
            
            if (miners.length === 0) {
                return { coins: 0, stars: 0, minutesProcessed: 0 };
            }
            
            let totalCoins = 0;
            let totalStars = 0;
            let totalMinutesProcessed = 0;
            const now = new Date();
            
            logger.info('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥', { userId, minersCount: miners.length });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞
            for (const miner of miners) {
                if (!miner.isActive || !miner.lastMiningStart) continue;
                
                const miningStartTime = new Date(miner.lastMiningStart);
                const timeSinceStart = now - miningStartTime;
                const hoursSinceStart = timeSinceStart / (1000 * 60 * 60);
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ–º–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ç–∏–ø–∞ –º–∞–π–Ω–µ—Ä–∞
                let requiredHours = 4; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4 —á–∞—Å–∞
                if (miner.type === 'limited') {
                    requiredHours = 12;
                } else if (miner.type === 'epic') {
                    requiredHours = 8;
                }
                
                // –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –º–µ–Ω–µ–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–∑–∞–¥
                if (hoursSinceStart < requiredHours) {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç
                    const minutesSinceStart = Math.floor(timeSinceStart / (1000 * 60));
                    const maxMinutes = requiredHours * 60; // –ú–∞–∫—Å–∏–º—É–º –≤ –º–∏–Ω—É—Ç–∞—Ö
                    const minutesToProcess = Math.min(minutesSinceStart, maxMinutes);
                    
                    if (minutesToProcess > 0) {
                        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã
                        const coinsEarned = miner.speed.coins * minutesToProcess;
                        const starsEarned = miner.speed.stars * minutesToProcess;
                        
                        totalCoins += coinsEarned;
                        totalStars += starsEarned;
                        totalMinutesProcessed += minutesToProcess;
                        
                        logger.info('–ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–µ—Ä', { 
                            userId, 
                            minerId: miner.id, 
                            minerType: miner.type,
                            minutesProcessed: minutesToProcess,
                            coinsEarned,
                            starsEarned
                        });
                    }
                }
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
            if (totalCoins > 0 || totalStars > 0) {
                if (totalCoins > 0) {
                    await this.updateBalance(userId, 'coins', totalCoins, 'mining_income_missed');
                    logger.info('–ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥ (Coins)', { userId, totalCoins });
                }
                if (totalStars > 0) {
                    await this.updateBalance(userId, 'stars', totalStars, 'mining_income_missed');
                    logger.info('–ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥ (Stars)', { userId, totalStars });
                }
                
                logger.info('–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã', { 
                    userId, 
                    totalCoins, 
                    totalStars, 
                    totalMinutesProcessed 
                });
            }
            
            return { 
                coins: totalCoins, 
                stars: totalStars, 
                minutesProcessed: totalMinutesProcessed 
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥', error, { userId });
            return { coins: 0, stars: 0, minutesProcessed: 0 };
        }
    }
    
    // –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async processAllMissedMiningRewards() {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞)
            const usersWithMiners = await this.db.collection('users').find({
                'miners.0': { $exists: true }, // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–π–Ω–µ—Ä
                'lastActivity': { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            }).limit(100).toArray(); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑
            
            let totalUsersProcessed = 0;
            let totalCoinsAwarded = 0;
            let totalStarsAwarded = 0;
            let totalMinutesProcessed = 0;
            
            logger.info(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏: ${usersWithMiners.length}`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (const user of usersWithMiners) {
                try {
                    const result = await this.processMissedMiningRewards(user.userId);
                    
                    if (result.minutesProcessed > 0) {
                        totalUsersProcessed++;
                        totalCoinsAwarded += result.coins;
                        totalStarsAwarded += result.stars;
                        totalMinutesProcessed += result.minutesProcessed;
                        
                        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω', { 
                            userId: user.userId, 
                            coins: result.coins, 
                            stars: result.stars, 
                            minutes: result.minutesProcessed 
                        });
                    }
                } catch (userError) {
                    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userError, { userId: user.userId });
                }
            }
            
            logger.info('–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
                totalUsersProcessed,
                totalCoinsAwarded,
                totalStarsAwarded,
                totalMinutesProcessed
            });
            
            return {
                success: true,
                totalUsersProcessed,
                totalCoinsAwarded,
                totalStarsAwarded,
                totalMinutesProcessed
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–µ—Ä–µ
    getMinerInfo(minerType) {
        const miners = {
            'novice': {
                id: 'novice',
                name: '–ù–æ–≤–∏—á–æ–∫',
                price: { coins: 100, stars: 0 },
                speed: { coins: 1, stars: 0 }, // 1 Magnum Coin –≤ –º–∏–Ω—É—Ç—É
                rarity: '–û–±—ã—á–Ω—ã–π',
                maxPerUser: 10, // –ú–∞–∫—Å–∏–º—É–º 10 –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                globalLimit: 100 // –û–±—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            },
            'limited': {
                id: 'limited',
                name: '–õ–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è',
                price: { coins: 0, stars: 100 },
                speed: { coins: 0, stars: 0.001999 }, // 0.001999 Stars –≤ –º–∏–Ω—É—Ç—É
                rarity: '–†–µ–¥–∫–∏–π',
                maxPerUser: 5, // –ú–∞–∫—Å–∏–º—É–º 5 –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                globalLimit: 10 // –û–±—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–≤—Å–µ–≥–æ 10 –º–∞–π–Ω–µ—Ä–æ–≤)
            },
            'epic': {
                id: 'epic',
                name: '–ï–ø–∏—á–µ—Å–∫–∏–π',
                price: { coins: 10000, stars: 0 },
                speed: { coins: 0, stars: 0.6944 }, // 0.6944 Stars –≤ –º–∏–Ω—É—Ç—É
                rarity: '–ï–ø–∏—á–µ—Å–∫–∏–π',
                maxPerUser: 1, // –ú–∞–∫—Å–∏–º—É–º 1 –º–∞–π–Ω–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                globalLimit: 100 // –û–±—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–≤—Å–µ–≥–æ 100 –º–∞–π–Ω–µ—Ä–æ–≤)
            }
        };
        
        return miners[minerType];
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –º–∞–π–Ω–µ—Ä–∞
    generateMinerId() {
        return 'miner_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserMinerCount(userId, minerType) {
        try {
            const user = await this.getUser(userId);
            const userMiners = user.miners || [];
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–π–Ω–µ—Ä—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            const count = userMiners.filter(miner => miner.type === minerType).length;
            
            logger.info('–ü–æ–¥—Å—á–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, minerType, count });
            return count;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId, minerType });
            return 0;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async getGlobalMinerCount(minerType) {
        try {
            // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –º–∞–π–Ω–µ—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            const result = await this.db.collection('users').aggregate([
                { $unwind: '$miners' },
                { $match: { 'miners.type': minerType } },
                { $count: 'total' }
            ]).toArray();
            
            const count = result.length > 0 ? result[0].total : 0;
            
            logger.info('–ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', { minerType, count });
            return count;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–∏—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error, { minerType });
            return 0;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async getActiveMinersCount(minerType) {
        try {
            // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            const result = await this.db.collection('users').aggregate([
                { $unwind: '$miners' },
                { 
                    $match: { 
                        'miners.type': minerType,
                        'miners.isActive': true,
                        'miners.lastMiningStart': { $exists: true, $ne: null }
                    } 
                },
                { $count: 'total' }
            ]).toArray();
            
            const count = result.length > 0 ? result[0].total : 0;
            
            logger.info('–ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', { minerType, count });
            return count;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error, { minerType });
            return 0;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    async getMinerAvailability(minerType) {
        try {
            const minerInfo = this.getMinerInfo(minerType);
            if (!minerInfo) {
                return null;
            }
            
            const globalCount = await this.getGlobalMinerCount(minerType);
            const activeCount = await this.getActiveMinersCount(minerType);
            const available = Math.max(0, minerInfo.globalLimit - globalCount);
            
            return {
                type: minerType,
                name: minerInfo.name,
                price: minerInfo.price,
                speed: minerInfo.speed,
                rarity: minerInfo.rarity,
                maxPerUser: minerInfo.maxPerUser,
                globalLimit: minerInfo.globalLimit,
                globalCount: globalCount,
                activeCount: activeCount,
                available: available,
                isAvailable: available > 0
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–∞', error, { minerType });
            return null;
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤–µ–∑–¥
    async createWithdrawalRequest(userId, amount) {
        try {
            logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤–µ–∑–¥', { userId, amount });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getUser(userId);
            if (user.balance.stars < amount) {
                return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
            if (amount < 50) {
                return { success: false, message: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 50 ‚≠ê Stars' };
            }
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            const withdrawalRequest = {
                id: await this.generateWithdrawalId(),
                userId: Number(userId),
                firstName: user.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                username: user.username || user.telegramUsername || '@username',
                amount: amount,
                status: 'pending', // pending, approved, rejected
                createdAt: new Date(),
                processedAt: null,
                processedBy: null,
                comment: ''
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ
            await this.db.collection('withdrawals').insertOne(withdrawalRequest);
            
            // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã (–≤—ã—á–∏—Ç–∞–µ–º –∏–∑ –±–∞–ª–∞–Ω—Å–∞)
            await this.updateBalance(userId, 'stars', -amount, 'withdrawal_request');
            
            logger.info('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞', { userId, amount, requestId: withdrawalRequest.id });
            
            return { 
                success: true, 
                message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                requestId: withdrawalRequest.id,
                request: withdrawalRequest
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', error, { userId, amount });
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    async getWithdrawalRequests(status = 'pending') {
        try {
            const requests = await this.db.collection('withdrawals')
                .find({ status: status })
                .sort({ createdAt: -1 })
                .toArray();
            
            return requests;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥', error);
            return [];
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    async processWithdrawalRequest(requestId, action, adminId, comment = '') {
        try {
            logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', { requestId, action, adminId, comment });
            
            const request = await this.db.collection('withdrawals').findOne({ id: requestId });
            if (!request) {
                return { success: false, message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
            }
            
            if (request.status !== 'pending') {
                return { success: false, message: '–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' };
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getUser(request.userId);
            
            const updateData = {
                status: action === 'approve' ? 'approved' : 'rejected',
                processedAt: new Date(),
                processedBy: Number(adminId),
                firstName: user.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                username: user.username || user.telegramUsername || '@username'
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            await this.db.collection('withdrawals').updateOne(
                { id: requestId },
                { $set: updateData }
            );
            
            if (action === 'approve') {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
                await this.updateBotStats('totalStarsWithdrawn', request.amount);
                logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥', { 
                    amount: request.amount,
                    totalWithdrawn: request.amount
                });
            } else if (action === 'reject') {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
                await this.updateBalance(request.userId, 'stars', request.amount, 'withdrawal_rejected');
                logger.info('–ó–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏', { 
                    userId: request.userId, 
                    amount: request.amount 
                });
            }
            
            logger.info('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', { requestId, action, adminId });
            
            return { 
                success: true, 
                message: `–ó–∞—è–≤–∫–∞ ${action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}`,
                request: { ...request, ...updateData }
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', error, { requestId, action, adminId });
            throw error;
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    async generateWithdrawalId() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            const count = await this.db.collection('withdrawals').countDocuments();
            return (count + 1).toString();
        } catch (error) {
            // Fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            return 'wd_' + Date.now();
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
    async checkUserSubscription(userId, channelUsername = null, bot = null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultChannel = process.env.CHANNEL_USERNAME || '@magnumtap';
        const targetChannel = channelUsername || defaultChannel;
        try {
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, targetChannel });
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const user = await this.getUser(userId);
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
            if (user.subscription && user.subscription.isConfirmed) {
                return { 
                    success: true, 
                    isSubscribed: true, 
                    message: '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' 
                };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ Telegram API
            let isSubscribed = false;
            
            if (bot) {
                try {
                    // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
                    const cleanUsername = targetChannel.replace('@', '');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ getChatMember
                    const chatMember = await bot.getChatMember(`@${cleanUsername}`, userId);
                    
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 'left' –∏ –Ω–µ 'kicked'
                    isSubscribed = chatMember && 
                                  chatMember.status !== 'left' && 
                                  chatMember.status !== 'kicked';
                    
                    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram API', { 
                        userId, 
                        channelUsername: cleanUsername, 
                        status: chatMember?.status,
                        isSubscribed 
                    });
                    
                } catch (telegramError) {
                    logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram API', { 
                        userId, 
                        targetChannel, 
                        error: telegramError.message 
                    });
                    
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
                    isSubscribed = false;
                }
            } else {
                logger.warn('Bot instance –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', { userId });
                // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
                isSubscribed = true;
            }
            
            if (isSubscribed) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                await this.updateUser(userId, {
                    'subscription.isConfirmed': true,
                    'subscription.confirmedAt': new Date()
                });
                
                logger.info('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', { userId });
                
                return { 
                    success: true, 
                    isSubscribed: true, 
                    message: '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' 
                };
            } else {
                return { 
                    success: false, 
                    isSubscribed: false, 
                    message: '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª' 
                };
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', error, { userId });
            return { 
                success: false, 
                isSubscribed: false, 
                message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏' 
            };
        }
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º)
    async setSubscriptionStatus(userId, isConfirmed) {
        try {
            const updateData = {
                'subscription.isConfirmed': isConfirmed,
                'subscription.confirmedAt': isConfirmed ? new Date() : null
            };
            
            await this.updateUser(userId, updateData);
            
            logger.info('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω', { userId, isConfirmed });
            
            return { success: true };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏', error, { userId });
            throw error;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
    async canUserUseBot(userId) {
        try {
            const user = await this.getUser(userId);
            return user.subscription && user.subscription.isConfirmed;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É', error, { userId });
            return false;
        }
    }
    
    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–¢–£–õ–ê–ú–ò ===
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏—Ç—É–ª–µ
    getTitleInfo(titleId) {
        const titles = {
            novice: {
                id: 'novice',
                name: '–ù–æ–≤–∏—á–æ–∫',
                description: '–ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                rarity: '–û–±—ã—á–Ω—ã–π',
                requirements: { level: 1, stars: 0, coins: 0 },
                bonuses: { stars: 0, coins: 0 }
            },
            miner: {
                id: 'miner',
                name: '–ú–∞–π–Ω–µ—Ä',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤',
                rarity: '–û–±—ã—á–Ω—ã–π',
                requirements: { level: 5, stars: 100, coins: 500 },
                bonuses: { stars: 5, coins: 10 }
            },
            trader: {
                id: 'trader',
                name: '–¢—Ä–µ–π–¥–µ—Ä',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤',
                rarity: '–†–µ–¥–∫–∏–π',
                requirements: { level: 10, stars: 500, coins: 1000 },
                bonuses: { stars: 15, coins: 25 }
            },
            investor: {
                id: 'investor',
                name: '–ò–Ω–≤–µ—Å—Ç–æ—Ä',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤',
                rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π',
                requirements: { level: 20, stars: 1000, coins: 5000 },
                bonuses: { stars: 30, coins: 50 }
            },
            master: {
                id: 'master',
                name: '–ú–∞—Å—Ç–µ—Ä',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞',
                rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
                requirements: { level: 30, stars: 2500, coins: 10000 },
                bonuses: { stars: 50, coins: 100 }
            },
            legend: {
                id: 'legend',
                name: '–õ–µ–≥–µ–Ω–¥–∞',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
                rarity: '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π',
                requirements: { level: 50, stars: 5000, coins: 25000 },
                bonuses: { stars: 100, coins: 200 }
            },
            owner: {
                id: 'owner',
                name: '–í–ª–∞–¥–µ–ª–µ—Ü',
                description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞',
                rarity: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π',
                requirements: { level: 100, stars: 10000, coins: 50000 },
                bonuses: { stars: 200, coins: 500 },
                adminOnly: true
            }
        };
        
        return titles[titleId] || null;
    }
    
    // –í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async grantTitle(userId, titleId, adminId) {
        try {
            const user = await this.getUser(userId);
            const titleInfo = this.getTitleInfo(titleId);
            
            if (!titleInfo) {
                return { success: false, message: '–¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–∏—Ç—É–ª
            if (user.titles.unlocked.includes(titleId)) {
                return { success: false, message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ç–∏—Ç—É–ª' };
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updateData = {
                'titles.unlocked': [...user.titles.unlocked, titleId],
                'titles.history': [...user.titles.history, {
                    titleId: titleId,
                    grantedAt: new Date(),
                    grantedBy: adminId,
                    reason: '–í—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                }]
            };
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
            if (user.titles.unlocked.length === 1 && user.titles.unlocked[0] === 'novice') {
                updateData['titles.current'] = titleId;
            }
            
            await this.updateUser(userId, updateData);
            
            logger.info('–¢–∏—Ç—É–ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { userId, titleId, adminId });
            
            return { 
                success: true, 
                message: `–¢–∏—Ç—É–ª "${titleInfo.name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`,
                titleInfo: titleInfo
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–∞', error, { userId, titleId, adminId });
            throw error;
        }
    }
    
    // –ó–∞–±–∏—Ä–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async revokeTitle(userId, titleId, adminId) {
        try {
            const user = await this.getUser(userId);
            const titleInfo = this.getTitleInfo(titleId);
            
            if (!titleInfo) {
                return { success: false, message: '–¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ—Ç —Ç–∏—Ç—É–ª
            if (!user.titles.unlocked.includes(titleId)) {
                return { success: false, message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ç–∏—Ç—É–ª–∞' };
            }
            
            // –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª "–ù–æ–≤–∏—á–æ–∫"
            if (titleId === 'novice') {
                return { success: false, message: '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª "–ù–æ–≤–∏—á–æ–∫"' };
            }
            
            // –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª "–í–ª–∞–¥–µ–ª–µ—Ü" —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if (titleId === 'owner' && user.isAdmin) {
                return { success: false, message: '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª "–í–ª–∞–¥–µ–ª–µ—Ü" —É –≤–ª–∞–¥–µ–ª—å—Ü–∞' };
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUnlocked = user.titles.unlocked.filter(id => id !== titleId);
            const updateData = {
                'titles.unlocked': newUnlocked,
                'titles.history': [...user.titles.history, {
                    titleId: titleId,
                    revokedAt: new Date(),
                    revokedBy: adminId,
                    reason: '–ó–∞–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                }]
            };
            
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª –±—ã–ª –∑–∞–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ù–æ–≤–∏—á–æ–∫" –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
            if (user.titles.current === titleId) {
                updateData['titles.current'] = 'novice';
            }
            
            await this.updateUser(userId, updateData);
            
            logger.info('–¢–∏—Ç—É–ª –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, titleId, adminId });
            
            return { 
                success: true, 
                message: `–¢–∏—Ç—É–ª "${titleInfo.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
                titleInfo: titleInfo
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–±–∏—Ä–∞–Ω–∏—è —Ç–∏—Ç—É–ª–∞', error, { userId, titleId, adminId });
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserTitles(userId) {
        try {
            const user = await this.getUser(userId);
            const unlockedTitles = [];
            
            for (const titleId of user.titles.unlocked) {
                const titleInfo = this.getTitleInfo(titleId);
                if (titleInfo) {
                    unlockedTitles.push({
                        ...titleInfo,
                        isCurrent: user.titles.current === titleId
                    });
                }
            }
            
            return {
                current: user.titles.current,
                unlocked: unlockedTitles,
                history: user.titles.history || []
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
            return { current: 'novice', unlocked: [], history: [] };
        }
    }
    
    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ê–ú–ò ===
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    async createKey(keyData) {
        try {
            const key = {
                key: keyData.key,
                type: keyData.type, // 'stars', 'coins'
                reward: keyData.reward,
                maxUses: keyData.maxUses,
                currentUses: 0,
                createdAt: new Date(),
                createdBy: keyData.createdBy,
                isActive: true
            };
            
            await this.db.collection('keys').insertOne(key);
            
            logger.info('–ö–ª—é—á —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', { 
                key: key.key.substring(0, 6) + '...', 
                type: key.type,
                reward: key.reward,
                maxUses: key.maxUses 
            });
            
            return { success: true, key: key };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', error, { keyData });
            throw error;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞
    async createMinerKey(keyData) {
        try {
            const key = {
                key: keyData.key,
                type: 'miner',
                minerType: keyData.minerType, // 'novice' –∏–ª–∏ 'star_path'
                maxUses: keyData.maxUses,
                currentUses: 0,
                createdAt: new Date(),
                createdBy: keyData.createdBy,
                isActive: true
            };

            await this.db.collection('keys').insertOne(key);

            logger.info('–ö–ª—é—á –º–∞–π–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', {
                key: key.key.substring(0, 6) + '...',
                minerType: key.minerType,
                maxUses: key.maxUses
            });

            return { success: true, key: key };

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', error, { keyData });
            throw error;
        }
    }

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
    async activateKey(key, userId) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const keyDoc = await this.db.collection('keys').findOne({ 
                key: key, 
                isActive: true 
            });
            
            if (!keyDoc) {
                return { success: false, message: '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            if (keyDoc.currentUses >= keyDoc.maxUses) {
                return { success: false, message: '–ö–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –∫–ª—é—á —Ä–∞–Ω–µ–µ
            const activationRecord = await this.db.collection('key_activations').findOne({
                key: key,
                userId: Number(userId)
            });
            
            if (activationRecord) {
                return { success: false, message: '–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–ª—é—á' };
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            let rewardText = [];
            
            if (keyDoc.type === 'stars' && keyDoc.reward.stars > 0) {
                await this.updateBalance(userId, 'stars', keyDoc.reward.stars, 'key_activation');
                rewardText.push(`‚≠ê Stars: +${keyDoc.reward.stars}`);
            }
            
            if (keyDoc.type === 'coins' && keyDoc.reward.coins > 0) {
                await this.updateBalance(userId, 'coins', keyDoc.reward.coins, 'key_activation');
                rewardText.push(`ü™ô Magnum Coins: +${keyDoc.reward.coins}`);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–∞ –º–∞–π–Ω–µ—Ä–∞
            if (keyDoc.type === 'miner') {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–µ
                const minerInfo = MINER_TYPES[keyDoc.minerType.toUpperCase()];

                if (!minerInfo) {
                    return { success: false, message: '–¢–∏–ø –º–∞–π–Ω–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞
                const userBalance = await this.getUserBalance(userId);
                let canAfford = false;

                if (minerInfo.priceType === 'stars' && userBalance.stars >= minerInfo.price) {
                    canAfford = true;
                } else if (minerInfo.priceType === 'coins' && userBalance.coins >= minerInfo.price) {
                    canAfford = true;
                }

                if (!canAfford) {
                    return {
                        success: false,
                        message: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞ "${minerInfo.name}". –ù—É–∂–Ω–æ: ${minerInfo.price} ${minerInfo.priceType === 'stars' ? '‚≠ê' : 'ü™ô'}`
                    };
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                const serverMinerCounts = await this.getServerMinerCounts();
                if (serverMinerCounts[keyDoc.minerType.toUpperCase()] <= 0) {
                    return { success: false, message: `–ú–∞–π–Ω–µ—Ä "${minerInfo.name}" –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ` };
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const userMinerCount = await this.getUserMinerCount(userId, keyDoc.minerType);
                if (userMinerCount >= minerInfo.serverLimit / 10) { // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    return { success: false, message: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–∞–π–Ω–µ—Ä–æ–≤ "${minerInfo.name}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è` };
                }

                try {
                    // –°–æ–∑–¥–∞–µ–º –º–∞–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await this.createMinerForUser(userId, keyDoc.minerType);

                    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞–π–Ω–µ—Ä–∞
                    if (minerInfo.priceType === 'stars') {
                        await this.updateBalance(userId, 'stars', -minerInfo.price, 'miner_key_activation');
                    } else {
                        await this.updateBalance(userId, 'coins', -minerInfo.price, 'miner_key_activation');
                    }

                    // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    serverMinerCounts[keyDoc.minerType.toUpperCase()]--;
                    await this.updateServerMinerCounts(serverMinerCounts);

                    rewardText.push(`‚õèÔ∏è –ú–∞–π–Ω–µ—Ä: ${minerInfo.name}`);
                    rewardText.push(`üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${minerInfo.price} ${minerInfo.priceType === 'stars' ? '‚≠ê' : 'ü™ô'}`);
                    rewardText.push(`‚ö° –î–æ—Ö–æ–¥: ${minerInfo.rewardType === 'stars' ? minerInfo.rewardPerMinute + ' ‚≠ê/–º–∏–Ω' : minerInfo.rewardPerMinute + ' ü™ô/–º–∏–Ω'}`);

                } catch (error) {
                    logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –∏–∑ –∫–ª—é—á–∞', error, { userId, minerType: keyDoc.minerType });
                    return { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞–π–Ω–µ—Ä–∞' };
                }
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á–∞
            await this.db.collection('keys').updateOne(
                { key: key },
                { $inc: { currentUses: 1 } }
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            await this.updateKeyChannelMessage(key);
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–ª—é—á–∞
            await this.db.collection('key_activations').insertOne({
                key: key,
                userId: Number(userId),
                activatedAt: new Date(),
                reward: keyDoc.reward
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–ª—é—á–∞ (20 –æ–ø—ã—Ç–∞ –∑–∞ –∫–ª—é—á)
            const expResult = await this.addExperience(userId, 20, 'key_activation');
            logger.info('–û–ø—ã—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–ª—é—á–∞', expResult);
            
            logger.info('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', { 
                key: key.substring(0, 6) + '...', 
                userId, 
                reward: keyDoc.reward 
            });
            
            return {
                success: true,
                type: keyDoc.type,
                reward: keyDoc.reward,
                message: '–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!',
                rewardText: rewardText
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞', error, { key: key.substring(0, 6) + '...', userId });
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–µ–π
    async getKeysStats() {
        try {
            const totalKeys = await this.db.collection('keys').countDocuments();
            const activeKeys = await this.db.collection('keys').countDocuments({ isActive: true });
            const totalActivations = await this.db.collection('key_activations').countDocuments();
            
            return {
                totalKeys,
                activeKeys,
                totalActivations
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–µ–π', error);
            return { totalKeys: 0, activeKeys: 0, totalActivations: 0 };
        }
    }
    
    // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ===
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    async logMessageForDeletion(messageId, chatId, userId, messageType = 'bot') {
        try {
            const deletionTime = new Date(Date.now() + 15000); // 15 —Å–µ–∫—É–Ω–¥
            
            await this.db.collection('message_deletions').insertOne({
                messageId: messageId,
                chatId: chatId,
                userId: userId,
                messageType: messageType, // 'bot' –∏–ª–∏ 'user'
                createdAt: new Date(),
                deleteAt: deletionTime,
                isDeleted: false
            });
            
            logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ', { 
                messageId, 
                chatId, 
                userId, 
                messageType, 
                deleteAt: deletionTime 
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', error, { messageId, chatId, userId });
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    async getMessagesToDelete() {
        try {
            const now = new Date();
            
            const messages = await this.db.collection('message_deletions')
                .find({
                    deleteAt: { $lte: now },
                    isDeleted: false
                })
                .toArray();
            
            return messages;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', error);
            return [];
        }
    }
    
    // –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
    async markMessageAsDeleted(messageId) {
        try {
            await this.db.collection('message_deletions').updateOne(
                { messageId: messageId },
                { $set: { isDeleted: true, deletedAt: new Date() } }
            );
            
            logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ', { messageId });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ', error, { messageId });
    }
}

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ê–ô–ù–ï–†–û–í ===

    // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–ª—é—á–∞
    async createMinerForUser(userId, minerType) {
        try {
            const minerInfo = MINER_TYPES[minerType.toUpperCase()];

            if (!minerInfo) {
                throw new Error(`–¢–∏–ø –º–∞–π–Ω–µ—Ä–∞ ${minerType} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –ü–æ–ª—É—á–∞–µ–º –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userMiners = await this.getUserMiners(userId);
            if (!userMiners) {
                userMiners = [];
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–π–Ω–µ—Ä
            const newMiner = {
                id: `${minerType}_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`,
                type: minerType,
                name: minerInfo.name,
                power: minerInfo.power,
                price: minerInfo.price,
                profit: minerInfo.profit,
                createdAt: new Date(),
                lastProfit: new Date(),
                isActive: true
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä –≤ –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userMiners.push(newMiner);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await this.db.collection('user_miners').updateOne(
                { userId: Number(userId) },
                {
                    $set: {
                        userId: Number(userId),
                        miners: userMiners,
                        lastUpdated: new Date()
                    }
                },
                { upsert: true }
            );

            logger.info('–ú–∞–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–ª—é—á–∞', {
                userId,
                minerType,
                minerId: newMiner.id
            });

            return newMiner;

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId, minerType });
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async updateServerMinerCounts(counts) {
        try {
            await this.db.collection('server_data').updateOne(
                { type: 'miner_counts' },
                {
                    $set: {
                        counts: counts,
                        lastUpdated: new Date()
                    }
                },
                { upsert: true }
            );

            logger.info('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', { counts });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error, { counts });
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async getServerMinerCounts() {
        try {
            const result = await this.db.collection('server_data').findOne({ type: 'miner_counts' });
            return result ? result.counts : {};
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error);
            return {};
        }
    }



    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ userId)
    generateReferralCode(userId) {
        return userId.toString();
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
    async getUserByReferralCode(referralCode) {
        try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º referralCode –≤ —á–∏—Å–ª–æ, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —ç—Ç–æ userId
            const userId = parseInt(referralCode);
            if (isNaN(userId)) {
                logger.warn('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', { referralCode });
                return null;
            }

            const user = await this.getUser(userId);

            if (user) {
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É (userId)', {
                    referralCode,
                    userId: user.userId
                });
                return user;
            }

            logger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É', { referralCode, userId });
            return null;

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É', error, { referralCode });
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserReferralCode(userId) {
        try {
            // –¢–µ–ø–µ—Ä—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ userId
            const referralCode = userId.toString();
            
            logger.info('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (userId)', {
                userId,
                referralCode
            });

            return referralCode;

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞', error, { userId });
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserBalance(userId, currency, amount, reason = 'unknown') {
        try {
            const user = await this.getUser(userId);
            if (!user) {
                throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!user.balance) {
                user.balance = { stars: 0, coins: 0, totalEarned: { stars: 0, coins: 0 } };
            }
            if (!user.balance[currency]) {
                user.balance[currency] = 0;
            }
            if (!user.balance.totalEarned) {
                user.balance.totalEarned = { stars: 0, coins: 0 };
            }
            if (!user.balance.totalEarned[currency]) {
                user.balance.totalEarned[currency] = 0;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            user.balance[currency] += amount;
            user.balance.totalEarned[currency] += Math.max(0, amount); // –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è totalEarned

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const result = await this.db.collection('users').updateOne(
                { userId: Number(userId) },
                {
                    $set: {
                        balance: user.balance,
                        lastActivity: new Date()
                    }
                }
            );

            logger.info('–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω', {
                userId,
                currency,
                amount,
                newBalance: user.balance[currency],
                reason,
                result: result.modifiedCount
            });

            return result;

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId, currency, amount, reason });
            throw error;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ
    async sendReferralRewardNotification(referrerId, newUserId, reward) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ bot/index.js
            const { bot } = require('../index');
            if (!bot) {
                logger.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', { referrerId, newUserId, reward });
                return;
            }

            const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n` +
                `üë• –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!\n` +
                `üÜî ID —Ä–µ—Ñ–µ—Ä–∞–ª–∞: \`${newUserId}\`\n\n` +
                `üí∞ **–ù–∞–≥—Ä–∞–¥–∞:**\n` +
                `‚îú ‚≠ê Stars: +${reward.stars}\n` +
                `‚îî ü™ô Magnum Coins: +${reward.coins}\n\n` +
                `üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ—â–µ –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥!`;

            await bot.telegram.sendMessage(referrerId, message, { parse_mode: 'Markdown' });
            logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', { referrerId, newUserId, reward });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–µ', error, { referrerId, newUserId, reward });
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
    async sendReferralRegistrationNotification(userId, referrerId, reward) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ bot/index.js
            const { bot } = require('../index');
            if (!bot) {
                logger.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', { userId, referrerId, reward });
                return;
            }

            let message = `üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MagnumStarBot!**\n\n`;
            
            if (referrerId) {
                message += `üë• –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n` +
                    `üÜî –í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä: \`${referrerId}\`\n\n`;
            }
            
            message += `üí∞ **–ë–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:**\n` +
                `‚îî ü™ô Magnum Coins: +${reward.coins}\n\n` +
                `üöÄ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Stars –∏ Magnum Coins –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

            await bot.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' });
            logger.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', { userId, referrerId, reward });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', error, { userId, referrerId, reward });
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–ª—é—á–µ –≤ –∫–∞–Ω–∞–ª–µ
    async updateKeyChannelMessage(key) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ bot/index.js
            const { bot } = require('../index');
            if (!bot) {
                logger.warn('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–µ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', { key });
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
            const keyDoc = await this.db.collection('keys').findOne({ key: key });
            if (!keyDoc) {
                logger.warn('–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è', { key });
                return;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            let rewardTypeText = '';
            let rewardAmount = 0;
            
            if (keyDoc.type === 'stars') {
                rewardTypeText = '‚≠ê Stars';
                rewardAmount = keyDoc.reward.stars;
            } else if (keyDoc.type === 'coins') {
                rewardTypeText = 'ü™ô Magnum Coins';
                rewardAmount = keyDoc.reward.coins;
            } else if (keyDoc.type === 'miner') {
                const minerInfo = MINER_TYPES[keyDoc.minerType.toUpperCase()];
                rewardTypeText = `‚õèÔ∏è ${minerInfo?.name || '–ú–∞–π–Ω–µ—Ä'}`;
                rewardAmount = 1;
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
            const remainingUses = keyDoc.maxUses - keyDoc.currentUses;
            const isActive = remainingUses > 0;
            const statusEmoji = isActive ? 'üü¢' : 'üî¥';
            const statusText = isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π';

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const updatedMessage = `üéâ **–ù–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω!**\n\n` +
                `üîë **–ö–æ–¥:** \`${keyDoc.key}\`\n` +
                `üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** ${rewardAmount} ${rewardTypeText}\n` +
                `üîÑ **–î–æ—Å—Ç—É–ø–Ω–æ:** ${remainingUses} –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n` +
                `${statusEmoji} **–°—Ç–∞—Ç—É—Å:** ${statusText}\n\n` +
                `‚ö° –£—Å–ø–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –≤ –±–æ—Ç–µ –∏ –∑–∞–±–µ—Ä–∏ –±–æ–Ω—É—Å –ø–µ—Ä–≤—ã–º!`;

            // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
            // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            logger.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–ª—é—á–µ –≤ –∫–∞–Ω–∞–ª–µ', { 
                key, 
                remainingUses, 
                isActive, 
                statusText 
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–ª—é—á–µ –≤ –∫–∞–Ω–∞–ª–µ', error, { key });
        }
    }

    // –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    async startActiveReferralsScheduler() {
        try {
            logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 04:00
            this.activeReferralsInterval = setInterval(async () => {
                try {
                    const now = new Date();
                    const currentHour = now.getHours();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 04:00
                    if (currentHour === 4) {
                        logger.info('‚è∞ 04:00 - –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');
                        await this.updateActiveReferrals();
                    }
                } catch (error) {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', error);
                }
            }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
            logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 04:00)');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', error);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    async updateActiveReferrals() {
        try {
            logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
            const usersWithReferrals = await this.db.collection('users').find({
                'referral.referralId': { $exists: true, $ne: null }
            }).toArray();
            
            logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: ${usersWithReferrals.length}`);
            
            let totalActiveReferrals = 0;
            let totalRewardsGiven = 0;
            
            for (const user of usersWithReferrals) {
                try {
                    const result = await this.checkAndUpdateActiveReferrals(user.userId);
                    if (result.isActive) {
                        totalActiveReferrals++;
                        if (result.rewardGiven) {
                            totalRewardsGiven++;
                        }
                    }
                } catch (error) {
                    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId: user.userId });
                }
            }
            
            logger.info('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', { 
                totalActiveReferrals, 
                totalRewardsGiven 
            });
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async checkAndUpdateActiveReferrals(userId) {
        try {
            const user = await this.getUser(userId);
            if (!user || !user.referral) {
                return { isActive: false, rewardGiven: false };
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const referrals = await this.db.collection('referrals').find({
                referrerId: Number(userId)
            }).toArray();
            
            if (referrals.length === 0) {
                return { isActive: false, rewardGiven: false };
            }
            
            let activeReferralsCount = 0;
            const now = new Date();
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            
            for (const referral of referrals) {
                const isActive = await this.isReferralActive(referral.userId, weekAgo);
                if (isActive) {
                    activeReferralsCount++;
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            const hasActiveReferrals = activeReferralsCount >= 5;
            const hasDailyUsage = await this.checkDailyUsage(userId);
            
            const isActive = hasActiveReferrals && hasDailyUsage;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await this.db.collection('users').updateOne(
                { userId: Number(userId) },
                { 
                    $set: { 
                        'referral.activeReferrals': activeReferralsCount,
                        'referral.isActiveReferrer': isActive,
                        'referral.lastActiveCheck': now
                    }
                }
            );
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º, –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            let rewardGiven = false;
            if (isActive && !user.referral.hasReceivedActiveReferrerBonus) {
                const reward = { stars: 50, coins: 5000 }; // 50 –∑–≤–µ–∑–¥ + 5000 –º–æ–Ω–µ—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                
                await this.updateBalance(userId, reward.stars, reward.coins);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
                const currentEarned = user.referral.totalEarned || { stars: 0, coins: 0 };
                const newEarned = {
                    stars: currentEarned.stars + reward.stars,
                    coins: currentEarned.coins + reward.coins
                };
                
                await this.db.collection('users').updateOne(
                    { userId: Number(userId) },
                    { 
                        $set: { 
                            'referral.totalEarned': newEarned,
                            'referral.hasReceivedActiveReferrerBonus': true,
                            'referral.activeReferrerBonusReceivedAt': now
                        }
                    }
                );
                
                rewardGiven = true;
                logger.info('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–∞', { userId, reward, newEarned });
            }
            
            return { isActive, rewardGiven };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', error, { userId });
            return { isActive: false, rewardGiven: false };
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    async isReferralActive(referralUserId, sinceDate) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
            const userActivity = await this.db.collection('user_activity').find({
                userId: Number(referralUserId),
                lastActivity: { $gte: sinceDate }
            }).toArray();
            
            if (userActivity.length === 0) {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
            const activityDates = userActivity.map(activity => 
                new Date(activity.lastActivity).toDateString()
            );
            
            const uniqueDates = [...new Set(activityDates)];
            const hasConsecutiveDays = this.checkConsecutiveDays(uniqueDates, 5);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏–≥–ª–∞—Å–∏–ª 5 —á–µ–ª–æ–≤–µ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
            const referralInvites = await this.db.collection('referrals').find({
                referrerId: Number(referralUserId),
                createdAt: { $gte: sinceDate }
            }).toArray();
            
            const hasEnoughInvites = referralInvites.length >= 5;
            
            return hasConsecutiveDays && hasEnoughInvites;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞', error, { referralUserId });
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
    async checkDailyUsage(userId) {
        try {
            const now = new Date();
            const fiveDaysAgo = new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000);
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
            const userActivity = await this.db.collection('user_activity').find({
                userId: Number(userId),
                lastActivity: { $gte: fiveDaysAgo }
            }).toArray();
            
            if (userActivity.length === 0) {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
            const activityDates = userActivity.map(activity => 
                new Date(activity.lastActivity).toDateString()
            );
            
            const uniqueDates = [...new Set(activityDates)];
            return this.checkConsecutiveDays(uniqueDates, 5);
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', error, { userId });
            return false;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π
    checkConsecutiveDays(dates, requiredDays) {
        if (dates.length < requiredDays) {
            return false;
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        const sortedDates = dates.sort((a, b) => new Date(a) - new Date(b));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        let consecutiveCount = 1;
        for (let i = 1; i < sortedDates.length; i++) {
            const currentDate = new Date(sortedDates[i]);
            const previousDate = new Date(sortedDates[i - 1]);
            const diffDays = (currentDate - previousDate) / (1000 * 60 * 60 * 24);
            
            if (diffDays === 1) {
                consecutiveCount++;
            } else {
                consecutiveCount = 1;
            }
            
            if (consecutiveCount >= requiredDays) {
                return true;
            }
        }
        
        return false;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    async getActiveReferralsStats(userId) {
        try {
            const user = await this.getUser(userId);
            if (!user || !user.referral) {
                return { activeReferrals: 0, isActiveReferrer: false };
            }
            
            return {
                activeReferrals: user.referral.activeReferrals || 0,
                isActiveReferrer: user.referral.isActiveReferrer || false
            };
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', error, { userId });
            return { activeReferrals: 0, isActiveReferrer: false };
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async updateUserActivity(userId) {
        try {
            const now = new Date();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            await this.db.collection('user_activity').updateOne(
                { userId: Number(userId) },
                { 
                    $set: { 
                        lastActivity: now,
                        updatedAt: now
                    }
                },
                { upsert: true }
            );
            
            logger.debug('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', { userId, timestamp: now });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const dataManager = new DataManager();

module.exports = dataManager;
