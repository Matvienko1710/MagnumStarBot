const database = require('./database');
const logger = require('./logger');

class DataManager {
    constructor() {
        this.db = null;
        this.isInitialized = false;
    }

    async initialize() {
        try {
            if (!database.isConnected) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            }
            
            this.db = database.getDb();
            this.isInitialized = true;
            
            // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            await this.createIndexes();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await this.createDefaultData();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥ (–ø–æ—Å–ª–µ —Ä–µ–¥–µ–ø–ª–æ—è)
            logger.info('‚õèÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥...');
            try {
                logger.info('üîç –í—ã–∑—ã–≤–∞–µ–º processAllMissedMiningRewards...');
                const missedRewardsResult = await this.processAllMissedMiningRewards();
                logger.info('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç processAllMissedMiningRewards –ø–æ–ª—É—á–µ–Ω:', missedRewardsResult);
                
                if (missedRewardsResult.success) {
                    logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', missedRewardsResult);
                } else {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', missedRewardsResult.error);
                }
            } catch (missedRewardsError) {
                logger.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', missedRewardsError);
            }
            
            logger.info('DataManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            this.startMiningIncomeScheduler();
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataManager', error);
            throw error;
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞
    startMiningIncomeScheduler() {
        try {
            logger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞...');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (60000 –º—Å)
            this.miningIncomeInterval = setInterval(async () => {
                try {
                    await this.processAllUsersMiningIncome();
                } catch (error) {
                    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞', error);
                }
            }, 60000); // 1 –º–∏–Ω—É—Ç–∞
            
            logger.info('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 1 –º–∏–Ω—É—Ç–∞)');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞', error);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async processAllUsersMiningIncome() {
        try {
            logger.info('‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏
            const usersWithMiners = await this.db.collection('users').find({
                'miners.0': { $exists: true } // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–π–Ω–µ—Ä
            }).toArray();
            
            logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏: ${usersWithMiners.length}`);
            
            let totalUsersProcessed = 0;
            let totalCoinsAwarded = 0;
            let totalStarsAwarded = 0;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (const user of usersWithMiners) {
                try {
                    const result = await this.processMiningIncome(user.userId);
                    
                    if (result.coins > 0 || result.stars > 0) {
                        totalUsersProcessed++;
                        totalCoinsAwarded += result.coins;
                        totalStarsAwarded += result.stars;
                        
                        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥)', { 
                            userId: user.userId, 
                            coins: result.coins, 
                            stars: result.stars,
                            timestamp: new Date().toISOString()
                        });
                    }
                } catch (userError) {
                    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥)', userError, { userId: user.userId });
                }
            }
            
            if (totalCoinsAwarded > 0 || totalStarsAwarded > 0) {
                logger.info('üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', {
                    totalUsersProcessed,
                    totalCoinsAwarded,
                    totalStarsAwarded
                });
            } else {
                logger.debug('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤)');
            }
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
        }
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞
    stopMiningIncomeScheduler() {
        try {
            if (this.miningIncomeInterval) {
                clearInterval(this.miningIncomeInterval);
                this.miningIncomeInterval = null;
                logger.info('üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ—Ö–æ–¥–∞', error);
        }
    }

    async createIndexes() {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            const collections = ['users', 'transactions', 'settings'];
            for (const collectionName of collections) {
                try {
                    await this.db.createCollection(collectionName);
                    logger.info(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} —Å–æ–∑–¥–∞–Ω–∞`);
                } catch (error) {
                    // –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    logger.info(`–ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                }
            }
            
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ userId, username —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ database.js)
            await this.db.collection('users').createIndex({ userId: 1 }, { unique: true });
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å username - –æ–Ω —É–∂–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ database.js
            
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await this.db.collection('transactions').createIndex({ userId: 1 });
            await this.db.collection('transactions').createIndex({ timestamp: -1 });
            
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–ª—é—á–µ–π
            try {
                await this.db.createCollection('keys');
                await this.db.collection('keys').createIndex({ key: 1 }, { unique: true });
                await this.db.collection('keys').createIndex({ isActive: 1 });
            } catch (error) {
                logger.info('–ö–æ–ª–ª–µ–∫—Ü–∏—è keys —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }
            

            
            logger.info('–ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤', error);
        }
    }

    async createDefaultData() {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settingsCollection = this.db.collection('settings');
            const existingSettings = await settingsCollection.findOne({ type: 'system' });
            
            if (!existingSettings) {
                await settingsCollection.insertOne({
                    type: 'system',
                    botStats: {
                        totalUsers: 0,
                        totalStarsWithdrawn: 0,
                        totalCoinsEarned: 0,
                        activeReferrals: 0
                    },
                    exchangeRates: {
                        starToCoin: 10,
                        coinToStar: 0.1
                    },
                    referralRewards: {
                        level1: { stars: 5, coins: 0 },
                        level2: { stars: 3, coins: 0 },
                        level3: { stars: 1, coins: 0 }
                    },
                    createdAt: new Date(),
                    updatedAt: new Date()
                });
                
                logger.info('–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–∑–¥–∞–Ω—ã');
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', error);
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===
    
    async getUser(userId) {
        try {
            logger.info('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', {
                userId,
                instanceId: this.constructor.name,
                isInitialized: this.isInitialized,
                timestamp: new Date().toISOString()
            });

            const user = await this.db.collection('users').findOne({ userId: Number(userId) });

            if (!user) {
                logger.info('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ', { userId });

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const newUser = {
                    userId: Number(userId),
                    username: null,
                    firstName: null,
                    lastName: null,
                    balance: {
                        stars: 0,
                        coins: 0,
                        totalEarned: { stars: 0, coins: 0 }
                    },
                    referral: {
                        referralId: null,
                        referrerId: null,
                        totalEarned: { stars: 0, coins: 0 },
                        level: 1,
                        hasReceivedReferralBonus: false
                    },
                    subscription: {
                        isConfirmed: false,
                        confirmedAt: null
                    },
                    titles: {
                        current: 'novice',
                        unlocked: ['novice'],
                        history: []
                    },
                    miners: [],
                    createdAt: new Date(),
                    lastActivity: new Date()
                };

                await this.db.collection('users').insertOne(newUser);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
                await this.updateBotStats('totalUsers', 1);

                logger.info('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
                    userId,
                    balance: newUser.balance,
                    timestamp: new Date().toISOString()
                });
                return newUser;
            }

            logger.info('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', {
                userId,
                balance: user.balance,
                lastActivity: user.lastActivity,
                timestamp: new Date().toISOString()
            });

            return user;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, {
                userId,
                errorStack: error.stack
            });
            throw error;
        }
    }

    async updateUser(userId, updateData) {
        try {
            const result = await this.db.collection('users').updateOne(
                { userId: Number(userId) },
                { 
                    $set: { 
                        ...updateData,
                        lastActivity: new Date()
                    }
                }
            );
            
            if (result.modifiedCount > 0) {
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', { userId, updateData });
            }
            
            return result;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId, updateData });
            throw error;
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–ú ===
    
    async getUserBalance(userId) {
        try {
            const user = await this.getUser(userId);
            return user.balance;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
            return { stars: 0, coins: 0, totalEarned: { stars: 0, coins: 0 } };
        }
    }
    
    async updateBalance(userId, currency, amount, reason = 'transaction') {
        try {
            logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', {
                userId,
                currency,
                amount,
                reason,
                instanceId: this.constructor.name,
                isInitialized: this.isInitialized,
                timestamp: new Date().toISOString()
            });

            const user = await this.getUser(userId);
            logger.info('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', {
                userId,
                currentBalance: user.balance,
                lastActivity: user.lastActivity
            });

            const oldBalance = user.balance[currency] || 0;
            const newBalance = oldBalance + amount;

            logger.info('üî¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å', {
                userId,
                currency,
                oldBalance,
                amount,
                newBalance,
                operation: amount > 0 ? 'increase' : 'decrease'
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            const updateResult = await this.updateUser(userId, {
                [`balance.${currency}`]: newBalance,
                [`balance.totalEarned.${currency}`]: (user.balance.totalEarned?.[currency] || 0) + (amount > 0 ? amount : 0)
            });

            logger.info('üíæ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', {
                userId,
                currency,
                updateResult: updateResult.modifiedCount,
                acknowledged: updateResult.acknowledged
            });

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await this.addTransaction(userId, currency, amount, reason, oldBalance, newBalance);

            logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', {
                userId,
                currency,
                amount,
                reason,
                oldBalance,
                newBalance,
                totalEarned: user.balance.totalEarned?.[currency] || 0,
                timestamp: new Date().toISOString(),
                source: 'DataManager.updateBalance'
            });

            return newBalance;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', error, {
                userId,
                currency,
                amount,
                reason,
                errorStack: error.stack
            });
            throw error;
        }
    }

    async getBalance(userId) {
        try {
            const user = await this.getUser(userId);
            return user.balance;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', error, { userId });
            throw error;
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø–ú–ò ===
    
    async addTransaction(userId, currency, amount, reason, oldBalance, newBalance) {
        try {
            const transaction = {
                userId: Number(userId),
                currency,
                amount,
                reason,
                oldBalance,
                newBalance,
                timestamp: new Date()
            };
            
            const result = await this.db.collection('transactions').insertOne(transaction);
            
            if (result.insertedId) {
                logger.info('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', { userId, currency, amount, reason, transactionId: result.insertedId });
            } else {
                logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', { userId, currency, amount, reason });
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', error, { userId, currency, amount, reason });
        }
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–§–ï–†–ê–õ–ê–ú–ò ===
    
    async getUserByReferralId(referralId) {
        try {
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
            const user = await this.db.collection('users').findOne({ userId: Number(referralId) });
            
            if (user) {
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ ID', { referralId, userId: user.userId });
            return user;
            } else {
                logger.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID', { referralId });
                return null;
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID', error, { referralId });
            return null;
        }
    }
    
    async setupReferral(userId, referrerId = null) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getUser(userId);
            
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å referralId, –∑–Ω–∞—á–∏—Ç —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            if (user.referral && user.referral.referralId) {
                logger.info('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', { userId, existingReferralId: user.referral.referralId });
                return user.referral;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if (user.referral && user.referral.hasReceivedReferralBonus) {
                logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', { userId });
                return user.referral;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π referralId (–∏—Å–ø–æ–ª—å–∑—É–µ–º userId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            let referralId = userId;
            let actualReferrerId = null;
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            if (referrerId) {
                const referrer = await this.getUser(Number(referrerId));
                if (referrer && referrer.userId !== userId) {
                    actualReferrerId = Number(referrerId);
                    logger.info('–ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ ID', { userId, referrerId: actualReferrerId });
                } else {
                    logger.warn('–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π', { userId, referrerId, referrerFound: !!referrer });
                }
            }
            
            const referralData = {
                referralId: referralId,
                referrerId: actualReferrerId,
                totalEarned: { stars: 0, coins: 0 },
                level: 1,
                hasReceivedReferralBonus: false
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.updateUser(userId, { referral: referralData });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–≥–æ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            if (actualReferrerId) {
                logger.info('–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞', { referrerId: actualReferrerId, newUserId: userId });
                
                await this.addReferralToUser(actualReferrerId, userId);
                
                // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É (5 –∑–≤–µ–∑–¥)
                logger.info('–ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä—É', { referrerId: actualReferrerId, reward: 5, currency: 'stars' });
                await this.updateBalance(actualReferrerId, 'stars', 5, 'referral_reward');
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞', { referrerId: actualReferrerId, newUserId: userId, reward: 5 });
                
                // –¢–∞–∫–∂–µ –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
                logger.info('–ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { userId, reward: 1000, currency: 'coins' });
                await this.updateBalance(userId, 'coins', 1000, 'referral_registration_bonus');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É
                await this.updateUser(userId, { 'referral.hasReceivedReferralBonus': true });
                
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É', { userId, reward: 1000, currency: 'coins' });
            } else if (referrerId) {
                // –ï—Å–ª–∏ ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                // –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Ç–µ—Ä—è–ª–∏ –±–æ–Ω—É—Å—ã
                logger.info('–†–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { userId, reward: 1000, currency: 'coins', referrerId });
                await this.updateBalance(userId, 'coins', 1000, 'referral_registration_bonus');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –Ω–∞–≥—Ä–∞–¥—É
                await this.updateUser(userId, { 'referral.hasReceivedReferralBonus': true });
                
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É (—Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)', { userId, reward: 1000, currency: 'coins', referrerId });
            }
            
            logger.info('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', { userId, referrerId: actualReferrerId, referralId });
            
            return referralData;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã', error, { userId, referrerId });
            throw error;
        }
    }

    async addReferralToUser(referrerId, newUserId) {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { referrerId, newUserId });
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals
            const referralRecord = {
                userId: Number(newUserId),
                referrerId: Number(referrerId),
                createdAt: new Date(),
                isActive: true,
                reward: 5 // 5 –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é referrals
            await this.db.collection('referrals').insertOne(referralRecord);
            logger.info('–ó–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals', { referrerId, newUserId, referralId: referralRecord._id });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
            const referrer = await this.getUser(referrerId);
            const currentEarned = referrer.referral.totalEarned || { stars: 0, coins: 0 };
            const newEarned = {
                stars: currentEarned.stars + 5, // 5 –∑–≤–µ–∑–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                coins: currentEarned.coins
            };
            
            logger.info('–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞', { referrerId, currentEarned, newEarned });
            await this.updateUser(referrerId, {
                'referral.totalEarned': newEarned
            });
            
            logger.info('–†–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { referrerId, newUserId, newEarned });
            

            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞', error, { referrerId, newUserId });
        }
    }



    async getReferralStats(userId) {
        try {
            const user = await this.getUser(userId);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals
            const referrals = await this.db.collection('referrals')
                .find({ referrerId: Number(userId) })
                .toArray();
            
            logger.info('–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ referrals', { userId, referralsCount: referrals.length });
            
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ userId - —ç—Ç–æ —á–∏—Å–ª–æ
            const numericUserId = Number(userId);
            
            return {
                referralId: numericUserId, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
                totalReferrals: referrals.length,
                activeReferrals: referrals.filter(r => r.isActive).length,
                totalEarned: user.referral.totalEarned || { stars: 0, coins: 0 },
                level: user.referral.level || 1,
                referrals: referrals
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error, { userId });
            
            return {
                referralId: Number(userId),
                totalReferrals: 0,
                activeReferrals: 0,
                totalEarned: { stars: 0, coins: 0 },
                level: 1,
                referrals: []
            };
        }
    }



    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–¢–£–õ–ê–ú–ò ===
    
    async getCurrentTitle(userId) {
        try {
            const user = await this.getUser(userId);
            return user.titles.current;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏—Ç—É–ª–∞', error, { userId });
            throw error;
        }
    }

    async unlockTitle(userId, titleId) {
        try {
            const user = await this.getUser(userId);
            const unlockedTitles = [...user.titles.unlocked];
            
            if (!unlockedTitles.includes(titleId)) {
                unlockedTitles.push(titleId);
                
                await this.updateUser(userId, {
                    'titles.unlocked': unlockedTitles,
                    'titles.history': [...user.titles.history, {
                        titleId,
                        timestamp: new Date(),
                        action: 'unlock'
                    }]
                });
                
                logger.info('–¢–∏—Ç—É–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', { userId, titleId });
            }
            
            return unlockedTitles;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∏—Ç—É–ª–∞', error, { userId, titleId });
            throw error;
        }
    }

    // === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê ===
    
    async getBotStats() {
        try {
            const settings = await this.db.collection('settings').findOne({ type: 'system' });
            return settings ? settings.botStats : {
                totalUsers: 0,
                totalStarsWithdrawn: 0,
                totalCoinsEarned: 0,
                activeReferrals: 0
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞', error);
            return {
                totalUsers: 0,
                totalStarsWithdrawn: 0,
                totalCoinsEarned: 0,
                activeReferrals: 0
            };
        }
    }

    async updateBotStats(field, value) {
        try {
            await this.db.collection('settings').updateOne(
                { type: 'system' },
                { 
                    $inc: { [`botStats.${field}`]: value },
                    $set: { updatedAt: new Date() }
                }
            );
            
            logger.info('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', { field, value });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞', error, { field, value });
        }
    }

    // === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    
    async getTotalUsers() {
        try {
            const count = await this.db.collection('users').countDocuments();
            return count;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', error);
            return 0;
        }
    }

    async getTotalStarsWithdrawn() {
        try {
            const result = await this.db.collection('transactions').aggregate([
                { $match: { currency: 'stars', amount: { $lt: 0 } } },
                { $group: { _id: null, total: { $sum: { $abs: '$amount' } } } }
            ]).toArray();
            
            return result.length > 0 ? result[0].total : 0;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥', error);
            return 0;
        }
    }

    

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ô–ù–ï–†–ê–ú–ò ===
    
    // –ü–æ–∫—É–ø–∫–∞ –º–∞–π–Ω–µ—Ä–∞
    async buyMiner(userId, minerType) {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É –º–∞–π–Ω–µ—Ä–∞', { userId, minerType });
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–π–Ω–µ—Ä–µ
            const minerInfo = this.getMinerInfo(minerType);
            if (!minerInfo) {
                throw new Error('–ú–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getUser(userId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –º–∞–π–Ω–µ—Ä–æ–≤
            const userMinerCount = await this.getUserMinerCount(userId, minerType);
            const globalMinerCount = await this.getGlobalMinerCount(minerType);
            
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤', { 
                userId, 
                minerType, 
                userMinerCount, 
                globalMinerCount,
                maxPerUser: minerInfo.maxPerUser,
                globalLimit: minerInfo.globalLimit
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (userMinerCount >= minerInfo.maxPerUser) {
                throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –º–∞–π–Ω–µ—Ä–æ–≤ "${minerInfo.name}" –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${minerInfo.maxPerUser})`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            if (globalMinerCount >= minerInfo.globalLimit) {
                throw new Error(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –æ–±—â–∏–π –ª–∏–º–∏—Ç –º–∞–π–Ω–µ—Ä–æ–≤ "${minerInfo.name}" –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (${minerInfo.globalLimit})`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
            const canAfford = (user.balance.coins >= minerInfo.price.coins) && 
                             (user.balance.stars >= minerInfo.price.stars);
            
            if (!canAfford) {
                throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞');
            }
            
            // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            if (minerInfo.price.coins > 0) {
                await this.updateBalance(userId, 'coins', -minerInfo.price.coins, 'miner_purchase');
            }
            if (minerInfo.price.stars > 0) {
                await this.updateBalance(userId, 'stars', -minerInfo.price.stars, 'miner_purchase');
            }
            
            // –°–æ–∑–¥–∞–µ–º –º–∞–π–Ω–µ—Ä
            const miner = {
                id: this.generateMinerId(),
                type: minerType,
                name: minerInfo.name,
                speed: minerInfo.speed,
                rarity: minerInfo.rarity,
                purchaseDate: new Date(),
                lastCollection: new Date(),
                lastMiningStart: null, // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞
                isActive: true,
                level: 1,
                experience: 0
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            const userMiners = user.miners || [];
            userMiners.push(miner);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –º–∞–π–Ω–µ—Ä–∞–º–∏
            await this.updateUser(userId, { miners: userMiners });
            
            // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω –º–∞–π–Ω–∏–Ω–≥, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞–π–Ω–µ—Ä –∫ –∞–∫—Ç–∏–≤–Ω—ã–º
            const hasActiveMining = userMiners.some(m => m.isActive && m.lastMiningStart);
            if (hasActiveMining) {
                logger.info('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω –º–∞–π–Ω–∏–Ω–≥, –Ω–æ–≤—ã–π –º–∞–π–Ω–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∞–∫—Ç–∏–≤–Ω—ã–º', { 
                    userId, 
                    minerId: miner.id, 
                    totalMiners: userMiners.length 
                });
            }
            
            logger.info('–ú–∞–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω', { userId, minerType, minerId: miner.id });
            
            return miner;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –º–∞–π–Ω–µ—Ä–∞', error, { userId, minerType });
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserMiners(userId) {
        try {
            const user = await this.getUser(userId);
            return user.miners || [];
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
            return [];
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ (—Ä–∞–∑ –≤ 4 —á–∞—Å–∞)
    async startMining(userId) {
        try {
            logger.info('–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞', { userId });
            
            const user = await this.getUser(userId);
            const miners = user.miners || [];
            
            if (miners.length === 0) {
                return { success: false, message: '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞' };
            }
            
            const now = new Date();
            let canStartMining = false;
            let nextStartTime = null;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥
            // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–π–Ω–µ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è - —Ä–∞–∑—Ä–µ—à–∞–µ–º
            for (const miner of miners) {
                if (!miner.isActive) continue;
                
                if (!miner.lastMiningStart) {
                    canStartMining = true;
                    break;
                }
                
                const timeSinceLastStart = now - new Date(miner.lastMiningStart);
                const hoursSinceLastStart = timeSinceLastStart / (1000 * 60 * 60);
                
                if (hoursSinceLastStart >= 4) {
                    canStartMining = true;
                    break;
                }
            }
            
            // –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            if (!canStartMining) {
                const earliestNextStart = new Date(Math.min(...miners
                    .filter(m => m.isActive && m.lastMiningStart)
                    .map(m => new Date(m.lastMiningStart).getTime() + (4 * 60 * 60 * 1000))
                ));
                
                const timeUntilNext = earliestNextStart - now;
                const hoursUntilNext = Math.ceil(timeUntilNext / (1000 * 60 * 60));
                
                return { 
                    success: false, 
                    message: `–ú–∞–π–Ω–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –≤–æ–∑–º–æ–∂–µ–Ω —á–µ—Ä–µ–∑ ${hoursUntilNext} —á–∞—Å–æ–≤`,
                    nextStartTime: earliestNextStart
                };
            }
            
            if (!canStartMining) {
                return { 
                    success: false, 
                    message: `–ú–∞–π–Ω–∏–Ω–≥ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ ${Math.ceil((nextStartTime - now) / (1000 * 60 * 60))} —á–∞—Å–æ–≤`,
                    nextStartTime: nextStartTime
                };
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞–π–Ω–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤
            for (const miner of miners) {
                if (miner.isActive) {
                    miner.lastMiningStart = now;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–π–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.updateUser(userId, { miners: miners });
            
            // –°—Ä–∞–∑—É –Ω–∞—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∑–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞
            let totalCoins = 0;
            let totalStars = 0;
            
            for (const miner of miners) {
                if (miner.isActive) {
                    totalCoins += miner.speed.coins;
                    totalStars += miner.speed.stars;
                }
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∑–∞ –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É
            if (totalCoins > 0) {
                await this.updateBalance(userId, 'coins', totalCoins, 'mining_income_start');
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ (Coins)', { userId, totalCoins });
            }
            if (totalStars > 0) {
                await this.updateBalance(userId, 'stars', totalStars, 'mining_income_start');
                logger.info('–ù–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–ø—É—Å–∫ –º–∞–π–Ω–∏–Ω–≥–∞ (Stars)', { userId, totalStars });
            }
            
            logger.info('–ú–∞–π–Ω–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω', { userId, startTime: now, initialReward: { coins: totalCoins, stars: totalStars } });
            
            return { 
                success: true, 
                message: `–ú–∞–π–Ω–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${totalCoins} ü™ô Coins –∑–∞ –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É. –î–æ—Ö–æ–¥ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
                startTime: now,
                initialReward: { coins: totalCoins, stars: totalStars }
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–∏–Ω–≥–∞', error, { userId });
            throw error;
        }
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π)
    async processMiningIncome(userId) {
        try {
            const user = await this.getUser(userId);
            const miners = user.miners || [];
            
            if (miners.length === 0) {
                return { coins: 0, stars: 0 };
            }
            
            let totalCoins = 0;
            let totalStars = 0;
            const now = new Date();
            
            logger.info('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞', { userId, minersCount: miners.length });
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞
            for (const miner of miners) {
                if (!miner.isActive || !miner.lastMiningStart) {
                    logger.debug('–ú–∞–π–Ω–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω', { 
                        userId, 
                        minerId: miner.id, 
                        isActive: miner.isActive, 
                        lastMiningStart: miner.lastMiningStart 
                    });
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–π–Ω–∏–Ω–≥ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –º–µ–Ω–µ–µ 4 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
                const timeSinceMiningStart = now - new Date(miner.lastMiningStart);
                const hoursSinceStart = timeSinceMiningStart / (1000 * 60 * 60);
                
                if (hoursSinceStart < 4) {
                    // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É (—Å–∫–æ—Ä–æ—Å—Ç—å —É–∂–µ –≤ –º–∏–Ω—É—Ç—É)
                    const coinsEarned = miner.speed.coins; // –î–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É (1 Coin)
                    const starsEarned = miner.speed.stars; // –î–æ—Ö–æ–¥ –≤ –º–∏–Ω—É—Ç—É
                    
                    totalCoins += coinsEarned;
                    totalStars += starsEarned;
                    
                    logger.debug('–ú–∞–π–Ω–µ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ—Ö–æ–¥', { 
                        userId, 
                        minerId: miner.id, 
                        minerType: miner.type,
                        coinsEarned, 
                        starsEarned,
                        hoursSinceStart: Math.round(hoursSinceStart * 100) / 100
                    });
                } else {
                    logger.debug('–ú–∞–π–Ω–∏–Ω–≥ –º–∞–π–Ω–µ—Ä–∞ –∏—Å—Ç–µ–∫ (–±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤)', { 
                        userId, 
                        minerId: miner.id, 
                        hoursSinceStart: Math.round(hoursSinceStart * 100) / 100
                    });
                }
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥
            if (totalCoins > 0) {
                await this.updateBalance(userId, 'coins', totalCoins, 'mining_income_auto');
                logger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω (Coins)', { userId, totalCoins });
            }
            if (totalStars > 0) {
                await this.updateBalance(userId, 'stars', totalStars, 'mining_income_auto');
                logger.info('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω (Stars)', { userId, totalStars });
            }
            
            if (totalCoins > 0 || totalStars > 0) {
                logger.info('üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç –º–∞–π–Ω–∏–Ω–≥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω', { userId, totalCoins, totalStars });
            } else {
                logger.debug('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤)', { userId });
            }
            
            return { coins: totalCoins, stars: totalStars };
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞', error, { userId });
            return { coins: 0, stars: 0 };
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥ (–ø–æ—Å–ª–µ —Ä–µ–¥–µ–ø–ª–æ—è)
    async processMissedMiningRewards(userId) {
        try {
            const user = await this.getUser(userId);
            const miners = user.miners || [];
            
            if (miners.length === 0) {
                return { coins: 0, stars: 0, minutesProcessed: 0 };
            }
            
            let totalCoins = 0;
            let totalStars = 0;
            let totalMinutesProcessed = 0;
            const now = new Date();
            
            logger.info('–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥', { userId, minersCount: miners.length });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –º–∞–π–Ω–µ—Ä–∞
            for (const miner of miners) {
                if (!miner.isActive || !miner.lastMiningStart) continue;
                
                const miningStartTime = new Date(miner.lastMiningStart);
                const timeSinceStart = now - miningStartTime;
                const hoursSinceStart = timeSinceStart / (1000 * 60 * 60);
                
                // –ï—Å–ª–∏ –º–∞–π–Ω–∏–Ω–≥ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –º–µ–Ω–µ–µ 4 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
                if (hoursSinceStart < 4) {
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç
                    const minutesSinceStart = Math.floor(timeSinceStart / (1000 * 60));
                    const minutesToProcess = Math.min(minutesSinceStart, 240); // –ú–∞–∫—Å–∏–º—É–º 4 —á–∞—Å–∞ (240 –º–∏–Ω—É—Ç)
                    
                    if (minutesToProcess > 0) {
                        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã
                        const coinsEarned = miner.speed.coins * minutesToProcess;
                        const starsEarned = miner.speed.stars * minutesToProcess;
                        
                        totalCoins += coinsEarned;
                        totalStars += starsEarned;
                        totalMinutesProcessed += minutesToProcess;
                        
                        logger.info('–ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–µ—Ä', { 
                            userId, 
                            minerId: miner.id, 
                            minerType: miner.type,
                            minutesProcessed: minutesToProcess,
                            coinsEarned,
                            starsEarned
                        });
                    }
                }
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
            if (totalCoins > 0 || totalStars > 0) {
                if (totalCoins > 0) {
                    await this.updateBalance(userId, 'coins', totalCoins, 'mining_income_missed');
                    logger.info('–ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥ (Coins)', { userId, totalCoins });
                }
                if (totalStars > 0) {
                    await this.updateBalance(userId, 'stars', totalStars, 'mining_income_missed');
                    logger.info('–ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥ (Stars)', { userId, totalStars });
                }
                
                logger.info('–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –º–∞–π–Ω–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã', { 
                    userId, 
                    totalCoins, 
                    totalStars, 
                    totalMinutesProcessed 
                });
            }
            
            return { 
                coins: totalCoins, 
                stars: totalStars, 
                minutesProcessed: totalMinutesProcessed 
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥', error, { userId });
            return { coins: 0, stars: 0, minutesProcessed: 0 };
        }
    }
    
    // –ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async processAllMissedMiningRewards() {
        try {
            logger.info('–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –º–∞–π–Ω–∏–Ω–≥');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏
            const usersWithMiners = await this.db.collection('users').find({
                'miners.0': { $exists: true } // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞–π–Ω–µ—Ä
            }).toArray();
            
            let totalUsersProcessed = 0;
            let totalCoinsAwarded = 0;
            let totalStarsAwarded = 0;
            let totalMinutesProcessed = 0;
            
            logger.info(`–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞–π–Ω–µ—Ä–∞–º–∏: ${usersWithMiners.length}`);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for (const user of usersWithMiners) {
                try {
                    const result = await this.processMissedMiningRewards(user.userId);
                    
                    if (result.minutesProcessed > 0) {
                        totalUsersProcessed++;
                        totalCoinsAwarded += result.coins;
                        totalStarsAwarded += result.stars;
                        totalMinutesProcessed += result.minutesProcessed;
                        
                        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω', { 
                            userId: user.userId, 
                            coins: result.coins, 
                            stars: result.stars, 
                            minutes: result.minutesProcessed 
                        });
                    }
                } catch (userError) {
                    logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userError, { userId: user.userId });
                }
            }
            
            logger.info('–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
                totalUsersProcessed,
                totalCoinsAwarded,
                totalStarsAwarded,
                totalMinutesProcessed
            });
            
            return {
                success: true,
                totalUsersProcessed,
                totalCoinsAwarded,
                totalStarsAwarded,
                totalMinutesProcessed
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥', error);
            return {
                success: false,
                error: error.message
            };
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞–π–Ω–µ—Ä–µ
    getMinerInfo(minerType) {
        const miners = {
            'novice': {
                id: 'novice',
                name: '–ù–æ–≤–∏—á–æ–∫',
                price: { coins: 100, stars: 0 },
                speed: { coins: 1, stars: 0 }, // 1 Magnum Coin –≤ –º–∏–Ω—É—Ç—É
                rarity: '–û–±—ã—á–Ω—ã–π',
                maxPerUser: 10, // –ú–∞–∫—Å–∏–º—É–º 10 –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                globalLimit: 100 // –û–±—â–∏–π –ª–∏–º–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            }
        };
        
        return miners[minerType];
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –º–∞–π–Ω–µ—Ä–∞
    generateMinerId() {
        return 'miner_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserMinerCount(userId, minerType) {
        try {
            const user = await this.getUser(userId);
            const userMiners = user.miners || [];
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–π–Ω–µ—Ä—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            const count = userMiners.filter(miner => miner.type === minerType).length;
            
            logger.info('–ü–æ–¥—Å—á–µ—Ç –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, minerType, count });
            return count;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId, minerType });
            return 0;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async getGlobalMinerCount(minerType) {
        try {
            // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Å–µ—Ö –º–∞–π–Ω–µ—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            const result = await this.db.collection('users').aggregate([
                { $unwind: '$miners' },
                { $match: { 'miners.type': minerType } },
                { $count: 'total' }
            ]).toArray();
            
            const count = result.length > 0 ? result[0].total : 0;
            
            logger.info('–ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', { minerType, count });
            return count;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–∏—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error, { minerType });
            return 0;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    async getActiveMinersCount(minerType) {
        try {
            // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            const result = await this.db.collection('users').aggregate([
                { $unwind: '$miners' },
                { 
                    $match: { 
                        'miners.type': minerType,
                        'miners.isActive': true,
                        'miners.lastMiningStart': { $exists: true, $ne: null }
                    } 
                },
                { $count: 'total' }
            ]).toArray();
            
            const count = result.length > 0 ? result[0].total : 0;
            
            logger.info('–ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', { minerType, count });
            return count;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', error, { minerType });
            return 0;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    async getMinerAvailability(minerType) {
        try {
            const minerInfo = this.getMinerInfo(minerType);
            if (!minerInfo) {
                return null;
            }
            
            const globalCount = await this.getGlobalMinerCount(minerType);
            const activeCount = await this.getActiveMinersCount(minerType);
            const available = Math.max(0, minerInfo.globalLimit - globalCount);
            
            return {
                type: minerType,
                name: minerInfo.name,
                price: minerInfo.price,
                speed: minerInfo.speed,
                rarity: minerInfo.rarity,
                maxPerUser: minerInfo.maxPerUser,
                globalLimit: minerInfo.globalLimit,
                globalCount: globalCount,
                activeCount: activeCount,
                available: available,
                isAvailable: available > 0
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–∞–π–Ω–µ—Ä–∞', error, { minerType });
            return null;
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤–µ–∑–¥
    async createWithdrawalRequest(userId, amount) {
        try {
            logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤–µ–∑–¥', { userId, amount });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.getUser(userId);
            if (user.balance.stars < amount) {
                return { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
            if (amount < 50) {
                return { success: false, message: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 50 ‚≠ê Stars' };
            }
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            const withdrawalRequest = {
                id: this.generateWithdrawalId(),
                userId: Number(userId),
                username: user.username || '–ù–µ —É–∫–∞–∑–∞–Ω',
                firstName: user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                amount: amount,
                status: 'pending', // pending, approved, rejected
                createdAt: new Date(),
                processedAt: null,
                processedBy: null,
                comment: ''
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ
            await this.db.collection('withdrawals').insertOne(withdrawalRequest);
            
            // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã (–≤—ã—á–∏—Ç–∞–µ–º –∏–∑ –±–∞–ª–∞–Ω—Å–∞)
            await this.updateBalance(userId, 'stars', -amount, 'withdrawal_request');
            
            logger.info('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞', { userId, amount, requestId: withdrawalRequest.id });
            
            return { 
                success: true, 
                message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                requestId: withdrawalRequest.id,
                request: withdrawalRequest
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', error, { userId, amount });
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    async getWithdrawalRequests(status = 'pending') {
        try {
            const requests = await this.db.collection('withdrawals')
                .find({ status: status })
                .sort({ createdAt: -1 })
                .toArray();
            
            return requests;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥', error);
            return [];
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ (–æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
    async processWithdrawalRequest(requestId, action, adminId, comment = '') {
        try {
            logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', { requestId, action, adminId, comment });
            
            const request = await this.db.collection('withdrawals').findOne({ id: requestId });
            if (!request) {
                return { success: false, message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
            }
            
            if (request.status !== 'pending') {
                return { success: false, message: '–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞' };
            }
            
            const updateData = {
                status: action === 'approve' ? 'approved' : 'rejected',
                processedAt: new Date(),
                processedBy: Number(adminId),
                comment: comment
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            await this.db.collection('withdrawals').updateOne(
                { id: requestId },
                { $set: updateData }
            );
            
            if (action === 'reject') {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤–µ–∑–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
                await this.updateBalance(request.userId, 'stars', request.amount, 'withdrawal_rejected');
                logger.info('–ó–≤–µ–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏', { 
                    userId: request.userId, 
                    amount: request.amount 
                });
            }
            
            logger.info('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', { requestId, action, adminId });
            
            return { 
                success: true, 
                message: `–ó–∞—è–≤–∫–∞ ${action === 'approve' ? '–æ–¥–æ–±—Ä–µ–Ω–∞' : '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'}`,
                request: { ...request, ...updateData }
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', error, { requestId, action, adminId });
            throw error;
        }
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    generateWithdrawalId() {
        return 'wd_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
    async checkUserSubscription(userId, channelUsername = null, bot = null) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultChannel = process.env.CHANNEL_USERNAME || '@magnumtap';
        const targetChannel = channelUsername || defaultChannel;
        try {
            logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, targetChannel });
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const user = await this.getUser(userId);
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
            if (user.subscription && user.subscription.isConfirmed) {
                return { 
                    success: true, 
                    isSubscribed: true, 
                    message: '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' 
                };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ Telegram API
            let isSubscribed = false;
            
            if (bot) {
                try {
                    // –£–±–∏—Ä–∞–µ–º @ –∏–∑ username –µ—Å–ª–∏ –µ—Å—Ç—å
                    const cleanUsername = targetChannel.replace('@', '');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ getChatMember
                    const chatMember = await bot.getChatMember(`@${cleanUsername}`, userId);
                    
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ 'left' –∏ –Ω–µ 'kicked'
                    isSubscribed = chatMember && 
                                  chatMember.status !== 'left' && 
                                  chatMember.status !== 'kicked';
                    
                    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram API', { 
                        userId, 
                        channelUsername: cleanUsername, 
                        status: chatMember?.status,
                        isSubscribed 
                    });
                    
                } catch (telegramError) {
                    logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram API', { 
                        userId, 
                        targetChannel, 
                        error: telegramError.message 
                    });
                    
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
                    isSubscribed = false;
                }
            } else {
                logger.warn('Bot instance –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', { userId });
                // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
                isSubscribed = true;
            }
            
            if (isSubscribed) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
                await this.updateUser(userId, {
                    'subscription.isConfirmed': true,
                    'subscription.confirmedAt': new Date()
                });
                
                logger.info('–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', { userId });
                
                return { 
                    success: true, 
                    isSubscribed: true, 
                    message: '–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' 
                };
            } else {
                return { 
                    success: false, 
                    isSubscribed: false, 
                    message: '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª' 
                };
            }
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏', error, { userId });
            return { 
                success: false, 
                isSubscribed: false, 
                message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏' 
            };
        }
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º)
    async setSubscriptionStatus(userId, isConfirmed) {
        try {
            const updateData = {
                'subscription.isConfirmed': isConfirmed,
                'subscription.confirmedAt': isConfirmed ? new Date() : null
            };
            
            await this.updateUser(userId, updateData);
            
            logger.info('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω', { userId, isConfirmed });
            
            return { success: true };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏', error, { userId });
            throw error;
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞
    async canUserUseBot(userId) {
        try {
            const user = await this.getUser(userId);
            return user.subscription && user.subscription.isConfirmed;
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É', error, { userId });
            return false;
        }
    }
    
    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–¢–£–õ–ê–ú–ò ===
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏—Ç—É–ª–µ
    getTitleInfo(titleId) {
        const titles = {
            novice: {
                id: 'novice',
                name: '–ù–æ–≤–∏—á–æ–∫',
                description: '–ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                rarity: '–û–±—ã—á–Ω—ã–π',
                requirements: { level: 1, stars: 0, coins: 0 },
                bonuses: { stars: 0, coins: 0 }
            },
            miner: {
                id: 'miner',
                name: '–ú–∞–π–Ω–µ—Ä',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤',
                rarity: '–û–±—ã—á–Ω—ã–π',
                requirements: { level: 5, stars: 100, coins: 500 },
                bonuses: { stars: 5, coins: 10 }
            },
            trader: {
                id: 'trader',
                name: '–¢—Ä–µ–π–¥–µ—Ä',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤',
                rarity: '–†–µ–¥–∫–∏–π',
                requirements: { level: 10, stars: 500, coins: 1000 },
                bonuses: { stars: 15, coins: 25 }
            },
            investor: {
                id: 'investor',
                name: '–ò–Ω–≤–µ—Å—Ç–æ—Ä',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤',
                rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π',
                requirements: { level: 20, stars: 1000, coins: 5000 },
                bonuses: { stars: 30, coins: 50 }
            },
            master: {
                id: 'master',
                name: '–ú–∞—Å—Ç–µ—Ä',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞',
                rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
                requirements: { level: 30, stars: 2500, coins: 10000 },
                bonuses: { stars: 50, coins: 100 }
            },
            legend: {
                id: 'legend',
                name: '–õ–µ–≥–µ–Ω–¥–∞',
                description: '–¢–∏—Ç—É–ª –¥–ª—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤',
                rarity: '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π',
                requirements: { level: 50, stars: 5000, coins: 25000 },
                bonuses: { stars: 100, coins: 200 }
            },
            owner: {
                id: 'owner',
                name: '–í–ª–∞–¥–µ–ª–µ—Ü',
                description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π —Ç–∏—Ç—É–ª –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞',
                rarity: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π',
                requirements: { level: 100, stars: 10000, coins: 50000 },
                bonuses: { stars: 200, coins: 500 },
                adminOnly: true
            }
        };
        
        return titles[titleId] || null;
    }
    
    // –í—ã–¥–∞—á–∞ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async grantTitle(userId, titleId, adminId) {
        try {
            const user = await this.getUser(userId);
            const titleInfo = this.getTitleInfo(titleId);
            
            if (!titleInfo) {
                return { success: false, message: '–¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–∏—Ç—É–ª
            if (user.titles.unlocked.includes(titleId)) {
                return { success: false, message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ç–∏—Ç—É–ª' };
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updateData = {
                'titles.unlocked': [...user.titles.unlocked, titleId],
                'titles.history': [...user.titles.history, {
                    titleId: titleId,
                    grantedAt: new Date(),
                    grantedBy: adminId,
                    reason: '–í—ã–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                }]
            };
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
            if (user.titles.unlocked.length === 1 && user.titles.unlocked[0] === 'novice') {
                updateData['titles.current'] = titleId;
            }
            
            await this.updateUser(userId, updateData);
            
            logger.info('–¢–∏—Ç—É–ª –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { userId, titleId, adminId });
            
            return { 
                success: true, 
                message: `–¢–∏—Ç—É–ª "${titleInfo.name}" —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`,
                titleInfo: titleInfo
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ç–∏—Ç—É–ª–∞', error, { userId, titleId, adminId });
            throw error;
        }
    }
    
    // –ó–∞–±–∏—Ä–∞–Ω–∏–µ —Ç–∏—Ç—É–ª–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async revokeTitle(userId, titleId, adminId) {
        try {
            const user = await this.getUser(userId);
            const titleInfo = this.getTitleInfo(titleId);
            
            if (!titleInfo) {
                return { success: false, message: '–¢–∏—Ç—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ—Ç —Ç–∏—Ç—É–ª
            if (!user.titles.unlocked.includes(titleId)) {
                return { success: false, message: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —ç—Ç–æ–≥–æ —Ç–∏—Ç—É–ª–∞' };
            }
            
            // –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª "–ù–æ–≤–∏—á–æ–∫"
            if (titleId === 'novice') {
                return { success: false, message: '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª "–ù–æ–≤–∏—á–æ–∫"' };
            }
            
            // –ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª "–í–ª–∞–¥–µ–ª–µ—Ü" —É –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if (titleId === 'owner' && user.isAdmin) {
                return { success: false, message: '–ù–µ–ª—å–∑—è –∑–∞–±—Ä–∞—Ç—å —Ç–∏—Ç—É–ª "–í–ª–∞–¥–µ–ª–µ—Ü" —É –≤–ª–∞–¥–µ–ª—å—Ü–∞' };
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUnlocked = user.titles.unlocked.filter(id => id !== titleId);
            const updateData = {
                'titles.unlocked': newUnlocked,
                'titles.history': [...user.titles.history, {
                    titleId: titleId,
                    revokedAt: new Date(),
                    revokedBy: adminId,
                    reason: '–ó–∞–±—Ä–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
                }]
            };
            
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª –±—ã–ª –∑–∞–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ù–æ–≤–∏—á–æ–∫" –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
            if (user.titles.current === titleId) {
                updateData['titles.current'] = 'novice';
            }
            
            await this.updateUser(userId, updateData);
            
            logger.info('–¢–∏—Ç—É–ª –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, titleId, adminId });
            
            return { 
                success: true, 
                message: `–¢–∏—Ç—É–ª "${titleInfo.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
                titleInfo: titleInfo
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–±–∏—Ä–∞–Ω–∏—è —Ç–∏—Ç—É–ª–∞', error, { userId, titleId, adminId });
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getUserTitles(userId) {
        try {
            const user = await this.getUser(userId);
            const unlockedTitles = [];
            
            for (const titleId of user.titles.unlocked) {
                const titleInfo = this.getTitleInfo(titleId);
                if (titleInfo) {
                    unlockedTitles.push({
                        ...titleInfo,
                        isCurrent: user.titles.current === titleId
                    });
                }
            }
            
            return {
                current: user.titles.current,
                unlocked: unlockedTitles,
                history: user.titles.history || []
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
            return { current: 'novice', unlocked: [], history: [] };
        }
    }
    
    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ê–ú–ò ===
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    async createKey(keyData) {
        try {
            const key = {
                key: keyData.key,
                type: keyData.type, // 'stars', 'coins'
                reward: keyData.reward,
                maxUses: keyData.maxUses,
                currentUses: 0,
                createdAt: new Date(),
                createdBy: keyData.createdBy,
                isActive: true
            };
            
            await this.db.collection('keys').insertOne(key);
            
            logger.info('–ö–ª—é—á —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', { 
                key: key.key.substring(0, 6) + '...', 
                type: key.type,
                reward: key.reward,
                maxUses: key.maxUses 
            });
            
            return { success: true, key: key };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', error, { keyData });
            throw error;
        }
    }
    
    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
    async activateKey(key, userId) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            const keyDoc = await this.db.collection('keys').findOne({ 
                key: key, 
                isActive: true 
            });
            
            if (!keyDoc) {
                return { success: false, message: '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            if (keyDoc.currentUses >= keyDoc.maxUses) {
                return { success: false, message: '–ö–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑' };
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –∫–ª—é—á —Ä–∞–Ω–µ–µ
            const activationRecord = await this.db.collection('key_activations').findOne({
                key: key,
                userId: Number(userId)
            });
            
            if (activationRecord) {
                return { success: false, message: '–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –∫–ª—é—á' };
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            let rewardText = [];
            
            if (keyDoc.type === 'stars' && keyDoc.reward.stars > 0) {
                await this.updateBalance(userId, 'stars', keyDoc.reward.stars, 'key_activation');
                rewardText.push(`‚≠ê Stars: +${keyDoc.reward.stars}`);
            }
            
            if (keyDoc.type === 'coins' && keyDoc.reward.coins > 0) {
                await this.updateBalance(userId, 'coins', keyDoc.reward.coins, 'key_activation');
                rewardText.push(`ü™ô Magnum Coins: +${keyDoc.reward.coins}`);
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á–∞
            await this.db.collection('keys').updateOne(
                { key: key },
                { $inc: { currentUses: 1 } }
            );
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–ª—é—á–∞
            await this.db.collection('key_activations').insertOne({
                key: key,
                userId: Number(userId),
                activatedAt: new Date(),
                reward: keyDoc.reward
            });
            
            logger.info('–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', { 
                key: key.substring(0, 6) + '...', 
                userId, 
                reward: keyDoc.reward 
            });
            
            return {
                success: true,
                type: keyDoc.type,
                reward: keyDoc.reward,
                message: '–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!',
                rewardText: rewardText
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞', error, { key: key.substring(0, 6) + '...', userId });
            throw error;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–µ–π
    async getKeysStats() {
        try {
            const totalKeys = await this.db.collection('keys').countDocuments();
            const activeKeys = await this.db.collection('keys').countDocuments({ isActive: true });
            const totalActivations = await this.db.collection('key_activations').countDocuments();
            
            return {
                totalKeys,
                activeKeys,
                totalActivations
            };
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—é—á–µ–π', error);
            return { totalKeys: 0, activeKeys: 0, totalActivations: 0 };
        }
    }
    
    // === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô ===
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    async logMessageForDeletion(messageId, chatId, userId, messageType = 'bot') {
        try {
            const deletionTime = new Date(Date.now() + 15000); // 15 —Å–µ–∫—É–Ω–¥
            
            await this.db.collection('message_deletions').insertOne({
                messageId: messageId,
                chatId: chatId,
                userId: userId,
                messageType: messageType, // 'bot' –∏–ª–∏ 'user'
                createdAt: new Date(),
                deleteAt: deletionTime,
                isDeleted: false
            });
            
            logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ', { 
                messageId, 
                chatId, 
                userId, 
                messageType, 
                deleteAt: deletionTime 
            });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', error, { messageId, chatId, userId });
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    async getMessagesToDelete() {
        try {
            const now = new Date();
            
            const messages = await this.db.collection('message_deletions')
                .find({
                    deleteAt: { $lte: now },
                    isDeleted: false
                })
                .toArray();
            
            return messages;
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', error);
            return [];
        }
    }
    
    // –û—Ç–º–µ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ
    async markMessageAsDeleted(messageId) {
        try {
            await this.db.collection('message_deletions').updateOne(
                { messageId: messageId },
                { $set: { isDeleted: true, deletedAt: new Date() } }
            );
            
            logger.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–µ', { messageId });
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ', error, { messageId });
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
const dataManager = new DataManager();

module.exports = dataManager;
