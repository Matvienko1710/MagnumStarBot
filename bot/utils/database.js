const { MongoClient } = require('mongodb');
const logger = require('./logger');

class Database {
    constructor() {
        this.client = null;
        this.db = null;
        this.isConnected = false;
    }

    async connect() {
        try {
            let uri = process.env.MONGODB_URI;
            if (!uri) {
                throw new Error('MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            }

            console.log('üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas –∫–ª–∞—Å—Ç–µ—Ä—É...');
            console.log('üìä –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URI:', uri.substring(0, 30) + '...');

            // –°–æ–∑–¥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const alternativeUris = [
                uri, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URI
                uri.split('?')[0], // –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ–æ–±—â–µ
                uri.split('?')[0] + '?retryWrites=false', // –¢–æ–ª—å–∫–æ retryWrites
                uri.replace('mongodb+srv://', 'mongodb://'), // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π MongoDB –ø—Ä–æ—Ç–æ–∫–æ–ª
            ];

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render –∏ —Ä–µ—à–µ–Ω–∏—è SSL –ø—Ä–æ–±–ª–µ–º
            const connectionConfigs = [
                // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Render (–±–µ–∑ SSL)
                {
                    serverApi: { 
                        version: '1', 
                        strict: true, 
                        deprecationErrors: true 
                    },
                    ssl: false,
                    tls: false,
                    maxPoolSize: 5,
                    minPoolSize: 1,
                    connectTimeoutMS: 60000,
                    socketTimeoutMS: 60000,
                    serverSelectionTimeoutMS: 60000,
                    heartbeatFrequencyMS: 30000,
                    maxStalenessSeconds: 90,
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
                    directConnection: false,
                    compressors: [],
                    zlibCompressionLevel: 0,
                },
                // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: –° –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                {
                    serverApi: { 
                        version: '1', 
                        strict: true, 
                        deprecationErrors: true 
                    },
                    ssl: true,
                    tls: true,
                    tlsAllowInvalidCertificates: true,
                    tlsAllowInvalidHostnames: true,
                    maxPoolSize: 5,
                    connectTimeoutMS: 60000,
                    socketTimeoutMS: 60000,
                    serverSelectionTimeoutMS: 60000,
                },
                // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è MongoDB Atlas
                {
                    serverApi: { 
                        version: '1', 
                        strict: true, 
                        deprecationErrors: true 
                    },
                    maxPoolSize: 5,
                    connectTimeoutMS: 60000,
                    socketTimeoutMS: 60000,
                    serverSelectionTimeoutMS: 60000,
                },
                // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 4: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è (–¥–ª—è Render)
                {
                    serverApi: { 
                        version: '1', 
                        strict: false, 
                        deprecationErrors: false 
                    },
                    maxPoolSize: 1,
                    connectTimeoutMS: 60000,
                    socketTimeoutMS: 60000,
                    serverSelectionTimeoutMS: 60000,
                }
            ];

            let lastError = null;

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ URI –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            for (let uriIndex = 0; uriIndex < alternativeUris.length; uriIndex++) {
                const currentUri = alternativeUris[uriIndex];
                console.log(`üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ URI ${uriIndex + 1}:`, currentUri.substring(0, 30) + '...');

                for (let configIndex = 0; configIndex < connectionConfigs.length; configIndex++) {
                    const config = connectionConfigs[configIndex];
                    try {
                        console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å URI ${uriIndex + 1} –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ${configIndex + 1}:`, {
                            ssl: config.ssl,
                            tls: config.tls,
                            tlsAllowInvalidCertificates: config.tlsAllowInvalidCertificates,
                            maxPoolSize: config.maxPoolSize,
                            connectTimeoutMS: config.connectTimeoutMS,
                            retryWrites: config.retryWrites
                        });

                        this.client = new MongoClient(currentUri, config);
                        await this.client.connect();
                        this.db = this.client.db();
                        this.isConnected = true;
                        
                        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —Å URI ${uriIndex + 1} –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ${configIndex + 1}`);
                        console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${this.db.databaseName}`);
                        
                        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                        await this.ping();
                        return;
                        
                    } catch (error) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å URI ${uriIndex + 1} –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ${configIndex + 1}:`, error.message);
                        console.error(`üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, {
                            code: error.code,
                            name: error.name,
                            stack: error.stack?.split('\n')[0]
                        });
                        lastError = error;
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
                        if (this.client) {
                            try {
                                await this.client.close();
                            } catch (closeError) {
                                console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', closeError.message);
                            }
                            this.client = null;
                            this.db = null;
                            this.isConnected = false;
                        }
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                        if (configIndex < connectionConfigs.length - 1) {
                            console.log(`‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...`);
                            await new Promise(resolve => setTimeout(resolve, 3000));
                        }
                    }
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É URI
                if (uriIndex < alternativeUris.length - 1) {
                    console.log(`‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º URI...`);
                    await new Promise(resolve => setTimeout(resolve, 5000));
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            throw lastError || new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–µ–π URI –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas:', error.message);
            console.error('üîç –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            this.isConnected = false;
            throw error;
        }
    }

    getDatabase() {
        return this.db;
    }

    getCollection(collectionName) {
        if (!this.db) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        }
        return this.db.collection(collectionName);
    }

    async ping() {
        try {
            if (!this.client) {
                throw new Error('–ö–ª–∏–µ–Ω—Ç MongoDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            const result = await this.client.db('admin').command({ ping: 1 });
            console.log('‚úÖ Ping –∫ MongoDB —É—Å–ø–µ—à–µ–Ω:', result);
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ ping –∫ MongoDB:', error.message);
            throw error;
        }
    }

    async close() {
        try {
            if (this.client) {
                await this.client.close();
                this.isConnected = false;
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB:', error.message);
        }
    }

    async initializeCollections() {
        try {
            if (!this.db) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            }

            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
            console.log('‚úÖ –í–µ—Ä—Å–∏—è –∫–æ–¥–∞: 3.0 - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');

            // –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            const collections = [
                'users',
                'keys', 
                'miners',
                'transactions',
                'referrals',
                'userTitles',
                'titles',
                'minerTypes'
            ];

            console.log(`üìã –°–æ–∑–¥–∞–Ω–∏–µ ${collections.length} –∫–æ–ª–ª–µ–∫—Ü–∏–π...`);

            for (const collectionName of collections) {
                try {
                    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionName}`);
                    
                    const collection = this.db.collection(collectionName);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
                    const collectionExists = await this.db.listCollections({ name: collectionName }).hasNext();
                    
                    if (!collectionExists) {
                        console.log(`üìù –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...`);
                        
                        // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
                        const tempDoc = { 
                            _temp: true, 
                            createdAt: new Date(),
                            collectionName: collectionName 
                        };
                        
                        await collection.insertOne(tempDoc);
                        console.log(`‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ ${collectionName}`);
                        
                        await collection.deleteOne(tempDoc);
                        console.log(`‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ ${collectionName}`);
                        
                        console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`);
                    } else {
                        console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    }
                    
                } catch (collectionError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π ${collectionName}:`, collectionError.message);
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
                }
            }

            console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            await this.createIndexes();
            
            console.log('‚úÖ –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error.message);
            console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
            throw error;
        }
    }

    async createIndexes() {
        try {
            console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
            
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è users
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è users...');
            const usersCollection = this.db.collection('users');
            await usersCollection.createIndex({ userId: 1 }, { unique: true, background: true });
            await usersCollection.createIndex({ username: 1 }, { sparse: true, background: true });
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è users —Å–æ–∑–¥–∞–Ω—ã');

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è keys
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è keys...');
            const keysCollection = this.db.collection('keys');
            await keysCollection.createIndex({ key: 1 }, { unique: true, background: true });
            await keysCollection.createIndex({ isUsed: 1 }, { background: true });
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è keys —Å–æ–∑–¥–∞–Ω—ã');

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è miners
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è miners...');
            const minersCollection = this.db.collection('miners');
            await minersCollection.createIndex({ userId: 1 }, { background: true });
            await minersCollection.createIndex({ type: 1 }, { background: true });
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è miners —Å–æ–∑–¥–∞–Ω—ã');

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è transactions
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è transactions...');
            const transactionsCollection = this.db.collection('transactions');
            await transactionsCollection.createIndex({ userId: 1 }, { background: true });
            await transactionsCollection.createIndex({ timestamp: 1 }, { background: true });
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è transactions —Å–æ–∑–¥–∞–Ω—ã');

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è referrals
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è referrals...');
            const referralsCollection = this.db.collection('referrals');
            await referralsCollection.createIndex({ userId: 1 }, { unique: true, background: true });
            await referralsCollection.createIndex({ referrerId: 1 }, { background: true });
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è referrals —Å–æ–∑–¥–∞–Ω—ã');

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è userTitles
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è userTitles...');
            const userTitlesCollection = this.db.collection('userTitles');
            await userTitlesCollection.createIndex({ userId: 1 }, { unique: true, background: true });
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è userTitles —Å–æ–∑–¥–∞–Ω—ã');

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è titles
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è titles...');
            const titlesCollection = this.db.collection('titles');
            await titlesCollection.createIndex({ id: 1 }, { unique: true, background: true });
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è titles —Å–æ–∑–¥–∞–Ω—ã');

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è minerTypes
            console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è minerTypes...');
            const minerTypesCollection = this.db.collection('minerTypes');
            await minerTypesCollection.createIndex({ id: 1 }, { unique: true, background: true });
            console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è minerTypes —Å–æ–∑–¥–∞–Ω—ã');

            console.log('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
            console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
            throw error;
        }
    }

    async createDefaultData() {
        try {
            console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');

            // –°–æ–∑–¥–∞–µ–º —Ç–∏—Ç—É–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const titlesCollection = this.db.collection('titles');
            const titlesCount = await titlesCollection.countDocuments();
            
            if (titlesCount === 0) {
                const defaultTitles = [
                    {
                        id: 'novice',
                        name: '–ù–æ–≤–∏—á–æ–∫',
                        description: '–ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                        requirements: { level: 1 },
                        isUnlocked: true
                    },
                    {
                        id: 'owner',
                        name: '–í–ª–∞–¥–µ–ª–µ—Ü',
                        description: '–¢–∏—Ç—É–ª –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞',
                        requirements: { level: 10 },
                        isUnlocked: false
                    }
                ];

                await titlesCollection.insertMany(defaultTitles);
                console.log('‚úÖ –¢–∏—Ç—É–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã');
            } else {
                console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${titlesCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏—Ç—É–ª–æ–≤`);
            }

            // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const minerTypesCollection = this.db.collection('minerTypes');
            const minerTypesCount = await minerTypesCollection.countDocuments();
            
            if (minerTypesCount === 0) {
                const defaultMinerTypes = [
                    {
                        id: 'NOVICE',
                        name: '–ù–æ–≤–∏—á–æ–∫',
                        price: 100,
                        priceType: 'coins',
                        rewardType: 'coins',
                        rewardPerMinute: 0.25,
                        rarity: 'common',
                        serverLimit: 100,
                        description: '–ë–∞–∑–æ–≤—ã–π –º–∞–π–Ω–µ—Ä –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'
                    },
                    {
                        id: 'STAR_PATH',
                        name: '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º',
                        price: 100,
                        priceType: 'stars',
                        rewardType: 'stars',
                        rewardPerMinute: 0.01,
                        rarity: 'rare',
                        serverLimit: 100,
                        description: '–ú–∞–π–Ω–µ—Ä –¥–ª—è –¥–æ–±—ã—á–∏ –∑–≤–µ–∑–¥'
                    }
                ];

                await minerTypesCollection.insertMany(defaultMinerTypes);
                console.log('‚úÖ –¢–∏–ø—ã –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã');
            } else {
                console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${minerTypesCount} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ –º–∞–π–Ω–µ—Ä–æ–≤`);
            }

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error.message);
            throw error;
        }
    }

    async getDatabaseStats() {
        try {
            if (!this.db) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            }

            const stats = {};
            const collections = await this.db.listCollections().toArray();
            
            for (const collection of collections) {
                const collectionName = collection.name;
                const count = await this.db.collection(collectionName).countDocuments();
                stats[collectionName] = count;
            }

            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new Database();
