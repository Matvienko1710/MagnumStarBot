const { MongoClient } = require('mongodb');
const logger = require('./logger');

class Database {
    constructor() {
        this.client = null;
        this.db = null;
        this.isConnected = false;
    }

    async connect() {
        try {
            const uri = process.env.MONGODB_URI;
            if (!uri) {
                throw new Error('MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
            }

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            const connectionConfigs = [
                // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 1: –ë–µ–∑ SSL
                {
                    serverApi: { version: '1', strict: true, deprecationErrors: true },
                    ssl: false,
                    tls: false,
                    retryWrites: true,
                    w: 'majority',
                    maxPoolSize: 5,
                    connectTimeoutMS: 30000,
                    socketTimeoutMS: 45000,
                    serverSelectionTimeoutMS: 30000,
                },
                // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 2: –° SSL –Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
                {
                    serverApi: { version: '1', strict: true, deprecationErrors: true },
                    ssl: true,
                    tls: true,
                    tlsAllowInvalidCertificates: true,
                    tlsAllowInvalidHostnames: true,
                    retryWrites: true,
                    w: 'majority',
                    maxPoolSize: 5,
                    connectTimeoutMS: 30000,
                    socketTimeoutMS: 45000,
                    serverSelectionTimeoutMS: 30000,
                },
                // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                {
                    serverApi: { version: '1', strict: true, deprecationErrors: true },
                    retryWrites: true,
                    w: 'majority',
                    maxPoolSize: 5,
                    connectTimeoutMS: 30000,
                    socketTimeoutMS: 45000,
                }
            ];

            let lastError = null;

            for (let i = 0; i < connectionConfigs.length; i++) {
                const config = connectionConfigs[i];
                try {
                    console.log(`üîß –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ${i + 1}:`, {
                        ssl: config.ssl,
                        tls: config.tls,
                        tlsAllowInvalidCertificates: config.tlsAllowInvalidCertificates
                    });

                    this.client = new MongoClient(uri, config);
                    await this.client.connect();
                    this.db = this.client.db();
                    this.isConnected = true;
                    
                    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ${i + 1}`);
                    
                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                    await this.ping();
                    return;
                    
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ${i + 1}:`, error.message);
                    lastError = error;
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
                    if (this.client) {
                        try {
                            await this.client.close();
                        } catch (closeError) {
                            console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', closeError.message);
                        }
                        this.client = null;
                        this.db = null;
                        this.isConnected = false;
                    }
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                    if (i < connectionConfigs.length - 1) {
                        await new Promise(resolve => setTimeout(resolve, 2000));
                    }
                }
            }

            // –ï—Å–ª–∏ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
            throw lastError || new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas:', error.message);
            this.isConnected = false;
            throw error;
        }
    }

    getDatabase() {
        return this.db;
    }

    getCollection(collectionName) {
        if (!this.db) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        }
        return this.db.collection(collectionName);
    }

    async ping() {
        try {
            if (!this.client) {
                throw new Error('–ö–ª–∏–µ–Ω—Ç MongoDB –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }
            
            await this.client.db('admin').command({ ping: 1 });
            console.log('‚úÖ Ping –∫ MongoDB —É—Å–ø–µ—à–µ–Ω');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ ping –∫ MongoDB:', error.message);
            throw error;
        }
    }

    async close() {
        try {
            if (this.client) {
                await this.client.close();
                this.isConnected = false;
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB:', error.message);
        }
    }

    async initializeCollections() {
        try {
            if (!this.db) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            }

            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π...');

            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã
            const collections = [
                'users',
                'keys', 
                'miners',
                'transactions',
                'referrals',
                'userTitles',
                'titles',
                'minerTypes'
            ];

            for (const collectionName of collections) {
                const collection = this.db.collection(collectionName);
                
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                await collection.createIndex({}, { background: true });
                
                console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionName} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`);
            }

            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            await this.createIndexes();
            
            console.log('‚úÖ –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error.message);
            throw error;
        }
    }

    async createIndexes() {
        try {
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è users
            const usersCollection = this.db.collection('users');
            await usersCollection.createIndex({ userId: 1 }, { unique: true, background: true });
            await usersCollection.createIndex({ username: 1 }, { sparse: true, background: true });

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è keys
            const keysCollection = this.db.collection('keys');
            await keysCollection.createIndex({ key: 1 }, { unique: true, background: true });
            await keysCollection.createIndex({ isUsed: 1 }, { background: true });

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è miners
            const minersCollection = this.db.collection('miners');
            await minersCollection.createIndex({ userId: 1 }, { background: true });
            await minersCollection.createIndex({ type: 1 }, { background: true });

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è transactions
            const transactionsCollection = this.db.collection('transactions');
            await transactionsCollection.createIndex({ userId: 1 }, { background: true });
            await transactionsCollection.createIndex({ timestamp: 1 }, { background: true });

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è referrals
            const referralsCollection = this.db.collection('referrals');
            await referralsCollection.createIndex({ userId: 1 }, { unique: true, background: true });
            await referralsCollection.createIndex({ referrerId: 1 }, { background: true });

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è userTitles
            const userTitlesCollection = this.db.collection('userTitles');
            await userTitlesCollection.createIndex({ userId: 1 }, { unique: true, background: true });

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è titles
            const titlesCollection = this.db.collection('titles');
            await titlesCollection.createIndex({ id: 1 }, { unique: true, background: true });

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è minerTypes
            const minerTypesCollection = this.db.collection('minerTypes');
            await minerTypesCollection.createIndex({ id: 1 }, { unique: true, background: true });

            console.log('‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
            throw error;
        }
    }

    async createDefaultData() {
        try {
            console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');

            // –°–æ–∑–¥–∞–µ–º —Ç–∏—Ç—É–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const titlesCollection = this.db.collection('titles');
            const titlesCount = await titlesCollection.countDocuments();
            
            if (titlesCount === 0) {
                const defaultTitles = [
                    {
                        id: 'novice',
                        name: '–ù–æ–≤–∏—á–æ–∫',
                        description: '–ü–µ—Ä–≤—ã–π —Ç–∏—Ç—É–ª –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                        requirements: { level: 1 },
                        isUnlocked: true
                    },
                    {
                        id: 'owner',
                        name: '–í–ª–∞–¥–µ–ª–µ—Ü',
                        description: '–¢–∏—Ç—É–ª –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –±–æ—Ç–∞',
                        requirements: { level: 10 },
                        isUnlocked: false
                    }
                ];

                await titlesCollection.insertMany(defaultTitles);
                console.log('‚úÖ –¢–∏—Ç—É–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã');
            }

            // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const minerTypesCollection = this.db.collection('minerTypes');
            const minerTypesCount = await minerTypesCollection.countDocuments();
            
            if (minerTypesCount === 0) {
                const defaultMinerTypes = [
                    {
                        id: 'NOVICE',
                        name: '–ù–æ–≤–∏—á–æ–∫',
                        price: 100,
                        priceType: 'coins',
                        rewardType: 'coins',
                        rewardPerMinute: 0.25,
                        rarity: 'common',
                        serverLimit: 100,
                        description: '–ë–∞–∑–æ–≤—ã–π –º–∞–π–Ω–µ—Ä –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'
                    },
                    {
                        id: 'STAR_PATH',
                        name: '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º',
                        price: 100,
                        priceType: 'stars',
                        rewardType: 'stars',
                        rewardPerMinute: 0.01,
                        rarity: 'rare',
                        serverLimit: 100,
                        description: '–ú–∞–π–Ω–µ—Ä –¥–ª—è –¥–æ–±—ã—á–∏ –∑–≤–µ–∑–¥'
                    }
                ];

                await minerTypesCollection.insertMany(defaultMinerTypes);
                console.log('‚úÖ –¢–∏–ø—ã –º–∞–π–Ω–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã');
            }

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error.message);
            throw error;
        }
    }

    async getDatabaseStats() {
        try {
            if (!this.db) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
            }

            const stats = {};
            const collections = await this.db.listCollections().toArray();
            
            for (const collection of collections) {
                const collectionName = collection.name;
                const count = await this.db.collection(collectionName).countDocuments();
                stats[collectionName] = count;
            }

            return stats;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new Database();
