const { MongoClient } = require('mongodb');
const logger = require('./logger');

class Database {
  constructor() {
    this.client = null;
    this.db = null;
    this.isConnected = false;
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas
  async connect() {
    try {
      const uri = process.env.MONGODB_URI;
      if (!uri) {
        throw new Error('MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      }

      logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...', { uri: uri.substring(0, 20) + '...' });

      this.client = new MongoClient(uri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
        maxPoolSize: 10,
        serverSelectionTimeoutMS: 5000,
        socketTimeoutMS: 45000,
      });

      await this.client.connect();
      this.db = this.client.db();
      this.isConnected = true;

      logger.info('–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB Atlas', { 
        database: this.db.databaseName,
        collections: await this.db.listCollections().toArray().then(cols => cols.map(c => c.name))
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      await this.db.admin().ping();
      logger.info('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB Atlas –∞–∫—Ç–∏–≤–Ω–æ');

      return this.db;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas', error);
      this.isConnected = false;
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  getDatabase() {
    if (!this.isConnected || !this.db) {
      throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    return this.db;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  getCollection(collectionName) {
    const db = this.getDatabase();
    return db.collection(collectionName);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async ping() {
    try {
      if (!this.isConnected || !this.db) {
        return false;
      }
      await this.db.admin().ping();
      return true;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ ping MongoDB', error);
      return false;
    }
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  async close() {
    try {
      if (this.client) {
        await this.client.close();
        this.isConnected = false;
        this.db = null;
        this.client = null;
        logger.info('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB Atlas –∑–∞–∫—Ä—ã—Ç–æ');
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MongoDB', error);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
  async initializeCollections() {
    try {
      logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –∏–Ω–¥–µ–∫—Å–æ–≤...');

      // –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersCollection = this.getCollection('users');
      await usersCollection.createIndex({ userId: 1 }, { unique: true });
      await usersCollection.createIndex({ username: 1 }, { sparse: true });
      await usersCollection.createIndex({ referralCode: 1 }, { unique: true, sparse: true });

      // –ö–æ–ª–ª–µ–∫—Ü–∏—è –∫–ª—é—á–µ–π
      const keysCollection = this.getCollection('keys');
      await keysCollection.createIndex({ key: 1 }, { unique: true });
      await keysCollection.createIndex({ isActive: 1 });
      await keysCollection.createIndex({ createdAt: 1 });

      // –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–∞–π–Ω–µ—Ä–æ–≤
      const minersCollection = this.getCollection('miners');
      await minersCollection.createIndex({ userId: 1 });
      await minersCollection.createIndex({ minerType: 1 });
      await minersCollection.createIndex({ isActive: 1 });

      // –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const transactionsCollection = this.getCollection('transactions');
      await transactionsCollection.createIndex({ userId: 1 });
      await transactionsCollection.createIndex({ type: 1 });
      await transactionsCollection.createIndex({ createdAt: 1 });

      // –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const referralsCollection = this.getCollection('referrals');
      await referralsCollection.createIndex({ userId: 1 }, { unique: true });
      await referralsCollection.createIndex({ referrerId: 1 });
      await referralsCollection.createIndex({ referralCode: 1 }, { unique: true });

      // –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userTitlesCollection = this.getCollection('userTitles');
      await userTitlesCollection.createIndex({ userId: 1 }, { unique: true });
      await userTitlesCollection.createIndex({ currentTitle: 1 });

      logger.info('–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  async createDefaultData() {
    try {
      logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã
      const titlesCollection = this.getCollection('titles');
      const existingTitles = await titlesCollection.countDocuments();
      
      if (existingTitles === 0) {
        const defaultTitles = [
          {
            id: 'novice',
            name: '–ù–æ–≤–∏—á–æ–∫',
            description: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
            color: 'üü¢',
            rarity: 'common',
            requirements: { stars: 0, coins: 0 }
          },
          {
            id: 'owner',
            name: '–í–ª–∞–¥–µ–ª–µ—Ü',
            description: '–û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º',
            color: 'üü°',
            rarity: 'rare',
            requirements: { stars: 1000, coins: 500 }
          }
        ];

        await titlesCollection.insertMany(defaultTitles);
        logger.info('–ë–∞–∑–æ–≤—ã–µ —Ç–∏—Ç—É–ª—ã —Å–æ–∑–¥–∞–Ω—ã', { count: defaultTitles.length });
      }

      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –º–∞–π–Ω–µ—Ä–æ–≤
      const minerTypesCollection = this.getCollection('minerTypes');
      const existingMinerTypes = await minerTypesCollection.countDocuments();
      
      if (existingMinerTypes === 0) {
        const defaultMinerTypes = [
          {
            id: 'NOVICE',
            name: '–ù–æ–≤–∏—á–æ–∫',
            description: '–ë–∞–∑–æ–≤—ã–π –º–∞–π–Ω–µ—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
            price: 100,
            priceType: 'coins',
            priceSymbol: 'ü™ô',
            rewardType: 'coins',
            rewardSymbol: 'ü™ô',
            rewardPerMinute: 0.25,
            maxReward: 1000,
            rarity: 'common',
            serverLimit: 100,
            availableOnServer: 100
          },
          {
            id: 'STAR_PATH',
            name: '–ü—É—Ç—å –∫ –∑–≤–µ–∑–¥–∞–º',
            description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞–π–Ω–µ—Ä –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            price: 100,
            priceType: 'stars',
            priceSymbol: '‚≠ê',
            rewardType: 'stars',
            rewardSymbol: '‚≠ê',
            rewardPerMinute: 0.01,
            maxReward: 100,
            rarity: 'rare',
            serverLimit: 100,
            availableOnServer: 100
          }
        ];

        await minerTypesCollection.insertMany(defaultMinerTypes);
        logger.info('–ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –º–∞–π–Ω–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω—ã', { count: defaultMinerTypes.length });
      }

      logger.info('–ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async getDatabaseStats() {
    try {
      const stats = {
        collections: {},
        totalDocuments: 0,
        totalSize: 0
      };

      const collections = await this.db.listCollections().toArray();
      
      for (const collection of collections) {
        const collectionStats = await this.db.collection(collection.name).stats();
        stats.collections[collection.name] = {
          count: collectionStats.count,
          size: collectionStats.size,
          avgObjSize: collectionStats.avgObjSize
        };
        stats.totalDocuments += collectionStats.count;
        stats.totalSize += collectionStats.size;
      }

      return stats;
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î', error);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const database = new Database();

module.exports = database;
