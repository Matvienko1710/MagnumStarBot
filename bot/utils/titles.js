// –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏—Ç—É–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const dataManager = require('./dataManager');
const logger = require('./logger');

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã
const AVAILABLE_TITLES = {
  NOVICE: {
    id: 'novice',
    name: '–ù–æ–≤–∏—á–æ–∫',
    description: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    color: 'üü¢',
    rarity: 'common',
    isDefault: true
  },
  OWNER: {
    id: 'owner',
    name: '–í–ª–∞–¥–µ–ª–µ—Ü',
    description: '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    color: 'üü°',
    rarity: 'rare',
    isDefault: false
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const initializeUserTitles = async (userId) => {
  try {
    const user = await dataManager.getUser(userId);
    return user.titles;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
    return {
      current: 'novice',
      unlocked: ['novice'],
      history: []
    };
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserCurrentTitle = async (userId) => {
  try {
    const currentTitleId = await dataManager.getCurrentTitle(userId);
    return AVAILABLE_TITLES[currentTitleId.toUpperCase()] || AVAILABLE_TITLES.NOVICE;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error, { userId });
    return AVAILABLE_TITLES.NOVICE;
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏—Ç—É–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserUnlockedTitles = async (userId) => {
  try {
    const user = await dataManager.getUser(userId);
    return user.titles.unlocked.map(titleId => 
      AVAILABLE_TITLES[titleId.toUpperCase()]
    ).filter(Boolean);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∏—Ç—É–ª–æ–≤', error, { userId });
    return [AVAILABLE_TITLES.NOVICE];
  }
};

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const setUserTitle = async (userId, titleId) => {
  try {
    const user = await dataManager.getUser(userId);
    const titleKey = titleId.toUpperCase();
    
    if (!AVAILABLE_TITLES[titleKey]) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏—Ç—É–ª');
    }
    
    if (!user.titles.unlocked.includes(titleId)) {
      throw new Error('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∏—Ç—É–ª—É');
    }
    
    const oldTitle = user.titles.current;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª
    await dataManager.updateUser(userId, {
      'titles.current': titleId,
      'titles.history': [...user.titles.history, {
        titleId: titleId,
        timestamp: new Date(),
        action: 'set'
      }]
    });
    
    logger.info('–¢–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω', { userId, oldTitle, newTitle: titleId });
    
    return {
      oldTitle: AVAILABLE_TITLES[oldTitle.toUpperCase()],
      newTitle: AVAILABLE_TITLES[titleKey]
    };
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∏—Ç—É–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', error, { userId, titleId });
    throw error;
  }
};

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–∏—Ç—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const unlockTitle = async (userId, titleId) => {
  try {
    const unlockedTitles = await dataManager.unlockTitle(userId, titleId);
    
    logger.info('–¢–∏—Ç—É–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { userId, titleId, unlockedTitles });
    
    return AVAILABLE_TITLES[titleId.toUpperCase()];
    
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∏—Ç—É–ª–∞', error, { userId, titleId });
    throw error;
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏—Ç—É–ª–µ
const getTitleInfo = (titleId) => {
  const titleKey = titleId.toUpperCase();
  return AVAILABLE_TITLES[titleKey] || null;
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ç—É–ª—ã
const getAllAvailableTitles = () => {
  return Object.values(AVAILABLE_TITLES);
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–∏—Ç—É–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const isTitleUnlocked = async (userId, titleId) => {
  try {
    const user = await dataManager.getUser(userId);
    return user.titles.unlocked.includes(titleId);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–∏—Ç—É–ª–∞', error, { userId, titleId });
    return false;
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç–∏—Ç—É–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserTitleHistory = async (userId) => {
  try {
    const user = await dataManager.getUser(userId);
    return user.titles.history;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏—Ç—É–ª–æ–≤', error, { userId });
    return [];
  }
};

module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  getUserCurrentTitle,
  getUserUnlockedTitles,
  setUserTitle,
  unlockTitle,
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏—Ç—É–ª–∞—Ö
  getTitleInfo,
  getAllAvailableTitles,
  
  // –£—Ç–∏–ª–∏—Ç—ã
  isTitleUnlocked,
  getUserTitleHistory,
  initializeUserTitles,
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  AVAILABLE_TITLES
};
