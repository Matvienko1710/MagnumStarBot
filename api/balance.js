const express = require('express');
const { getUserBalance, updateUserBalance } = require('./shared/balanceStore');

const router = express.Router();

// GET /api/balance/:userId
router.get('/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const numericUserId = parseInt(userId);
    
    console.log(`üîç GET /api/balance/:userId - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:`, { 
      userId: userId, 
      timestamp: new Date().toISOString() 
    });

    if (isNaN(numericUserId)) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      });
    }

    const balance = await getUserBalance(numericUserId);
    
    if (balance) {
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, balance);
      res.json({ 
        success: true, 
        ...balance 
      });
    } else {
      res.status(404).json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// POST /api/balance/:userId
router.post('/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const { type, amount, reason } = req.body;
    const numericUserId = parseInt(userId);
    
    console.log(`üîç POST /api/balance/:userId - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:`, { 
      userId: userId, 
      body: { type, amount, reason },
      timestamp: new Date().toISOString() 
    });

    if (isNaN(numericUserId)) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      });
    }

    if (!type || amount === undefined || !reason) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' 
      });
    }

    console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, { type, amount, reason });
    
    const updatedBalance = await updateUserBalance(numericUserId, type, amount, reason);
    
    if (updatedBalance) {
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, updatedBalance);
      res.json({ 
        success: true, 
        ...updatedBalance 
      });
    } else {
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' 
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

module.exports = router;
