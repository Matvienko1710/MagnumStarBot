const express = require('express');
const { updateUserBalance } = require('./shared/balanceStore');

const router = express.Router();

// POST /api/click/:userId
router.post('/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const numericUserId = parseInt(userId);
    
    console.log(`üñ±Ô∏è POST /api/click/:userId - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:`, { 
      userId: userId, 
      timestamp: new Date().toISOString() 
    });

    if (isNaN(numericUserId)) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      });
    }

    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–ª–∏–∫
    const reward = 1; // 1 –º–æ–Ω–µ—Ç–∞ –∑–∞ –∫–ª–∏–∫
    
    console.log(`üí∞ –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–ª–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, { reward });
    
    const updatedBalance = await updateUserBalance(numericUserId, 'coins', reward, 'click_reward');
    
    if (updatedBalance) {
      console.log(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–ª–∏–∫ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, updatedBalance);
      res.json({ 
        success: true, 
        reward: reward,
        ...updatedBalance 
      });
    } else {
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã' 
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–ª–∏–∫:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

module.exports = router;
