const express = require('express');
const { updateUserBalance } = require('./shared/balanceStore');

const router = express.Router();

// POST /api/reward/:userId/ad-watch
router.post('/:userId/ad-watch', async (req, res) => {
  try {
    const { userId } = req.params;
    const { type, amount } = req.body;
    const numericUserId = parseInt(userId);
    
    console.log(`üì∫ POST /api/reward/:userId/ad-watch - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:`, { 
      userId: userId, 
      body: { type, amount },
      timestamp: new Date().toISOString() 
    });

    if (isNaN(numericUserId)) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      });
    }

    if (!type || amount === undefined) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' 
      });
    }

    console.log(`üéÅ –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, { type, amount });
    
    const updatedBalance = await updateUserBalance(numericUserId, type, amount, 'ad_watch');
    
    if (updatedBalance) {
      console.log(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, updatedBalance);
      res.json({ 
        success: true, 
        reward: { type, amount },
        ...updatedBalance 
      });
    } else {
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã' 
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ–∫–ª–∞–º—É:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// POST /api/reward/:userId/case-reward
router.post('/:userId/case-reward', async (req, res) => {
  try {
    const { userId } = req.params;
    const { type, amount, item, rarity } = req.body;
    const numericUserId = parseInt(userId);
    
    console.log(`üéÅ –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, { type, amount, item, rarity });

    if (isNaN(numericUserId)) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' 
      });
    }

    if (!type || amount === undefined) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' 
      });
    }

    const reason = `case_reward_${item || amount}`;
    const updatedBalance = await updateUserBalance(numericUserId, type, amount, reason);
    
    if (updatedBalance) {
      console.log(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∫–µ–π—Å–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, updatedBalance);
      res.json({ 
        success: true, 
        reward: { type, amount, item, rarity },
        ...updatedBalance 
      });
    } else {
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã' 
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã –∫–µ–π—Å–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

module.exports = router;
