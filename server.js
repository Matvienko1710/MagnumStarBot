const express = require('express');
const { Telegraf } = require('telegraf');
const database = require('./bot/utils/database');
const dataManager = require('./bot/utils/dataManager');
const logger = require('./bot/utils/logger');
const cacheManager = require('./bot/utils/cache');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î –≤—Å–µ–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏)
app.use((req, res, next) => {
    req.startTime = Date.now();
    next();
});

// –û—Å–Ω–æ–≤–Ω—ã–µ middleware
app.use(express.json());
app.use(express.static('webapp'));

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
let isDatabaseConnected = false;

// –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
    try {
        logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
        
        await database.connect();
        isDatabaseConnected = true;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataManager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        await dataManager.initialize();
        
        logger.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        return true;
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas', error);
        isDatabaseConnected = false;
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function launchBot() {
    try {
        logger.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        const bot = require('./bot');
        
        if (isDatabaseConnected) {
            logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        } else {
            logger.warn('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ fallback (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)');
        }
        
        return bot;
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞', error);
        throw error;
    }
}

// Health Check API
app.get('/api/health', async (req, res) => {
    try {
        logger.request('Health check –∑–∞–ø—Ä–æ—Å', { 
            method: req.method, 
            url: req.url,
            userAgent: req.get('User-Agent')
        });
        
        const memUsage = process.memoryUsage();
        const cacheStats = cacheManager.getStats();
        
        const healthData = {
            status: isDatabaseConnected ? 'ok' : 'warning',
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            environment: process.env.NODE_ENV || 'development',
            database: {
                connected: isDatabaseConnected,
                status: isDatabaseConnected ? 'connected' : 'disconnected',
                message: isDatabaseConnected ? 'Database connected successfully' : 'Database connection failed - running in fallback mode'
            },
            server: {
                nodeVersion: process.version,
                platform: process.platform,
                memory: {
                    heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024 * 100) / 100,
                    heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024 * 100) / 100,
                    rss: Math.round(memUsage.rss / 1024 / 1024 * 100) / 100,
                    external: Math.round(memUsage.external / 1024 / 1024 * 100) / 100
                },
                pid: process.pid
            },
            cache: {
                totalSize: cacheStats.totalSize,
                hits: cacheStats.hits,
                misses: cacheStats.misses,
                evictions: cacheStats.evictions,
                hitRate: cacheStats.hits + cacheStats.misses > 0 ? 
                    Math.round((cacheStats.hits / (cacheStats.hits + cacheStats.misses)) * 100) : 0
            }
        };
        
        // –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (isDatabaseConnected) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
                const db = database.getDb();
                const collections = await db.listCollections().toArray();
                const collectionNames = collections.map(col => col.name);
                
                const dbStats = {
                    collections: collectionNames.length,
                    collectionNames: collectionNames,
                    status: 'connected'
                };
                
                healthData.database.stats = dbStats;
            } catch (error) {
                logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î –¥–ª—è health check', error);
                healthData.database.stats = 'error';
            }
        }
        
        logger.response('Health check –æ—Ç–≤–µ—Ç', { 
            statusCode: 200, 
            responseTime: Date.now() - req.startTime 
        });
        
        res.status(200).json(healthData);
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ health check', error);
        res.status(500).json({
            status: 'error',
            message: 'Internal server error',
            timestamp: new Date().toISOString()
        });
    }
});

// API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
app.get('/api/cache/stats', (req, res) => {
    try {
        const stats = cacheManager.getStats();
        const memUsage = process.memoryUsage();
        
        const response = {
            ...stats,
            memory: {
                heapUsed: Math.round(memUsage.heapUsed / 1024 / 1024 * 100) / 100,
                heapTotal: Math.round(memUsage.heapTotal / 1024 / 1024 * 100) / 100,
                rss: Math.round(memUsage.rss / 1024 / 1024 * 100) / 100
            }
        };
        
        res.json(response);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞', error);
        res.status(500).json({ error: 'Failed to get cache stats' });
    }
});

app.post('/api/cache/clear', (req, res) => {
    try {
        const beforeStats = cacheManager.getStats();
        cacheManager.clear();
        const afterStats = cacheManager.getStats();
        
        const response = {
            success: true,
            message: 'Cache cleared successfully',
            before: beforeStats,
            after: afterStats,
            freed: beforeStats.totalSize - afterStats.totalSize
        };
        
        logger.info('–ö—ç—à –æ—á–∏—â–µ–Ω —á–µ—Ä–µ–∑ API', response);
        res.json(response);
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞', error);
        res.status(500).json({ error: 'Failed to clear cache' });
    }
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
    logger.error('–û—à–∏–±–∫–∞ Express', error, {
        method: req.method,
        url: req.url,
        userAgent: req.get('User-Agent')
    });
    
    res.status(500).json({
        error: 'Internal Server Error',
        message: error.message
    });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
let isServerStarting = false;

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
    if (isServerStarting) {
        logger.warn('–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫');
        return;
    }
    
    isServerStarting = true;
    
    try {
        logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
        const server = app.listen(PORT, () => {
            logger.info('‚úÖ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω', {
                port: PORT,
                environment: process.env.NODE_ENV || 'development',
                nodeVersion: process.version,
                platform: process.platform
            });
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logger.info('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await initializeDatabase();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
        await launchBot();
        
        logger.info('üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', {
            databaseConnected: isDatabaseConnected,
            mode: isDatabaseConnected ? 'full' : 'fallback'
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø—É—Å–∫–∞
        isServerStarting = false;
        
    } catch (error) {
        logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞', error);
        isServerStarting = false;
        process.exit(1);
    }
}

// Graceful shutdown
process.on('SIGTERM', async () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...');
    
    try {
        if (isDatabaseConnected) {
            await database.close();
            logger.info('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
        
        logger.info('Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown', error);
        process.exit(1);
    }
});

process.on('SIGINT', async () => {
    logger.info('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...');
    
    try {
        if (isDatabaseConnected) {
            await database.close();
            logger.info('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
        
        logger.info('Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown', error);
        process.exit(1);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞', error);
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    logger.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞', { reason, promise });
    process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer();