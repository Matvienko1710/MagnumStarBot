const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
const { getUserBalance, addCoins } = require('../bot/utils/currency');

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/balance/:userId', async (req, res) => {
    try {
        const { userId } = req.params;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º userId –≤ —á–∏—Å–ª–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–æ
        const numericUserId = parseInt(userId);
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const balance = await getUserBalance(numericUserId);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const responseData = {
            stars: balance.stars || 0,
            coins: balance.coins || 0,
            totalEarned: balance.totalEarned || { stars: 0, coins: 0 },
            lastUpdate: new Date().toISOString()
        };

        console.log(`üìä –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${numericUserId}:`, responseData);

        res.json({
            success: true,
            balance: responseData
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –∫–ª–∏–∫–∏
router.post('/click/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const numericUserId = parseInt(userId);
        
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é addCoins
        const COINS_PER_CLICK = 1;
        const result = await addCoins(numericUserId, COINS_PER_CLICK);

        res.json({
            success: true,
            message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${COINS_PER_CLICK} –º–æ–Ω–µ—Ç`,
            balance: result
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
    try {
        const { userId } = req.params;
        const numericUserId = parseInt(userId);

        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è 1 –º–æ–Ω–µ—Ç—É
        const newBalance = await dataManager.updateBalance(numericUserId, 'coins', 1, 'click-reward');
        
        res.json({
            success: true,
            balance: {
                stars: newBalance.stars || 0,
                coins: newBalance.coins || 0,
                totalEarned: newBalance.totalEarned || { stars: 0, coins: 0 },
                lastUpdate: new Date().toISOString()
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

module.exports = router;