const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
const { getUserBalance, addCoinsForClick, addStarsForAd, updateCoins, updateStars } = require('../bot/utils/currency');

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/balance/:userId', async (req, res) => {
    console.log('üîç GET /api/balance/:userId - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:', {
        userId: req.params.userId,
        timestamp: new Date().toISOString()
    });
    
    try {
        const { userId } = req.params;
        const numericUserId = parseInt(userId);
        
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        const balance = await getUserBalance(numericUserId);
        const responseData = {
            stars: balance.stars || 0,
            coins: balance.coins || 0,
            totalEarned: balance.totalEarned || { stars: 0, coins: 0 },
            lastUpdate: new Date().toISOString()
        };

        console.log(`üìä –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${numericUserId}:`, responseData);

        res.json({
            success: true,
            balance: responseData
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç —á–µ—Ä–µ–∑ –∫–ª–∏–∫–∏
router.post('/click/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const numericUserId = parseInt(userId);
        
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        const balance = await addCoinsForClick(numericUserId);
        
        res.json({
            success: true,
            message: '–î–æ–±–∞–≤–ª–µ–Ω–∞ 1 –º–æ–Ω–µ—Ç–∞',
            balance: {
                stars: balance.stars || 0,
                coins: balance.coins || 0,
                totalEarned: balance.totalEarned || { stars: 0, coins: 0 },
                lastUpdate: new Date().toISOString()
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
router.post('/reward/:userId/ad-watch', async (req, res) => {
    try {
        const { userId } = req.params;
        const numericUserId = parseInt(userId);
        
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
        const balance = await addStarsForAd(numericUserId);
        
        res.json({
            success: true,
            message: '–î–æ–±–∞–≤–ª–µ–Ω–æ 0.05 –∑–≤–µ–∑–¥',
            balance: {
                stars: balance.stars || 0,
                coins: balance.coins || 0,
                totalEarned: balance.totalEarned || { stars: 0, coins: 0 },
                lastUpdate: new Date().toISOString()
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ–∫–ª–∞–º—É:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (—Å–ø–∏—Å–∞–Ω–∏–µ/–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ)
router.post('/balance/:userId', async (req, res) => {
    console.log('üîç POST /api/balance/:userId - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:', {
        userId: req.params.userId,
        body: req.body,
        headers: req.headers,
        timestamp: new Date().toISOString()
    });
    
    try {
        const { userId } = req.params;
        const { type, amount, reason } = req.body;
        const numericUserId = parseInt(userId);
        
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        if (!type || amount === undefined) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                message: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã type –∏ amount'
            });
        }

        if (!['coins', 'stars'].includes(type)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–∞–ª—é—Ç—ã',
                message: '–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "coins" –∏–ª–∏ "stars"'
            });
        }

        const numericAmount = parseInt(amount);
        if (isNaN(numericAmount)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞',
                message: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        console.log(`üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${numericUserId}:`, { type, amount: numericAmount, reason });

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        let updatedBalance;
        if (type === 'coins') {
            updatedBalance = await updateCoins(numericUserId, numericAmount, reason);
        } else if (type === 'stars') {
            updatedBalance = await updateStars(numericUserId, numericAmount, reason);
        }

        const responseData = {
            stars: updatedBalance.stars || 0,
            coins: updatedBalance.coins || 0,
            totalEarned: updatedBalance.totalEarned || { stars: 0, coins: 0 },
            lastUpdate: new Date().toISOString()
        };

        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${numericUserId}:`, responseData);

        res.json({
            success: true,
            message: '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            ...responseData,
            balance: responseData
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

// API –¥–ª—è –Ω–∞–≥—Ä–∞–¥ –∫–µ–π—Å–æ–≤
router.post('/reward/:userId/case-reward', async (req, res) => {
    try {
        const { userId } = req.params;
        const { type, amount, item, rarity } = req.body;
        const numericUserId = parseInt(userId);
        
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        if (!type || !amount) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                message: '–¢—Ä–µ–±—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã type –∏ amount'
            });
        }

        console.log(`üéÅ –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${numericUserId}:`, { type, amount, item, rarity });

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        let updatedBalance;
        if (type === 'coins') {
            updatedBalance = await updateCoins(numericUserId, amount, `case_reward_${item}`);
        } else if (type === 'stars') {
            updatedBalance = await updateStars(numericUserId, amount, `case_reward_${item}`);
        }

        const responseData = {
            stars: updatedBalance.stars || 0,
            coins: updatedBalance.coins || 0,
            totalEarned: updatedBalance.totalEarned || { stars: 0, coins: 0 },
            lastUpdate: new Date().toISOString()
        };

        console.log(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∫–µ–π—Å–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${numericUserId}:`, responseData);

        res.json({
            success: true,
            message: `–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: ${item}`,
            ...responseData,
            balance: responseData
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã –∫–µ–π—Å–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

module.exports = router;
