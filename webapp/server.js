const express = require('express');
const path = require('path');
const apiRoutes = require('./api');
const app = express();
const PORT = process.env.PORT || 10000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataManager –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π API —Ä–æ—É—Ç–æ–≤
const dataManager = require('../bot/utils/dataManager');

async function initializeDataManager() {
    try {
        console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DataManager –¥–ª—è WebApp...');
        await dataManager.initialize();
        console.log('‚úÖ DataManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è WebApp');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DataManager –¥–ª—è WebApp:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞, –¥–∞–∂–µ –µ—Å–ª–∏ DataManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API —Ä–æ—É—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
console.log('üîç API —Ä–æ—É—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', typeof apiRoutes);
console.log('üîç API —Ä–æ—É—Ç—ã:', apiRoutes);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É API —Ä–æ—É—Ç–æ–≤
if (apiRoutes && typeof apiRoutes === 'function') {
    console.log('‚úÖ API —Ä–æ—É—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
} else {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API —Ä–æ—É—Ç–æ–≤:', apiRoutes);
}

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
    console.log(`üì° ${req.method} ${req.path} - ${new Date().toISOString()}`);
    next();
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/test', (req, res) => {
    res.json({
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString(),
        apiRoutes: typeof apiRoutes,
        apiRoutesLoaded: !!apiRoutes
    });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
app.get('/api-test', (req, res) => {
    res.json({
        success: true,
        message: 'API —Ç–µ—Å—Ç–æ–≤—ã–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString(),
        apiRoutes: typeof apiRoutes,
        apiRoutesLoaded: !!apiRoutes,
        availableEndpoints: [
            '/api/health',
            '/api/user/balance/:userId',
            '/api/user/click/:userId',
            '/api/user/stats/:userId',
            '/api/user/info/:userId'
        ]
    });
});

// API —Ä–æ—É—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏)
app.use('/api', apiRoutes);

// –†–∞–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-API –∑–∞–ø—Ä–æ—Å–æ–≤)
app.use(express.static(__dirname, {
    index: false // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π index.html
}));

// –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤–µ–¥—É—Ç –Ω–∞ index.html (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–ï–î app.listen)
app.use((err, req, res, next) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: err.message,
        timestamp: new Date().toISOString()
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DataManager –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        await initializeDataManager();

        app.listen(PORT, () => {
            console.log(`üöÄ Magnum Stars WebApp –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
            console.log(`üåê WebApp –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`}`);
            console.log(`üîå API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${process.env.RENDER_EXTERNAL_URL || `http://localhost:${PORT}`}/api`);
            console.log(`üìÅ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑: ${__dirname}`);
            console.log(`üîß –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        process.exit(1);
    }
}

startServer();
