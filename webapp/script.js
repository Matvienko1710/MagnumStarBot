// MagnumStarBot WebApp JavaScript
document.addEventListener('DOMContentLoaded', function() {
    console.log('MagnumStarBot WebApp –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ localStorage
    const urlParams = new URLSearchParams(window.location.search);
    let userId = urlParams.get('userId') || localStorage.getItem('magnumBot_userId');

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º userId –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if (userId && typeof userId === 'string') {
        const numericUserId = parseInt(userId);
        if (!isNaN(numericUserId)) {
            userId = numericUserId;
            console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª userId –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ:', {
                original: urlParams.get('userId') || localStorage.getItem('magnumBot_userId'),
                converted: userId,
                type: typeof userId
            });
        }
    }

    console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ userId:', {
        fromURL: urlParams.get('userId'),
        fromLocalStorage: localStorage.getItem('magnumBot_userId'),
        currentUserId: userId,
        userIdType: typeof userId
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp API –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è userId
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp:', {
        windowTelegram: !!window.Telegram,
        webApp: !!(window.Telegram && window.Telegram.WebApp),
        userAgent: navigator.userAgent.substring(0, 100) + '...',
        referrer: document.referrer,
        location: window.location.href
    });

    if (window.Telegram && window.Telegram.WebApp) {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebApp
            window.Telegram.WebApp.ready();

            // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 100));

            const telegramUser = window.Telegram.WebApp.initDataUnsafe?.user;
            const initData = window.Telegram.WebApp.initData;
            const platform = window.Telegram.WebApp.platform;

            console.log('üîç –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram WebApp:', {
                webAppAvailable: true,
                platform: platform,
                initDataLength: initData ? initData.length : 0,
                initDataUnsafe: !!window.Telegram.WebApp.initDataUnsafe,
                initDataUnsafeKeys: window.Telegram.WebApp.initDataUnsafe ? Object.keys(window.Telegram.WebApp.initDataUnsafe) : [],
                user: telegramUser ? {
                    id: telegramUser.id,
                    username: telegramUser.username,
                    first_name: telegramUser.first_name,
                    last_name: telegramUser.last_name
                } : null,
                isExpanded: window.Telegram.WebApp.isExpanded,
                viewportHeight: window.Telegram.WebApp.viewportHeight,
                viewportStableHeight: window.Telegram.WebApp.viewportStableHeight
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è userId
            if (telegramUser && telegramUser.id) {
                userId = telegramUser.id;
                localStorage.setItem('magnumBot_userId', userId.toString());
                console.log('‚úÖ User ID –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ Telegram WebApp:', {
                    userId: userId,
                    source: 'Telegram.WebApp.initDataUnsafe.user'
                });
            } else if (initData && initData.includes('user=')) {
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å userId –∏–∑ initData
                try {
                    const urlParams = new URLSearchParams(initData);
                    const userParam = urlParams.get('user');
                    if (userParam) {
                        const userData = JSON.parse(decodeURIComponent(userParam));
                        if (userData && userData.id) {
                            userId = userData.id;
                            localStorage.setItem('magnumBot_userId', userId.toString());
                            console.log('‚úÖ User ID –ø–æ–ª—É—á–µ–Ω –∏–∑ initData:', {
                                userId: userId,
                                source: 'initData parsing'
                            });
                        }
                    }
                } catch (parseError) {
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å user –∏–∑ initData:', parseError.message);
                }
            }

            if (!userId) {
                console.log('‚ö†Ô∏è Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ userId –Ω–µ –Ω–∞–π–¥–µ–Ω');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ Telegram
                showTelegramPrompt();
                return;
            }

        } catch (webAppError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Telegram WebApp:', webAppError);
            showTelegramPrompt();
            return;
        }

    } else {
        console.log('‚ùå Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é');
        showTelegramPrompt();
        return;
    }

    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π userId –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', userId);

    if (!userId) {
        // –ï—Å–ª–∏ userId –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º
        console.log('üéÆ UserId –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º');
        showDemoMode();
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º userId –≤ localStorage –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ—Å–µ—â–µ–Ω–∏–π
    localStorage.setItem('magnumBot_userId', userId);
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω userId –≤ localStorage:', {
        userId: userId,
        userIdType: typeof userId
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addResetButton();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData(userId);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –±–∞–ª–∞–Ω—Å–∞
    const balanceNavbar = document.querySelector('.balance-navbar');
    balanceNavbar.style.transform = 'translateY(-100%)';
    balanceNavbar.style.opacity = '0';

    setTimeout(() => {
        balanceNavbar.style.transition = 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        balanceNavbar.style.transform = 'translateY(0)';
        balanceNavbar.style.opacity = '1';
    }, 300);

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function loadUserData(userId) {
        try {
            console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å
            await loadUserBalance(userId);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await loadUserProfile(userId);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function loadUserBalance(userId) {
        try {
            console.log('üì° –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞:', {
                userId: userId,
                userIdType: typeof userId,
                url: `/api/balance/${userId}`
            });

            const response = await fetch(`/api/balance/${userId}`);
            const data = await response.json();

            if (data.success) {
                console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –∑–∞–≥—Ä—É–∂–µ–Ω:', data.data);

                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
                updateBalanceDisplay('stars', data.data.stars);

                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –º–∞–≥–Ω—É–º –∫–æ–∏–Ω–æ–≤
                updateBalanceDisplay('magnum', data.data.magnumCoins);

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                showBalanceUpdate();

            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', data.error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞:', error);
            showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function loadUserProfile(userId) {
        try {
            console.log('üì° –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è:', {
                userId: userId,
                userIdType: typeof userId,
                url: `/api/profile/${userId}`
            });

            const response = await fetch(`/api/profile/${userId}`);
            const data = await response.json();

            if (data.success) {
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω:', data.data);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                updateUserInfo(data.data);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function updateBalanceDisplay(type, amount) {
        const balanceElement = document.getElementById(`${type}-balance`);
        if (balanceElement) {
            const currentAmount = parseInt(balanceElement.textContent.replace(',', '') || '0');
            const targetAmount = amount;

            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
            animateNumber(balanceElement, currentAmount, targetAmount, 1000);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
    function showBalanceUpdate() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.textContent = '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω';
        notification.style.cssText = `
            position: fixed;
            top: 100px;
            right: 20px;
            background: rgba(0, 110, 46, 0.9);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 14px;
            z-index: 10000;
            animation: fadeIn 0.3s ease;
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'fadeOut 0.3s ease';
            setTimeout(() => notification.remove(), 300);
        }, 2000);
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    function updateUserInfo(profile) {
        console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', profile);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const headerTitle = document.querySelector('.header h1');
        if (profile.username) {
            headerTitle.textContent = `–ü—Ä–∏–≤–µ—Ç, ${profile.username}!`;
        } else if (profile.firstName) {
            headerTitle.textContent = `–ü—Ä–∏–≤–µ—Ç, ${profile.firstName}!`;
        } else {
            headerTitle.textContent = 'MagnumStarBot';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
    function showDemoMode() {
        console.log('üéÆ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞...');

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        updateBalanceDisplay('stars', 1250);
        updateBalanceDisplay('magnum', 5678);

        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        const headerTitle = document.querySelector('.header h1');
        if (headerTitle) {
            headerTitle.textContent = 'MagnumStarBot (–î–µ–º–æ)';
        }



        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ User ID
        const enterUserIdBtn = document.getElementById('enter-user-id-btn');
        if (enterUserIdBtn) {
            enterUserIdBtn.style.display = 'block';
            enterUserIdBtn.textContent = '–í–≤–µ—Å—Ç–∏ User ID';
            enterUserIdBtn.addEventListener('click', showUserIdPrompt);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        addResetButton();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ
        setTimeout(() => {
            showError('üéÆ –≠—Ç–æ –¥–µ–º–æ —Ä–µ–∂–∏–º. –ù–∞–∂–º–∏—Ç–µ "–í–≤–µ—Å—Ç–∏ User ID" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.');
        }, 2000);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
        setTimeout(addPulseEffect, 1000);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    function addResetButton() {
        const existingResetBtn = document.getElementById('reset-user-id-btn');
        if (existingResetBtn) {
            existingResetBtn.remove();
        }

        const resetBtn = document.createElement('button');
        resetBtn.id = 'reset-user-id-btn';
        resetBtn.textContent = 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
        resetBtn.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 8px 12px;
            background: rgba(255, 0, 0, 0.8);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 20px;
            cursor: pointer;
            font-size: 12px;
            z-index: 1000;
            transition: all 0.3s ease;
        `;

        resetBtn.addEventListener('mouseenter', function() {
            this.style.background = 'rgba(255, 0, 0, 1)';
            this.style.transform = 'scale(1.05)';
        });

        resetBtn.addEventListener('mouseleave', function() {
            this.style.background = 'rgba(255, 0, 0, 0.8)';
            this.style.transform = 'scale(1)';
        });

        resetBtn.addEventListener('click', function() {
            const confirmMessage = userId
                ? '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π User ID?'
                : '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?';

            if (confirm(confirmMessage)) {
                localStorage.removeItem('magnumBot_userId');
                location.reload();
            }
        });

        document.body.appendChild(resetBtn);
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é –≤ Telegram
    function showTelegramPrompt() {
        console.log('üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é –≤ Telegram');

        const promptDiv = document.createElement('div');
        promptDiv.innerHTML = `
            <div style="
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.9);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
            ">
                <div style="
                    background: white;
                    padding: 30px;
                    border-radius: 20px;
                    text-align: center;
                    max-width: 450px;
                    width: 90%;
                ">
                    <h2 style="margin-bottom: 20px; color: #0088cc;">üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Telegram</h2>
                    <p style="margin-bottom: 20px; color: #666; line-height: 1.5;">
                        –í–µ–±–∞–ø–ø –Ω–µ —Å–º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram.
                        –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
                    </p>

                    <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 20px;">
                        <p style="color: #333; font-weight: bold; margin-bottom: 10px;">üöÄ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–∫—Ä—ã—Ç–∏—è:</p>
                        <ol style="text-align: left; color: #666; padding-left: 20px; margin: 0;">
                            <li style="margin-bottom: 5px;">–û—Ç–∫—Ä–æ–π—Ç–µ Telegram</li>
                            <li style="margin-bottom: 5px;">–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ <strong>@MagnumStarBot</strong></li>
                            <li style="margin-bottom: 5px;">–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code style="background: #e9ecef; padding: 2px 4px; border-radius: 3px;">/start</code></li>
                            <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–µ–±–∞–ø–ø–∞ –≤ –º–µ–Ω—é –±–æ—Ç–∞</li>
                        </ol>
                    </div>

                    <div style="display: flex; gap: 10px; flex-wrap: wrap; justify-content: center;">
                        <button onclick="window.open('https://t.me/MagnumStarBot', '_blank')" style="
                            background: #0088cc;
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 25px;
                            font-size: 16px;
                            cursor: pointer;
                            flex: 1;
                            min-width: 150px;
                        ">üîó –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞</button>

                        <button onclick="this.parentElement.parentElement.parentElement.remove(); showUserIdPrompt();" style="
                            background: #28a745;
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 25px;
                            font-size: 16px;
                            cursor: pointer;
                            flex: 1;
                            min-width: 150px;
                        ">üî¢ –í–≤–µ—Å—Ç–∏ User ID</button>

                        <button onclick="
                            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebApp...');
                            if (window.Telegram && window.Telegram.WebApp) {
                                window.Telegram.WebApp.ready();
                                setTimeout(() => location.reload(), 500);
                            } else {
                                alert('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
                            }
                        " style="
                            background: #ffc107;
                            color: #000;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 25px;
                            font-size: 14px;
                            cursor: pointer;
                            flex: 1;
                            min-width: 150px;
                        ">üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>

                        <button onclick="this.parentElement.parentElement.parentElement.remove(); showDemoMode();" style="
                            background: #6c757d;
                            color: white;
                            border: none;
                            padding: 12px 25px;
                            border-radius: 25px;
                            font-size: 14px;
                            cursor: pointer;
                            width: 100%;
                        ">üì± –î–µ–º–æ —Ä–µ–∂–∏–º</button>
                    </div>

                    <p style="margin-top: 15px; color: #888; font-size: 12px;">
                        üí° User ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ @userinfobot –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram
                    </p>
                </div>
            </div>
        `;

        document.body.appendChild(promptDiv);
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã –¥–ª—è –≤–≤–æ–¥–∞ userId (—Ç–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    function showUserIdPrompt() {
        const promptDiv = document.createElement('div');
        promptDiv.innerHTML = `
            <div style="
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 10000;
            ">
                <div style="
                    background: white;
                    padding: 30px;
                    border-radius: 20px;
                    text-align: center;
                    max-width: 400px;
                    width: 90%;
                ">
                    <h2 style="margin-bottom: 20px; color: #006e2e;">–í–≤–µ–¥–∏—Ç–µ –≤–∞—à User ID</h2>
                    <p style="margin-bottom: 20px; color: #666;">
                        User ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ Telegram –±–æ—Ç–µ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ @userinfobot
                    </p>
                    <input type="text" id="userIdInput" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789"
                           style="width: 100%; padding: 10px; margin-bottom: 20px; border: 1px solid #ddd; border-radius: 5px; font-size: 16px;">
                    <button id="submitUserId" style="
                        background: #006e2e;
                        color: white;
                        border: none;
                        padding: 12px 30px;
                        border-radius: 25px;
                        font-size: 16px;
                        cursor: pointer;
                        width: 100%;
                    ">–í–æ–π—Ç–∏</button>
                </div>
            </div>
        `;

        document.body.appendChild(promptDiv);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
        document.getElementById('submitUserId').addEventListener('click', function() {
            const userIdInput = document.getElementById('userIdInput').value.trim();
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª User ID:', {
                input: userIdInput,
                inputType: typeof userIdInput
            });

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            let userId = userIdInput;
            const numericUserId = parseInt(userIdInput);
            if (!isNaN(numericUserId)) {
                userId = numericUserId;
                console.log('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª –≤–≤–µ–¥–µ–Ω–Ω—ã–π userId –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ:', {
                    original: userIdInput,
                    converted: userId,
                    type: typeof userId
                });
            }

            if (userId) {
                localStorage.setItem('magnumBot_userId', userId);
                promptDiv.remove();

                // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
                const resetBtn = document.getElementById('reset-user-id-btn');
                if (resetBtn) {
                    resetBtn.remove();
                }

                loadUserData(userId);
            } else {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ User ID');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Enter
        document.getElementById('userIdInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                document.getElementById('submitUserId').click();
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        document.getElementById('userIdInput').addEventListener('focus', function() {
            console.log('üéØ –ü–æ–ª–µ –≤–≤–æ–¥–∞ userId –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å');
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–æ–∫
    function showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.textContent = message;
        errorDiv.style.cssText = `
            position: fixed;
            top: 100px;
            left: 20px;
            background: #ff4444;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 14px;
            z-index: 10000;
            animation: fadeIn 0.3s ease;
        `;

        document.body.appendChild(errorDiv);

        setTimeout(() => {
            errorDiv.style.animation = 'fadeOut 0.3s ease';
            setTimeout(() => errorDiv.remove(), 300);
        }, 3000);
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª
    function animateNumber(element, start, end, duration) {
        const startTime = performance.now();
        const difference = end - start;

        function update(currentTime) {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º easeOut —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
            const easeOutProgress = 1 - Math.pow(1 - progress, 3);
            const current = Math.round(start + difference * easeOutProgress);

            element.textContent = current.toLocaleString();

            if (progress < 1) {
                requestAnimationFrame(update);
            }
        }

        requestAnimationFrame(update);
    }

    // –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    function addPulseEffect() {
        const balanceItems = document.querySelectorAll('.balance-item');

        balanceItems.forEach((item, index) => {
            setTimeout(() => {
                item.style.animation = 'pulse 2s infinite';
            }, index * 500);
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é pulse
    const style = document.createElement('style');
    style.textContent = `
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    `;
    document.head.appendChild(style);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(addPulseEffect, 2000);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => loadUserBalance(userId), 30000);



    // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const header = document.querySelector('.header h1');
    let hue = 0;

    setInterval(() => {
        hue = (hue + 1) % 360;
        header.style.textShadow = `2px 2px 4px rgba(0, 0, 0, 0.5), 0 0 10px hsl(${hue}, 70%, 50%)`;
    }, 50);
});
