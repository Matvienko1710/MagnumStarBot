const express = require('express');
const router = express.Router();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ DataManager —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
const dataManager = require('../bot/utils/dataManager');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DataManager
async function ensureDataManagerConnection(req, res, next) {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DataManager:', {
            isInitialized: dataManager.isInitialized,
            hasDb: !!dataManager.db,
            isConnected: dataManager.db ? dataManager.db.client && dataManager.db.isConnected : false
        });

        if (!dataManager.isInitialized || !dataManager.db) {
            console.log('‚ùå DataManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î');
            return res.status(503).json({
                error: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                details: 'DataManager –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
            });
        }

        console.log('‚úÖ DataManager –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        req.dataManager = dataManager;
        next();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DataManager:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ DataManager', details: error.message });
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function ensureDatabaseConnection(req, res, next) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º DataManager –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        if (!dataManager.isInitialized) {
            await dataManager.initialize();
        }
        req.db = dataManager.db;
        next();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ DataManager:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
    }
}

// Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ userId
function validateUserId(req, res, next) {
    const { userId } = req.params;

    if (!userId || isNaN(userId) || Number(userId) <= 0) {
        return res.status(400).json({
            error: '–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            details: 'userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º'
        });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    req.params.userId = Number(userId);
    next();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/balance/:userId', validateUserId, ensureDataManagerConnection, async (req, res) => {
    try {
        const { userId } = req.params;
        const dm = req.dataManager;

        console.log(`üîç API: –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        console.log(`üîç API: DataManager –≥–æ—Ç–æ–≤: ${!!dm && dm.isInitialized}`);
        console.log(`üîç API: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toISOString()}`);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ DataManager
        const user = await dm.getUser(Number(userId));

        console.log(`üîç API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${!!user}`);
        console.log(`üîç API: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, user ? {
            userId: user.userId,
            balance: user.balance,
            lastActivity: user.lastActivity
        } : 'null');

        if (!user) {
            console.log(`‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å
        const balance = user.balance || { stars: 0, coins: 0 };

        console.log(`‚úÖ API: –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è ${userId}:`, balance);
        console.log(`üìä API: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toISOString()}`);
        res.json({
            success: true,
            balance: {
                stars: balance.stars || 0,
                coins: balance.coins || 0,
                totalEarned: balance.totalEarned || { stars: 0, coins: 0 }
            },
            timestamp: new Date().toISOString(),
            lastActivity: user.lastActivity
        });

    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        console.error('‚ùå API: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ)
router.post('/user/click/:userId', validateUserId, ensureDataManagerConnection, async (req, res) => {
    try {
        const { userId } = req.params;
        const dm = req.dataManager;

        console.log(`üîç API: –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        console.log(`üîç API: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫–ª–∏–∫–∞: ${new Date().toISOString()}`);

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ DataManager
        const user = await dm.getUser(Number(userId));

        if (!user) {
            console.log(`‚ùå API: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        console.log(`üîç API: –ë–∞–ª–∞–Ω—Å –¥–æ –∫–ª–∏–∫–∞:`, user.balance);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å Coins –Ω–∞ 1 —á–µ—Ä–µ–∑ DataManager
        const newBalance = await dm.updateBalance(Number(userId), 'coins', 1, 'webapp_click');

        console.log(`‚úÖ API: updateBalance –≤–µ—Ä–Ω—É–ª:`, newBalance);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        const updatedUser = await dm.getUser(Number(userId));
        const balance = updatedUser.balance || { stars: 0, coins: 0 };

        console.log(`‚úÖ API: –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, balance);
        console.log(`üìä API: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–ª–∏–∫–∞: ${new Date().toISOString()}`);

        res.json({
            success: true,
            message: '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!',
            balance: {
                stars: balance.stars || 0,
                coins: balance.coins || 0,
                totalEarned: balance.totalEarned || { stars: 0, coins: 0 }
            }
        });

    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        console.error('‚ùå API: –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/stats/:userId', validateUserId, ensureDataManagerConnection, async (req, res) => {
    try {
        const { userId } = req.params;
        const dm = req.dataManager;
        
        console.log(`üîç API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ DataManager
        const user = await dm.getUser(Number(userId));
        
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ DataManager
        const transactionCount = await dm.db.collection('transactions').countDocuments({ userId: Number(userId) });
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const lastTransaction = await dm.db.collection('transactions')
            .findOne({ userId: Number(userId) }, { sort: { timestamp: -1 } });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const todayTransactions = await dm.db.collection('transactions').countDocuments({
            userId: Number(userId),
            timestamp: { $gte: today },
            reason: 'webapp_click'
        });
        
        console.log(`‚úÖ API: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è ${userId}`);
        
        res.json({
            success: true,
            stats: {
                totalTransactions: transactionCount,
                totalEarned: user.balance?.totalEarned || { stars: 0, coins: 0 },
                todayClicks: todayTransactions,
                lastTransaction: lastTransaction ? {
                    amount: lastTransaction.amount,
                    currency: lastTransaction.currency,
                    reason: lastTransaction.reason,
                    timestamp: lastTransaction.timestamp
                } : null
            }
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/user/info/:userId', validateUserId, ensureDataManagerConnection, async (req, res) => {
    try {
        const { userId } = req.params;
        const dm = req.dataManager;
        
        console.log(`üîç API: –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ DataManager
        const user = await dm.getUser(Number(userId));
        
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —á–µ—Ä–µ–∑ DataManager
        const referralCount = await dm.db.collection('referrals').countDocuments({ referrerId: Number(userId) });
        
        console.log(`‚úÖ API: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è ${userId}`);
        
        res.json({
            success: true,
            user: {
                userId: user.userId,
                firstName: user.first_name,
                username: user.username,
                balance: user.balance || { stars: 0, coins: 0 },
                referral: {
                    referralId: user.referral?.referralId,
                    totalEarned: user.referral?.totalEarned || { stars: 0, coins: 0 },
                    referralCount: referralCount
                },
                createdAt: user.createdAt,
                lastActivity: user.lastActivity
            }
        });
        
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
router.get('/health', (req, res) => {
    console.log('üîç API Health check –≤—ã–∑–≤–∞–Ω');
    console.log('üîç API: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DataManager...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DataManager
    const isConnected = !!dataManager && dataManager.isInitialized;
    console.log(`üîç API: DataManager –ø–æ–¥–∫–ª—é—á–µ–Ω: ${isConnected}`);

    res.json({
        success: true,
        message: 'Magnum Stars WebApp API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        gameSettings: {
            clickReward: '1 Magnum Coin',
            clickLimitPerSecond: 5
        },
        dataManager: {
            connected: isConnected,
            initialized: dataManager ? dataManager.isInitialized : false
        },
        endpoints: [
            '/api/health',
            '/api/user/balance/:userId',
            '/api/user/click/:userId',
            '/api/user/stats/:userId',
            '/api/user/info/:userId'
        ]
    });
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
router.use((req, res, next) => {
    console.log(`üì° API –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.path}`);
    next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è API
router.use((err, req, res, next) => {
    console.error('‚ùå API –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ API',
        message: err.message,
        timestamp: new Date().toISOString()
    });
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞
router.get('/mining/diagnose', ensureDataManagerConnection, async (req, res) => {
    try {
        console.log('üîç –ó–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–∞–π–Ω–∏–Ω–≥–∞');

        const diagnosis = await req.dataManager.diagnoseMiningSystem();

        if (diagnosis.error) {
            return res.status(500).json({
                success: false,
                error: '–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
                details: diagnosis.error
            });
        }

        res.json({
            success: true,
            data: diagnosis,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∞–π–Ω–∏–Ω–≥–∞:', error);
        res.status(500).json({
            success: false,
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
            message: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API
router.use('*', (req, res) => {
    console.log(`‚ùå API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.originalUrl}`);
    res.status(404).json({
        success: false,
        error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        requestedPath: req.originalUrl,
        availableEndpoints: [
            '/api/health',
            '/api/user/balance/:userId',
            '/api/user/click/:userId',
            '/api/user/stats/:userId',
            '/api/user/info/:userId',
            '/api/mining/diagnose'
        ]
    });
});

module.exports = router;
