const express = require('express');
const { MongoClient } = require('mongodb');
const router = express.Router();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
let db = null;
let client = null;

async function connectToDatabase() {
    try {
        if (!client) {
            client = new MongoClient(process.env.MONGODB_URI);
            await client.connect();
            db = client.db();
            console.log('‚úÖ WebApp –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ MongoDB');
        }
        return db;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
        throw error;
    }
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
async function ensureDatabaseConnection(req, res, next) {
    try {
        req.db = await connectToDatabase();
        next();
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' });
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/balance/:userId', ensureDatabaseConnection, async (req, res) => {
    try {
        const { userId } = req.params;
        const db = req.db;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        const user = await db.collection('users').findOne({ userId: Number(userId) });
        
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å
        const balance = user.balance || { stars: 0, coins: 0 };
        
        res.json({
            success: true,
            balance: {
                stars: balance.stars || 0,
                coins: balance.coins || 0,
                totalEarned: balance.totalEarned || { stars: 0, coins: 0 }
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ)
router.post('/user/click/:userId', ensureDatabaseConnection, async (req, res) => {
    try {
        const { userId } = req.params;
        const db = req.db;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.collection('users').findOne({ userId: Number(userId) });
        
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å Stars –Ω–∞ 1
        const currentStars = user.balance?.stars || 0;
        const newStars = currentStars + 1;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await db.collection('users').updateOne(
            { userId: Number(userId) },
            { 
                $set: { 
                    'balance.stars': newStars,
                    'balance.lastUpdated': new Date()
                },
                $inc: { 'balance.totalEarned.stars': 1 }
            }
        );
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.collection('transactions').insertOne({
            userId: Number(userId),
            currency: 'stars',
            amount: 1,
            reason: 'webapp_click',
            oldBalance: currentStars,
            newBalance: newStars,
            timestamp: new Date()
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        const updatedUser = await db.collection('users').findOne({ userId: Number(userId) });
        const balance = updatedUser.balance || { stars: 0, coins: 0 };
        
        res.json({
            success: true,
            message: '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!',
            balance: {
                stars: balance.stars || 0,
                coins: balance.coins || 0,
                totalEarned: balance.totalEarned || { stars: 0, coins: 0 }
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/stats/:userId', ensureDatabaseConnection, async (req, res) => {
    try {
        const { userId } = req.params;
        const db = req.db;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.collection('users').findOne({ userId: Number(userId) });
        
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const transactionCount = await db.collection('transactions').countDocuments({ userId: Number(userId) });
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const lastTransaction = await db.collection('transactions')
            .findOne({ userId: Number(userId) }, { sort: { timestamp: -1 } });
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const todayTransactions = await db.collection('transactions').countDocuments({
            userId: Number(userId),
            timestamp: { $gte: today },
            reason: 'webapp_click'
        });
        
        res.json({
            success: true,
            stats: {
                totalTransactions: transactionCount,
                totalEarned: user.balance?.totalEarned || { stars: 0, coins: 0 },
                todayClicks: todayTransactions,
                lastTransaction: lastTransaction ? {
                    amount: lastTransaction.amount,
                    currency: lastTransaction.currency,
                    reason: lastTransaction.reason,
                    timestamp: lastTransaction.timestamp
                } : null
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/user/info/:userId', ensureDatabaseConnection, async (req, res) => {
    try {
        const { userId } = req.params;
        const db = req.db;
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await db.collection('users').findOne({ userId: Number(userId) });
        
        if (!user) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const referralCount = await db.collection('referrals').countDocuments({ referrerId: Number(userId) });
        
        res.json({
            success: true,
            user: {
                userId: user.userId,
                firstName: user.first_name,
                username: user.username,
                balance: user.balance || { stars: 0, coins: 0 },
                referral: {
                    referralId: user.referral?.referralId,
                    totalEarned: user.referral?.totalEarned || { stars: 0, coins: 0 },
                    referralCount: referralCount
                },
                createdAt: user.createdAt,
                lastActivity: user.lastActivity
            }
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
router.get('/health', (req, res) => {
    console.log('üîç API Health check –≤—ã–∑–≤–∞–Ω');
    res.json({
        success: true,
        message: 'Magnum Stars WebApp API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        endpoints: [
            '/api/health',
            '/api/user/balance/:userId',
            '/api/user/click/:userId',
            '/api/user/stats/:userId',
            '/api/user/info/:userId'
        ]
    });
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
router.use((req, res, next) => {
    console.log(`üì° API –∑–∞–ø—Ä–æ—Å: ${req.method} ${req.path}`);
    next();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è API
router.use((err, req, res, next) => {
    console.error('‚ùå API –æ—à–∏–±–∫–∞:', err);
    res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ API',
        message: err.message,
        timestamp: new Date().toISOString()
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API
router.use('*', (req, res) => {
    console.log(`‚ùå API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.originalUrl}`);
    res.status(404).json({
        success: false,
        error: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω',
        requestedPath: req.originalUrl,
        availableEndpoints: [
            '/api/health',
            '/api/user/balance/:userId',
            '/api/user/click/:userId',
            '/api/user/stats/:userId',
            '/api/user/info/:userId'
        ]
    });
});

module.exports = router;
