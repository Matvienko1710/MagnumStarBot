const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
const { getUserBalance, updateCoins, updateStars } = require('../bot/utils/currency');
const dataManager = require('../bot/utils/dataManager');

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/balance/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º userId –≤ —á–∏—Å–ª–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–æ
        const numericUserId = parseInt(userId);
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const balance = await getUserBalance(numericUserId);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        const responseData = {
            stars: balance.stars || 0,
            magnumCoins: balance.coins || 0,
            totalEarned: balance.totalEarned || { stars: 0, coins: 0 },
            lastUpdate: new Date().toISOString()
        };

        console.log(`üìä –ü–æ–ª—É—á–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${numericUserId}:`, responseData);

        res.json({
            success: true,
            data: responseData
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            message: error.message
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
router.get('/stats', async (req, res) => {
    try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const { getCurrencyStats } = require('../bot/utils/currency');
        const stats = await getCurrencyStats();

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const database = require('../bot/utils/database');
        if (database.isConnected) {
            const db = database.getDb();
            const totalUsers = await db.collection('users').countDocuments();
            const activeUsers = await db.collection('users').countDocuments({
                lastActivity: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            });

            stats.totalUsers = totalUsers;
            stats.activeUsers = activeUsers;
        }

        res.json({
            success: true,
            data: stats
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è leaderboard (—Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
router.get('/leaderboard', async (req, res) => {
    try {
        const database = require('../bot/utils/database');

        if (!database.isConnected) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        }

        const db = database.getDb();

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É –∑–≤–µ–∑–¥
        const leaderboard = await db.collection('users')
            .find({})
            .sort({ 'balance.stars': -1 })
            .limit(10)
            .project({
                userId: 1,
                first_name: 1,
                username: 1,
                balance: 1,
                _id: 0
            })
            .toArray();

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        const formattedLeaderboard = leaderboard.map((user, index) => ({
            rank: index + 1,
            userId: user.userId,
            username: user.username || user.first_name || `User ${user.userId}`,
            stars: user.balance?.stars || 0,
            magnumCoins: user.balance?.coins || 0
        }));

        res.json({
            success: true,
            data: formattedLeaderboard
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è leaderboard:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/profile/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º userId –≤ —á–∏—Å–ª–æ, —Ç–∞–∫ –∫–∞–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —á–∏—Å–ª–æ
        const numericUserId = parseInt(userId);
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID',
                message: 'User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º'
            });
        }
        
        const dataManager = require('../bot/utils/dataManager');

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const user = await dataManager.getUser(numericUserId);

        if (!user) {
            return res.status(404).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        const profile = {
            userId: user.userId,
            username: user.username || user.first_name,
            firstName: user.first_name,
            balance: {
                stars: user.balance?.stars || 0,
                magnumCoins: user.balance?.coins || 0,
                totalEarned: user.balance?.totalEarned || { stars: 0, coins: 0 }
            },
            energy: {
                current: user.energy?.current || 1000,
                max: user.energy?.max || 1000,
                lastRegen: user.energy?.lastRegen || new Date()
            },
            miners: user.miners || [],
            titles: user.titles || { current: 'novice', unlocked: ['novice'] },
            referral: user.referral || { count: 0, earned: 0 },
            createdAt: user.createdAt,
            lastActivity: user.lastActivity
        };

        res.json({
            success: true,
            data: profile
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/energy/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const numericUserId = parseInt(userId);
        
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID'
            });
        }

        const user = await dataManager.getUser(numericUserId);
        if (!user) {
            return res.status(404).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!user.energy) {
            await dataManager.updateUser(numericUserId, {
                energy: {
                    current: 1000,
                    max: 1000,
                    lastRegen: new Date()
                }
            });
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é
        const now = new Date();
        const lastRegen = new Date(user.energy?.lastRegen || now);
        const timeDiff = now - lastRegen;
        const energyRegenRate = 1; // 1 —ç–Ω–µ—Ä–≥–∏—è –≤ —Å–µ–∫—É–Ω–¥—É
        const energyToRegen = Math.floor(timeDiff / 1000) * energyRegenRate;
        
        let currentEnergy = user.energy?.current || 1000;
        const maxEnergy = user.energy?.max || 1000;
        
        if (energyToRegen > 0) {
            currentEnergy = Math.min(maxEnergy, currentEnergy + energyToRegen);
            await dataManager.updateUser(numericUserId, {
                'energy.current': currentEnergy,
                'energy.lastRegen': now
            });
        }

        res.json({
            success: true,
            data: {
                current: currentEnergy,
                max: maxEnergy,
                percentage: Math.round((currentEnergy / maxEnergy) * 100)
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

// API –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ
router.post('/click/:userId', async (req, res) => {
    try {
        const { userId } = req.params;
        const numericUserId = parseInt(userId);
        
        if (isNaN(numericUserId)) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç User ID'
            });
        }

        const user = await dataManager.getUser(numericUserId);
        if (!user) {
            return res.status(404).json({
                success: false,
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!user.energy) {
            await dataManager.updateUser(numericUserId, {
                energy: {
                    current: 1000,
                    max: 1000,
                    lastRegen: new Date()
                }
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        let currentEnergy = user.energy?.current || 1000;
        if (currentEnergy < 1) {
            return res.status(400).json({
                success: false,
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏',
                message: '–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏'
            });
        }

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
        await updateCoins(numericUserId, 1, 'coin_click');
        await updateStars(numericUserId, 0.001, 'coin_click');

        // –¢—Ä–∞—Ç–∏–º —ç–Ω–µ—Ä–≥–∏—é
        currentEnergy -= 1;
        await dataManager.updateUser(numericUserId, {
            'energy.current': currentEnergy,
            'energy.lastRegen': new Date()
        });

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        const balance = await getUserBalance(numericUserId);

        res.json({
            success: true,
            data: {
                rewards: {
                    coins: 1,
                    stars: 0.001
                },
                energy: {
                    current: currentEnergy,
                    max: user.energy?.max || 1000,
                    percentage: Math.round((currentEnergy / (user.energy?.max || 1000)) * 100)
                },
                balance: {
                    stars: balance.stars,
                    magnumCoins: balance.coins
                }
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–µ:', error);
        res.status(500).json({
            success: false,
            error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        });
    }
});

module.exports = router;
