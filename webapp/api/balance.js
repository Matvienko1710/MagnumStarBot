// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
let botFunctions = null;

try {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
  const currency = require('../../bot/utils/currency');
  botFunctions = {
    getUserBalance: currency.getUserBalance,
    updateCoins: currency.updateCoins,
    updateStars: currency.updateStars
  };
  console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è API –±–∞–ª–∞–Ω—Å–∞');
} catch (error) {
  console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error.message);
  console.warn('üìç –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å...');
  
  try {
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ API –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –ø–∞–ø–∫–µ
    const path = require('path');
    const botPath = path.resolve(__dirname, '../../bot/utils/currency.js');
    const currency = require(botPath);
    botFunctions = {
      getUserBalance: currency.getUserBalance,
      updateCoins: currency.updateCoins,
      updateStars: currency.updateStars
    };
    console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –ø—É—Ç–∏');
  } catch (error2) {
    console.warn('‚ö†Ô∏è –ò –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', error2.message);
  }
}

// Fallback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
const { 
  getUserBalance: fallbackGetUserBalance, 
  updateUserBalance: fallbackUpdateUserBalance, 
  canAfford, 
  deductBalance, 
  addBalance,
  getTransactionHistory 
} = require('./shared/balanceStore.js');

module.exports = function handler(req, res) {
  const { method, query, body } = req;
  const { userId } = query;

  if (!userId) {
    return res.status(400).json({
      success: false,
      error: 'User ID is required'
    });
  }

  const numericUserId = parseInt(userId);
  if (isNaN(numericUserId)) {
    return res.status(400).json({
      success: false,
      error: 'Invalid User ID format'
    });
  }

  try {
    if (method === 'GET') {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
      let balance;
      
      if (botFunctions) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
        try {
          balance = await botFunctions.getUserBalance(numericUserId);
          console.log('üìä –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω –æ—Ç –±–æ—Ç–∞:', balance);
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
          balance = fallbackGetUserBalance(numericUserId);
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        balance = fallbackGetUserBalance(numericUserId);
      }
      
      const responseData = {
        stars: balance.stars || 0,
        coins: balance.coins || 0,
        totalEarned: balance.totalEarned || { stars: 0, coins: 0 },
        lastUpdate: balance.lastUpdate || Date.now()
      };

      res.status(200).json({
        success: true,
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ)
        ...responseData,
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–≤ –æ–±—ä–µ–∫—Ç–µ balance –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        balance: responseData
      });
      
    } else if (method === 'POST') {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
      const { type, amount, reason } = body;
      
      if (!type || amount === undefined) {
        return res.status(400).json({
          success: false,
          error: 'Type and amount are required'
        });
      }
      
      if (!['coins', 'stars'].includes(type)) {
        return res.status(400).json({
          success: false,
          error: 'Type must be "coins" or "stars"'
        });
      }
      
      const numericAmount = parseInt(amount);
      if (isNaN(numericAmount)) {
        return res.status(400).json({
          success: false,
          error: 'Amount must be a number'
        });
      }
      
      let updatedBalance;
      
      if (botFunctions) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
        try {
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –±–æ—Ç–∞:', { userId: numericUserId, type, amount: numericAmount, reason });
          
          if (type === 'coins') {
            updatedBalance = await botFunctions.updateCoins(numericUserId, numericAmount, reason);
          } else if (type === 'stars') {
            updatedBalance = await botFunctions.updateStars(numericUserId, numericAmount, reason);
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          updatedBalance = await botFunctions.getUserBalance(numericUserId);
          console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞:', updatedBalance);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:', error.message);
          console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
          updatedBalance = fallbackUpdateUserBalance(numericUserId, type, numericAmount, reason);
        }
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ fallback:', { userId: numericUserId, type, amount: numericAmount, reason });
        updatedBalance = fallbackUpdateUserBalance(numericUserId, type, numericAmount, reason);
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ fallback:', updatedBalance);
      }
      
      const responseData = {
        stars: updatedBalance.stars || 0,
        coins: updatedBalance.coins || 0,
        totalEarned: updatedBalance.totalEarned || { stars: 0, coins: 0 },
        lastUpdate: updatedBalance.lastUpdate || Date.now()
      };

      res.status(200).json({
        success: true,
        message: 'Balance updated successfully',
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ)
        ...responseData,
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–≤ –æ–±—ä–µ–∫—Ç–µ balance –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        balance: responseData
      });
      
    } else {
      res.status(405).json({
        success: false,
        error: 'Method Not Allowed'
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ API –±–∞–ª–∞–Ω—Å–∞:', error);
    res.status(500).json({
      success: false,
      error: 'Internal Server Error',
      message: error.message
    });
  }
}
