// –û–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—Å–µ—Ö API endpoints

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–∞–Ω—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
const usersBalance = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
export function initializeUserBalance(userId) {
  if (!usersBalance.has(userId)) {
    usersBalance.set(userId, {
      stars: 10,
      coins: 1000, // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      totalEarned: { stars: 0, coins: 0 },
      lastUpdate: Date.now(),
      history: [] // –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    });
  }
  return usersBalance.get(userId);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function getUserBalance(userId) {
  return initializeUserBalance(userId);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function updateUserBalance(userId, type, amount, reason = 'transaction') {
  const balance = getUserBalance(userId);
  
  const transaction = {
    type,
    amount,
    reason,
    timestamp: Date.now(),
    balanceBefore: {
      stars: balance.stars,
      coins: balance.coins
    }
  };
  
  if (type === 'coins') {
    balance.coins += amount;
    if (amount > 0) balance.totalEarned.coins += amount;
  } else if (type === 'stars') {
    balance.stars += amount;
    if (amount > 0) balance.totalEarned.stars += amount;
  }
  
  // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –±–∞–ª–∞–Ω—Å—É —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
  balance.coins = Math.max(0, balance.coins);
  balance.stars = Math.max(0, balance.stars);
  
  transaction.balanceAfter = {
    stars: balance.stars,
    coins: balance.coins
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
  balance.history.push(transaction);
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
  if (balance.history.length > 100) {
    balance.history = balance.history.slice(-100);
  }
  
  balance.lastUpdate = Date.now();
  usersBalance.set(userId, balance);
  
  console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, {
    type,
    amount,
    reason,
    newBalance: {
      stars: balance.stars,
      coins: balance.coins
    }
  });
  
  return balance;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
export function canAfford(userId, type, amount) {
  const balance = getUserBalance(userId);
  
  if (type === 'coins') {
    return balance.coins >= amount;
  } else if (type === 'stars') {
    return balance.stars >= amount;
  }
  
  return false;
}

// –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
export function deductBalance(userId, type, amount, reason = 'purchase') {
  if (!canAfford(userId, type, amount)) {
    throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è ${amount} ${type}`);
  }
  
  return updateUserBalance(userId, type, -amount, reason);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
export function addBalance(userId, type, amount, reason = 'reward') {
  return updateUserBalance(userId, type, amount, reason);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export function getTransactionHistory(userId, limit = 20) {
  const balance = getUserBalance(userId);
  return balance.history.slice(-limit).reverse(); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–µ—Ä–≤—ã–º–∏
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export function clearUserData(userId) {
  usersBalance.delete(userId);
  console.log(`üóëÔ∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –æ—á–∏—â–µ–Ω—ã`);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
export function getAllUsers() {
  const users = [];
  for (const [userId, balance] of usersBalance.entries()) {
    users.push({
      userId,
      balance: {
        stars: balance.stars,
        coins: balance.coins,
        totalEarned: balance.totalEarned,
        lastUpdate: balance.lastUpdate
      }
    });
  }
  return users;
}
