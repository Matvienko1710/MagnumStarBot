// API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞

// –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
let botFunctions = null;

try {
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
  const currency = require('../../bot/utils/currency');
  botFunctions = {
    getUserBalance: currency.getUserBalance,
    updateCoins: currency.updateCoins,
    updateStars: currency.updateStars
  };
  console.log('‚úÖ –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è API –Ω–∞–≥—Ä–∞–¥—ã');
} catch (error) {
  console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è API –Ω–∞–≥—Ä–∞–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
}

// Fallback —Ñ—É–Ω–∫—Ü–∏–∏
import { 
  getUserBalance as fallbackGetUserBalance, 
  addBalance, 
  deductBalance,
  canAfford 
} from '../../shared/balanceStore.js';

export default function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({
      success: false,
      error: 'Method Not Allowed'
    });
  }

  const { userId } = req.query;
  const { type, amount, item, rarity } = req.body;

  if (!userId || !type || amount === undefined) {
    return res.status(400).json({
      success: false,
      error: 'Missing required parameters'
    });
  }

  const numericUserId = parseInt(userId);
  const numericAmount = parseInt(amount);

  if (isNaN(numericUserId) || isNaN(numericAmount)) {
    return res.status(400).json({
      success: false,
      error: 'Invalid parameters format'
    });
  }

  try {
    console.log(`üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, {
      type,
      amount,
      item,
      rarity
    });

    let updatedBalance;
    const reason = `case_reward_${item}_${rarity}`;

    if (botFunctions) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
      try {
        if (type === 'coins') {
          await botFunctions.updateCoins(numericUserId, numericAmount, reason);
        } else if (type === 'stars') {
          await botFunctions.updateStars(numericUserId, numericAmount, reason);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updatedBalance = await botFunctions.getUserBalance(numericUserId);
        console.log('üéÅ –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞:', updatedBalance);
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
        updatedBalance = addBalance(numericUserId, type, numericAmount, reason);
      }
    } else {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      updatedBalance = addBalance(numericUserId, type, numericAmount, reason);
    }

    const responseData = {
      stars: updatedBalance.stars || 0,
      coins: updatedBalance.coins || 0,
      totalEarned: updatedBalance.totalEarned || { stars: 0, coins: 0 }
    };

    const response = {
      success: true,
      message: 'Reward processed successfully',
      // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø—Ä—è–º–æ –≤ –∫–æ—Ä–Ω–µ)
      ...responseData,
      // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–≤ –æ–±—ä–µ–∫—Ç–µ balance –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
      balance: responseData,
      reward: {
        item,
        type,
        amount: numericAmount,
        rarity,
        timestamp: Date.now()
      }
    };

    console.log(`‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, response);
    
    res.status(200).json(response);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to process reward',
      message: error.message
    });
  }
}
